{"version":3,"sources":["../../dist-esnext/test/Game.test.js"],"names":["describe","it","gameCopy","game","beforeEach","boardArgs","logMove","getCopy","movements","players","ended","board","white","name","foto","black","move","x","y","gameBeforeLastMove","backMove","length","startPosition","nextPosition"],"mappings":"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","file":"Game.test.js","sourcesContent":["import { deepEqual, equal, notEqual, throws } from 'ptz-assert';\nimport { BoardPosition, Game, Player, Players } from '../index';\ndescribe('Game', () => {\n    describe('needToValidateMovements', () => {\n        it('when null should validate');\n        it('when undefined should validate');\n        it('when true should validate');\n        it('when false should NOT validate');\n    });\n    describe('getCopy', () => {\n        let gameCopy;\n        var game;\n        beforeEach(() => {\n            game = new Game({\n                boardArgs: {\n                    logMove: true\n                }\n            });\n            gameCopy = game.getCopy();\n        });\n        it('notEqual = not using same reference', () => {\n            notEqual(gameCopy, game);\n        });\n        it('movements', () => {\n            deepEqual(gameCopy.movements, game.movements);\n        });\n        it('players', () => {\n            deepEqual(gameCopy.players, game.players);\n        });\n        it('ended', () => {\n            deepEqual(gameCopy.ended, game.ended);\n        });\n        it('board', () => {\n            deepEqual(gameCopy.board, game.board);\n        });\n    });\n    describe('backMove', () => {\n        it('backMove offline game', () => {\n            const players = new Players({\n                white: new Player({ name: 'Angelo', foto: 'img/black_user.png' }),\n                black: new Player({ name: 'Gabi', foto: 'img/white_user.png' })\n            });\n            const game = new Game({\n                players,\n                boardArgs: {\n                    logMove: true\n                }\n            });\n            game.move(new BoardPosition({ x: 2, y: 7 }), new BoardPosition({ x: 2, y: 6 }));\n            const gameBeforeLastMove = game.getCopy();\n            game.move(new BoardPosition({ x: 2, y: 0 }), new BoardPosition({ x: 2, y: 1 }));\n            game.backMove();\n            equal(gameBeforeLastMove.movements.length, game.movements.length);\n            deepEqual(gameBeforeLastMove.movements, game.movements);\n        });\n    });\n    describe('Move', () => {\n        var game;\n        beforeEach(() => {\n            const players = new Players({\n                white: new Player({ name: 'Angelo', foto: 'img/black_user.png' }),\n                black: new Player({ name: 'Gabi', foto: 'img/white_user.png' })\n            });\n            game = new Game({\n                players,\n                boardArgs: {\n                    logMove: true\n                }\n            });\n        });\n        it('Block moving to same position', () => {\n            const startPosition = new BoardPosition({ x: 0, y: 0 });\n            const nextPosition = new BoardPosition({ x: 0, y: 0 });\n            throws(() => {\n                game.move(startPosition, nextPosition);\n            });\n        });\n    });\n});\n//# sourceMappingURL=Game.test.js.map"]}