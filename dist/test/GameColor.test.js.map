{"version":3,"sources":["../../dist-esnext/test/GameColor.test.js"],"names":["assertPieces","actual","expected","i","length","actualPiece","expectedPiece","isSamePositionAs","position","console","log","isBlackPiece","assertColor","endRow","jumps","nMoves","pieces","points","preWinnersPoints","startRow","winners","describe","boardOptions","size","x","y","it","isBlack","expectedColor","actualColor"],"mappings":"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","file":"GameColor.test.js","sourcesContent":["import { equal, ok } from 'ptz-assert';\nimport { GameColor, GamePiece } from '../index';\nfunction assertPieces(actual, expected) {\n    for (let i = 0; i < actual.length; i++) {\n        const actualPiece = actual[i];\n        const expectedPiece = expected[i];\n        const isSamePositionAs = actualPiece.position.isSamePositionAs(expectedPiece.position);\n        if (!isSamePositionAs) {\n            console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>');\n            console.log('assertPieces');\n            console.log('actualPiece');\n            console.log(actualPiece);\n            console.log('expectedPiece');\n            console.log(expectedPiece);\n            console.log('<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<');\n        }\n        ok(isSamePositionAs, 'isSamePositionAs');\n        equal(actualPiece.position.isBlackPiece(), expectedPiece.position.isBlackPiece());\n    }\n}\nfunction assertColor(actual, expected) {\n    equal(actual.endRow, expected.endRow, 'endRow');\n    equal(actual.jumps, expected.jumps, 'jumps');\n    equal(actual.nMoves, expected.nMoves, 'nMoves');\n    // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n    // console.log(\"pieces actual\");\n    // console.log(actual.pieces);\n    // console.log(\"pieces expected\");\n    // console.log(expected.pieces);\n    // console.log(\"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\");\n    assertPieces(actual.pieces, expected.pieces);\n    equal(actual.points, expected.points, 'points');\n    equal(actual.preWinnersPoints, expected.preWinnersPoints, 'preWinnersPoints actual:' + actual.preWinnersPoints + ' expected:' + expected.preWinnersPoints);\n    equal(actual.startRow, expected.startRow, 'startRow');\n    equal(actual.winners, expected.winners, 'winners');\n}\ndescribe('GameColor', () => {\n    const boardOptions = { size: { x: 3, y: 3 } };\n    it('New white color with default options', () => {\n        const isBlack = false;\n        const pieces = [new GamePiece(0, 2, isBlack), new GamePiece(1, 2, isBlack), new GamePiece(2, 2, isBlack)];\n        const expectedColor = {\n            winners: 0,\n            jumps: 0,\n            points: 0,\n            nMoves: 0,\n            startRow: 2,\n            preWinnersPoints: 0,\n            endRow: 0,\n            pieces\n        };\n        const actualColor = new GameColor(boardOptions, isBlack);\n        assertColor(actualColor, expectedColor);\n    });\n    it('New black color with default options', () => {\n        const isBlack = true;\n        const pieces = [new GamePiece(0, 0, isBlack), new GamePiece(1, 0, isBlack), new GamePiece(2, 0, isBlack)];\n        const expectedColor = {\n            winners: 0,\n            preWinnersPoints: 0,\n            jumps: 0,\n            points: 0,\n            nMoves: 0,\n            startRow: 0,\n            endRow: 2,\n            pieces\n        };\n        const actualColor = new GameColor(boardOptions, isBlack);\n        assertColor(actualColor, expectedColor);\n    });\n});\n//# sourceMappingURL=GameColor.test.js.map"]}