{"version":3,"sources":["../../dist-esnext/test/GameColor.test.js"],"names":["assertPieces","actual","expected","i","length","actualPiece","expectedPiece","isSamePositionAs","position","console","log","isBlackPiece","assertColor","endRow","jumps","nMoves","pieces","points","winners","preWinnersPoints","startRow","describe","boardOptions","size","x","y","it","isBlack","expectedColor","actualColor","color","win"],"mappings":"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","file":"GameColor.test.js","sourcesContent":["import { equal, notOk, ok } from 'ptz-assert';\nimport { colorWin, defaultBoardOptions, GameColor, GamePiece, getColorWinners } from '../index';\nfunction assertPieces(actual, expected) {\n    for (let i = 0; i < actual.length; i++) {\n        const actualPiece = actual[i];\n        const expectedPiece = expected[i];\n        const isSamePositionAs = actualPiece.position.isSamePositionAs(expectedPiece.position);\n        if (!isSamePositionAs) {\n            console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>');\n            console.log('assertPieces');\n            console.log('actualPiece');\n            console.log(actualPiece);\n            console.log('expectedPiece');\n            console.log(expectedPiece);\n            console.log('<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<');\n        }\n        ok(isSamePositionAs, 'isSamePositionAs');\n        equal(actualPiece.position.isBlackPiece(), expectedPiece.position.isBlackPiece());\n    }\n}\nfunction assertColor(actual, expected) {\n    equal(actual.endRow, expected.endRow, 'endRow');\n    equal(actual.jumps, expected.jumps, 'jumps');\n    equal(actual.nMoves, expected.nMoves, 'nMoves');\n    assertPieces(actual.pieces, expected.pieces);\n    equal(actual.points, expected.points, 'points');\n    equal(actual.winners.preWinnersPoints, expected.winners.preWinnersPoints, `preWinnersPoints actual: ${actual.winners.preWinnersPoints} expected: ${expected.winners.preWinnersPoints}`);\n    equal(actual.startRow, expected.startRow, 'startRow');\n    equal(actual.winners.winners, expected.winners.winners, 'winners');\n}\ndescribe('GameColor', () => {\n    const boardOptions = { size: { x: 3, y: 3 } };\n    it('New white color with default options', () => {\n        const isBlack = false;\n        const pieces = [new GamePiece(0, 2, isBlack), new GamePiece(1, 2, isBlack), new GamePiece(2, 2, isBlack)];\n        const expectedColor = {\n            winners: {\n                preWinnersPoints: 0,\n                winners: 0\n            },\n            jumps: 0,\n            points: 0,\n            nMoves: 0,\n            startRow: 2,\n            endRow: 0,\n            pieces\n        };\n        const actualColor = new GameColor(boardOptions, isBlack);\n        assertColor(actualColor, expectedColor);\n    });\n    it('New black color with default options', () => {\n        const isBlack = true;\n        const pieces = [new GamePiece(0, 0, isBlack), new GamePiece(1, 0, isBlack), new GamePiece(2, 0, isBlack)];\n        const expectedColor = {\n            winners: {\n                preWinnersPoints: 0,\n                winners: 0\n            },\n            jumps: 0,\n            points: 0,\n            nMoves: 0,\n            startRow: 0,\n            endRow: 2,\n            pieces\n        };\n        const actualColor = new GameColor(boardOptions, isBlack);\n        assertColor(actualColor, expectedColor);\n    });\n    describe('getColorWinners', () => {\n        it('return 0 when new game', () => {\n            const color = new GameColor(defaultBoardOptions, false);\n            const winners = getColorWinners(color);\n            equal(winners.preWinnersPoints, 0);\n            equal(winners.winners, 0);\n        });\n        it('return 1');\n        it('return 2');\n        it('return 3');\n        it('return 4');\n        it('return 5');\n        it('return 6');\n        it('return 7');\n        it('return 8');\n    });\n    describe('colorWin', () => {\n        it('return false when new game', () => {\n            const color = new GameColor(defaultBoardOptions, false);\n            const win = colorWin(color);\n            notOk(win);\n        });\n        it('return true', () => {\n            const color = new GameColor(defaultBoardOptions, false);\n            color.winners.winners = 8;\n            const win = colorWin(color);\n            ok(win);\n        });\n    });\n});\n//# sourceMappingURL=GameColor.test.js.map"]}