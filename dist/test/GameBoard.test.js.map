{"version":3,"sources":["../../dist-esnext/test/GameBoard.test.js"],"names":["assertPosition","actualPosition","expectedPosition","isSamePositionAs","console","log","isBlackPiece","assertPositions","actual","expected","i","length","describe","board","beforeEach","white","boardOptions","black","fillAllPiecesOnBoard","pieces","it","position","x","y","boardHasThisPosition","getPosition","onlyEmpty","getNearPositions","undefined","startPosition","toJumpPosition","getJumpPosition","printUnicodeTest","printUnicode"],"mappings":";;AAAA;;AACA;;AACA;;AACA,SAASA,cAAT,CAAwBC,cAAxB,EAAwCC,gBAAxC,EAA0D;AACtD,QAAMC,mBAAmBF,eAAeE,gBAAf,CAAgCD,gBAAhC,CAAzB;AACA,QAAI,CAACC,gBAAL,EAAuB;AACnBC,gBAAQC,GAAR,CAAY,qDAAZ;AACAD,gBAAQC,GAAR,CAAY,gBAAZ;AACAD,gBAAQC,GAAR,CAAYJ,cAAZ;AACAG,gBAAQC,GAAR,CAAY,kBAAZ;AACAD,gBAAQC,GAAR,CAAYH,gBAAZ;AACAE,gBAAQC,GAAR,CAAY,qDAAZ;AACH;AACD,uBAAGF,gBAAH,EAAqB,kBAArB;AACA,0BAAMF,eAAeK,YAAf,EAAN,EAAqCJ,iBAAiBI,YAAjB,EAArC,EAAsE,eAAtE;AACH;AACD,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;AACvC,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,OAAOG,MAA3B,EAAmCD,GAAnC,EAAwC;AACpC,YAAMT,iBAAiBO,OAAOE,CAAP,CAAvB;AACA,YAAMR,mBAAmBO,SAASC,CAAT,CAAzB;AACAV,uBAAeC,cAAf,EAA+BC,gBAA/B;AACH;AACJ;AACDU,SAAS,WAAT,EAAsB,YAAM;AACxBA,aAAS,mBAAT,EAA8B,YAAM;AAChC,YAAIC,cAAJ;AACAC,mBAAW,YAAM;AACbD,oBAAQ,sBAAR;AACA,gBAAME,QAAQ,qBAAcF,MAAMG,YAApB,EAAkC,KAAlC,CAAd;AACA,gBAAMC,QAAQ,qBAAcJ,MAAMG,YAApB,EAAkC,IAAlC,CAAd;AACAH,kBAAMK,oBAAN,CAA2BH,MAAMI,MAAjC,EAAyCF,MAAME,MAA/C;AACH,SALD;AAMAC,WAAG,eAAH,EAAoB,YAAM;AACtB,kCAAMP,MAAMA,KAAN,CAAYF,MAAlB,EAA0B,CAA1B;AACH,SAFD;AAGAS,WAAG,YAAH,EAAiB,YAAM;AACnB,kCAAMP,MAAMA,KAAN,CAAY,CAAZ,EAAeF,MAArB,EAA6B,CAA7B;AACA,kCAAME,MAAMA,KAAN,CAAY,CAAZ,EAAeF,MAArB,EAA6B,CAA7B;AACH,SAHD;AAIAS,WAAG;AACH;AACA;AACA;AAHA;AAKAR,iBAAS,sBAAT,EAAiC,YAAM;AACnCQ,eAAG,0BAAH,EAA+B,YAAM;AACjC,oBAAMC,WAAW,yBAAkB,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,sCAAMV,MAAMW,oBAAN,CAA2BH,QAA3B,CAAN,EAA4C,IAA5C;AACH,aAHD;AAIAD,eAAG,4BAAH,EAAiC,YAAM;AACnC,oBAAMC,WAAW,yBAAkB,EAAEC,GAAG,CAAC,CAAN,EAASC,GAAG,CAAZ,EAAlB,CAAjB;AACA,sCAAMV,MAAMW,oBAAN,CAA2BH,QAA3B,CAAN,EAA4C,KAA5C;AACH,aAHD;AAIAD,eAAG,4BAAH,EAAiC,YAAM;AACnC,oBAAMC,WAAW,yBAAkB,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAC,CAAZ,EAAlB,CAAjB;AACA,sCAAMV,MAAMW,oBAAN,CAA2BH,QAA3B,CAAN,EAA4C,KAA5C;AACH,aAHD;AAIAD,eAAG,6BAAH,EAAkC,YAAM;AACpC,oBAAMC,WAAW,yBAAkB,EAAEC,GAAG,CAAC,CAAN,EAASC,GAAG,CAAC,CAAb,EAAlB,CAAjB;AACA,sCAAMV,MAAMW,oBAAN,CAA2BH,QAA3B,CAAN,EAA4C,KAA5C;AACH,aAHD;AAIAD,eAAG,2BAAH,EAAgC,YAAM;AAClC,oBAAMC,WAAW,yBAAkB,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,sCAAMV,MAAMW,oBAAN,CAA2BH,QAA3B,CAAN,EAA4C,KAA5C;AACH,aAHD;AAIAD,eAAG,4BAAH,EAAiC,YAAM;AACnC,oBAAMC,WAAW,yBAAkB,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,sCAAMV,MAAMW,oBAAN,CAA2BH,QAA3B,CAAN,EAA4C,KAA5C;AACH,aAHD;AAIAD,eAAG,2BAAH,EAAgC,YAAM;AAClC,oBAAMC,WAAW,yBAAkB,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,sCAAMV,MAAMW,oBAAN,CAA2BH,QAA3B,CAAN,EAA4C,KAA5C;AACH,aAHD;AAIH,SA7BD;AA8BAD,WAAG,aAAH,EAAkB,YAAM;AACpB,gBAAMC,WAAW,yBAAkB,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,gBAAMf,SAASK,MAAMY,WAAN,CAAkBJ,QAAlB,CAAf;AACA,gBAAMZ,WAAW,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACAvB,2BAAeQ,MAAf,EAAuBC,QAAvB;AACH,SALD;AAMAG,iBAAS,kBAAT,EAA6B,YAAM;AAC/B,gBAAMS,WAAW,yBAAkB,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACAH,eAAG,0DAAH,EAA+D,YAAM;AACjE,oBAAMM,YAAY,KAAlB;AACA,oBAAMjB,WAAW,CAAC,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAcjB,cAAc,KAA5B,EAAlB,CAAD,CAAjB;AACA,oBAAME,SAASK,MAAMc,gBAAN,CAAuBN,QAAvB,EAAiCK,SAAjC,CAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,gCAAgBC,MAAhB,EAAwBC,QAAxB;AACH,aAZD;AAaAW,eAAG,uDAAH,EAA4D,YAAM;AAC9D,oBAAMM,YAAY,IAAlB;AACA,oBAAMjB,WAAW,CAAC,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAD,EAAoC,yBAAkB,EAAED,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAApC,CAAjB;AACA,oBAAMf,SAASK,MAAMc,gBAAN,CAAuBN,QAAvB,EAAiCK,SAAjC,CAAf;AACAnB,gCAAgBC,MAAhB,EAAwBC,QAAxB;AACH,aALD;AAMAW,eAAG,sDAAH,EAA2D,YAAM;AAC7D,oBAAMM,YAAYE,SAAlB;AACA,oBAAMnB,WAAW,CACb,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CADa,EAEb,yBAAkB,EAAED,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAFa,EAGb,yBAAkB,EAAED,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAcjB,cAAc,KAA5B,EAAlB,CAHa,CAAjB;AAKA,oBAAME,SAASK,MAAMc,gBAAN,CAAuBN,QAAvB,EAAiCK,SAAjC,CAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,gCAAgBC,MAAhB,EAAwBC,QAAxB;AACH,aAhBD;AAiBH,SAtCD;AAuCAG,iBAAS,iBAAT,EAA4B,YAAM;AAC9BQ,eAAG,sBAAH,EAA2B,YAAM;AAC7B,oBAAMS,gBAAgB,yBAAkB,EAAEP,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAtB;AACA,oBAAMO,iBAAiB,yBAAkB,EAAER,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAvB;AACA,oBAAMd,WAAW,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,oBAAMf,SAASK,MAAMkB,eAAN,CAAsBF,aAAtB,EAAqCC,cAArC,CAAf;AACA9B,+BAAeQ,MAAf,EAAuBC,QAAvB;AACH,aAND;AAOAW,eAAG,qBAAH,EAA0B,YAAM;AAC5B,oBAAMS,gBAAgB,yBAAkB,EAAEP,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAtB;AACA,oBAAMO,iBAAiB,yBAAkB,EAAER,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAvB;AACA,oBAAMd,WAAW,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,oBAAMf,SAASK,MAAMkB,eAAN,CAAsBF,aAAtB,EAAqCC,cAArC,CAAf;AACA9B,+BAAeQ,MAAf,EAAuBC,QAAvB;AACH,aAND;AAOAW,eAAG,YAAH,EAAiB,YAAM;AACnB,oBAAMS,gBAAgB,yBAAkB,EAAEP,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAtB;AACA,oBAAMO,iBAAiB,yBAAkB,EAAER,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAvB;AACA,oBAAMd,WAAW,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,oBAAMf,SAASK,MAAMkB,eAAN,CAAsBF,aAAtB,EAAqCC,cAArC,CAAf;AACA9B,+BAAeQ,MAAf,EAAuBC,QAAvB;AACH,aAND;AAOAW,eAAG,wBAAH,EAA6B,YAAM;AAC/B,oBAAMS,gBAAgB,yBAAkB,EAAEP,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAtB;AACA,oBAAMO,iBAAiB,yBAAkB,EAAER,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAvB;AACA,oBAAMd,WAAW,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,oBAAMf,SAASK,MAAMkB,eAAN,CAAsBF,aAAtB,EAAqCC,cAArC,CAAf;AACA9B,+BAAeQ,MAAf,EAAuBC,QAAvB;AACH,aAND;AAOAW,eAAG,uBAAH,EAA4B,YAAM;AAC9B,oBAAMS,gBAAgB,yBAAkB,EAAEP,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAtB;AACA,oBAAMO,iBAAiB,yBAAkB,EAAER,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAvB;AACA,oBAAMd,WAAW,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,oBAAMf,SAASK,MAAMkB,eAAN,CAAsBF,aAAtB,EAAqCC,cAArC,CAAf;AACA9B,+BAAeQ,MAAf,EAAuBC,QAAvB;AACH,aAND;AAOAW,eAAG,cAAH,EAAmB,YAAM;AACrB,oBAAMS,gBAAgB,yBAAkB,EAAEP,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAtB;AACA,oBAAMO,iBAAiB,yBAAkB,EAAER,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAvB;AACA,oBAAMd,WAAW,yBAAkB,EAAEa,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAjB;AACA,oBAAMf,SAASK,MAAMkB,eAAN,CAAsBF,aAAtB,EAAqCC,cAArC,CAAf;AACA9B,+BAAeQ,MAAf,EAAuBC,QAAvB;AACH,aAND;AAOAW,eAAG,uDAAH,EAA4D,YAAM;AAC9D,oBAAMS,gBAAgB,yBAAkB,EAAEP,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAtB;AACA,oBAAMO,iBAAiB,yBAAkB,EAAER,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAlB,CAAvB;AACA,sCAAMV,MAAMkB,eAAN,CAAsBF,aAAtB,EAAqCC,cAArC,CAAN;AACH,aAJD;AAKH,SAhDD;AAiDAV,WAAG,cAAH,EAAmB,SAASY,gBAAT,GAA4B;AAC3C,gBAAMxB,SAASK,MAAMoB,YAAN,EAAf;AACA,kCAAMzB,MAAN;AACH,SAHD;AAIH,KApJD;AAqJAY,OAAG;AACH;AACA;AACA;AACA;AACA;AALA;AAOH,CA7JD;AA8JA","file":"GameBoard.test.js","sourcesContent":["import { equal, notOk, ok } from 'ptz-assert';\nimport { BoardPosition, GameBoard, GameColor } from '../index';\nimport { unicodeStartBoard } from './testData/board.data.test';\nfunction assertPosition(actualPosition, expectedPosition) {\n    const isSamePositionAs = actualPosition.isSamePositionAs(expectedPosition);\n    if (!isSamePositionAs) {\n        console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>');\n        console.log('actualPosition');\n        console.log(actualPosition);\n        console.log('expectedPosition');\n        console.log(expectedPosition);\n        console.log('<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<');\n    }\n    ok(isSamePositionAs, 'isSamePositionAs');\n    equal(actualPosition.isBlackPiece(), expectedPosition.isBlackPiece(), 'Is same piece');\n}\nfunction assertPositions(actual, expected) {\n    for (let i = 0; i < actual.length; i++) {\n        const actualPosition = actual[i];\n        const expectedPosition = expected[i];\n        assertPosition(actualPosition, expectedPosition);\n    }\n}\ndescribe('GameBoard', () => {\n    describe('New with defaults', () => {\n        let board;\n        beforeEach(() => {\n            board = new GameBoard();\n            const white = new GameColor(board.boardOptions, false);\n            const black = new GameColor(board.boardOptions, true);\n            board.fillAllPiecesOnBoard(white.pieces, black.pieces);\n        });\n        it('has 8 columns', () => {\n            equal(board.board.length, 8);\n        });\n        it('has 8 rows', () => {\n            equal(board.board[0].length, 8);\n            equal(board.board[7].length, 8);\n        });\n        it('boardStartPositions'\n        // , () => {\n        //     deepEqual(board.board, boardStartPositions);\n        // }\n        );\n        describe('boardHasThisPosition', () => {\n            it('x1 y1 should return true', () => {\n                const position = new BoardPosition({ x: 1, y: 1 });\n                equal(board.boardHasThisPosition(position), true);\n            });\n            it('x-1 y0 should return false', () => {\n                const position = new BoardPosition({ x: -1, y: 0 });\n                equal(board.boardHasThisPosition(position), false);\n            });\n            it('x0 y-1 should return false', () => {\n                const position = new BoardPosition({ x: 0, y: -1 });\n                equal(board.boardHasThisPosition(position), false);\n            });\n            it('x-1 y-1 should return false', () => {\n                const position = new BoardPosition({ x: -1, y: -1 });\n                equal(board.boardHasThisPosition(position), false);\n            });\n            it('x8 y1 should return false', () => {\n                const position = new BoardPosition({ x: 8, y: 1 });\n                equal(board.boardHasThisPosition(position), false);\n            });\n            it('x1 y-8 should return false', () => {\n                const position = new BoardPosition({ x: 1, y: 8 });\n                equal(board.boardHasThisPosition(position), false);\n            });\n            it('x8 y8 should return false', () => {\n                const position = new BoardPosition({ x: 8, y: 8 });\n                equal(board.boardHasThisPosition(position), false);\n            });\n        });\n        it('getPosition', () => {\n            const position = new BoardPosition({ x: 2, y: 3 });\n            const actual = board.getPosition(position);\n            const expected = new BoardPosition({ x: 2, y: 3 });\n            assertPosition(actual, expected);\n        });\n        describe('getNearPositions', () => {\n            const position = new BoardPosition({ x: 7, y: 7 });\n            it('onlyEmpty=false should return only filled near positions', () => {\n                const onlyEmpty = false;\n                const expected = [new BoardPosition({ x: 6, y: 7, isBlackPiece: false })];\n                const actual = board.getNearPositions(position, onlyEmpty);\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n                // console.log(\"onlyEmpty=false should return only filled near positions\");\n                // console.log(\"actual\");\n                // console.log(actual);\n                // console.log(\"expected\");\n                // console.log(expected);\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n                assertPositions(actual, expected);\n            });\n            it('onlyEmpty=true should return all empty near positions', () => {\n                const onlyEmpty = true;\n                const expected = [new BoardPosition({ x: 6, y: 6 }), new BoardPosition({ x: 7, y: 6 })];\n                const actual = board.getNearPositions(position, onlyEmpty);\n                assertPositions(actual, expected);\n            });\n            it('onlyEmpty=undefined should return all near positions', () => {\n                const onlyEmpty = undefined;\n                const expected = [\n                    new BoardPosition({ x: 6, y: 6 }),\n                    new BoardPosition({ x: 7, y: 6 }),\n                    new BoardPosition({ x: 6, y: 7, isBlackPiece: false })\n                ];\n                const actual = board.getNearPositions(position, onlyEmpty);\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n                // console.log(\"onlyEmpty=undefined should return all near positions\");\n                // console.log(\"actual\");\n                // console.log(actual);\n                // console.log(\"expected\");\n                // console.log(expected);\n                // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n                assertPositions(actual, expected);\n            });\n        });\n        describe('getJumpPosition', () => {\n            it('jumping up and rigth', () => {\n                const startPosition = new BoardPosition({ x: 0, y: 0 });\n                const toJumpPosition = new BoardPosition({ x: 1, y: 1 });\n                const expected = new BoardPosition({ x: 2, y: 2 });\n                const actual = board.getJumpPosition(startPosition, toJumpPosition);\n                assertPosition(actual, expected);\n            });\n            it('jumping up and left', () => {\n                const startPosition = new BoardPosition({ x: 2, y: 0 });\n                const toJumpPosition = new BoardPosition({ x: 1, y: 1 });\n                const expected = new BoardPosition({ x: 0, y: 2 });\n                const actual = board.getJumpPosition(startPosition, toJumpPosition);\n                assertPosition(actual, expected);\n            });\n            it('jumping up', () => {\n                const startPosition = new BoardPosition({ x: 0, y: 0 });\n                const toJumpPosition = new BoardPosition({ x: 1, y: 1 });\n                const expected = new BoardPosition({ x: 2, y: 2 });\n                const actual = board.getJumpPosition(startPosition, toJumpPosition);\n                assertPosition(actual, expected);\n            });\n            it('jumping down and rigth', () => {\n                const startPosition = new BoardPosition({ x: 0, y: 7 });\n                const toJumpPosition = new BoardPosition({ x: 1, y: 6 });\n                const expected = new BoardPosition({ x: 2, y: 5 });\n                const actual = board.getJumpPosition(startPosition, toJumpPosition);\n                assertPosition(actual, expected);\n            });\n            it('jumping down and left', () => {\n                const startPosition = new BoardPosition({ x: 2, y: 7 });\n                const toJumpPosition = new BoardPosition({ x: 1, y: 6 });\n                const expected = new BoardPosition({ x: 0, y: 5 });\n                const actual = board.getJumpPosition(startPosition, toJumpPosition);\n                assertPosition(actual, expected);\n            });\n            it('jumping down', () => {\n                const startPosition = new BoardPosition({ x: 1, y: 7 });\n                const toJumpPosition = new BoardPosition({ x: 1, y: 6 });\n                const expected = new BoardPosition({ x: 1, y: 5 });\n                const actual = board.getJumpPosition(startPosition, toJumpPosition);\n                assertPosition(actual, expected);\n            });\n            it('should return undefined because position is not empty', () => {\n                const startPosition = new BoardPosition({ x: 3, y: 0 });\n                const toJumpPosition = new BoardPosition({ x: 4, y: 0 });\n                notOk(board.getJumpPosition(startPosition, toJumpPosition));\n            });\n        });\n        it('printUnicode', function printUnicodeTest() {\n            const actual = board.printUnicode();\n            equal(actual, unicodeStartBoard);\n        });\n    });\n    it('generateBoard'\n    // , () => {\n    //     let board = new GameBoard();\n    //     board.generateBoard();\n    //     deepEqual(board.board, cleanBoard);\n    // }\n    );\n});\n//# sourceMappingURL=GameBoard.test.js.map"]}