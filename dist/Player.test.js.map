{"version":3,"sources":["../dist-esnext/Player.test.js"],"names":["assert","describe","player","name","beforeEach","createBlackPlayer","it","equal","ok","isBlack","createWhitePlayer","notOk","players","white","black","createPlayers","ai"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;AACAC,SAAS,QAAT,EAAmB,YAAM;AACrB,QAAIC,eAAJ;AACAD,aAAS,mBAAT,EAA8B,YAAM;AAChC,YAAME,OAAO,MAAb;AACAC,mBAAW,YAAM;AACbF,qBAAS,cAAOG,iBAAP,CAAyB,EAAEF,UAAF,EAAzB,CAAT;AACH,SAFD;AAGAG,WAAG,UAAH,EAAe,YAAM;AACjBN,mBAAOO,KAAP,CAAaL,OAAOC,IAApB,EAA0BA,IAA1B;AACH,SAFD;AAGAG,WAAG,oBAAH,EAAyB,YAAM;AAC3BN,mBAAOQ,EAAP,CAAUN,OAAOO,OAAjB;AACH,SAFD;AAGH,KAXD;AAYAR,aAAS,mBAAT,EAA8B,YAAM;AAChC,YAAME,OAAO,MAAb;AACAC,mBAAW,YAAM;AACbF,qBAAS,cAAOQ,iBAAP,CAAyB,EAAEP,UAAF,EAAzB,CAAT;AACH,SAFD;AAGAG,WAAG,UAAH,EAAe,YAAM;AACjBN,mBAAOO,KAAP,CAAaL,OAAOC,IAApB,EAA0BA,IAA1B;AACH,SAFD;AAGAG,WAAG,oBAAH,EAAyB,YAAM;AAC3BN,mBAAOW,KAAP,CAAaT,OAAOO,OAApB;AACH,SAFD;AAGH,KAXD;AAYAR,aAAS,SAAT,EAAoB,YAAM;AACtB,YAAIW,gBAAJ;AACA,YAAMC,QAAQ,EAAEV,MAAM,SAAR,EAAd;AACA,YAAMW,QAAQ,EAAEX,MAAM,SAAR,EAAd;AACAC,mBAAW,YAAM;AACbQ,sBAAU,cAAOG,aAAP,CAAqB;AAC3BD,4BAD2B;AAE3BD;AAF2B,aAArB,CAAV;AAIH,SALD;AAMAZ,iBAAS,qBAAT,EAAgC,YAAM;AAClCK,eAAG,uBAAH,EAA4B,YAAM;AAC9BN,uBAAOQ,EAAP,CAAUI,QAAQC,KAAR,CAAcV,IAAd,KAAuBU,MAAMV,IAAvC;AACH,aAFD;AAGAG,eAAG,uBAAH,EAA4B,YAAM;AAC9BN,uBAAOQ,EAAP,CAAUI,QAAQE,KAAR,CAAcX,IAAd,KAAuBW,MAAMX,IAAvC;AACH,aAFD;AAGAG,eAAG,qBAAH,EAA0B,YAAM;AAC5BN,uBAAOQ,EAAP,CAAUI,QAAQC,KAAR,CAAcG,EAAd,KAAqBH,MAAMG,EAArC;AACH,aAFD;AAGAV,eAAG,qBAAH,EAA0B,YAAM;AAC5BN,uBAAOQ,EAAP,CAAUI,QAAQE,KAAR,CAAcE,EAAd,KAAqBF,MAAME,EAArC;AACH,aAFD;AAGH,SAbD;AAcH,KAxBD;AAyBH,CAnDD;AAoDA","file":"Player.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Player } from './index';\ndescribe('Player', () => {\n    let player;\n    describe('createBlackPlayer', () => {\n        const name = 'John';\n        beforeEach(() => {\n            player = Player.createBlackPlayer({ name });\n        });\n        it('set name', () => {\n            assert.equal(player.name, name);\n        });\n        it('set isBlack = true', () => {\n            assert.ok(player.isBlack);\n        });\n    });\n    describe('createWhitePlayer', () => {\n        const name = 'John';\n        beforeEach(() => {\n            player = Player.createWhitePlayer({ name });\n        });\n        it('set name', () => {\n            assert.equal(player.name, name);\n        });\n        it('set isBlack = true', () => {\n            assert.notOk(player.isBlack);\n        });\n    });\n    describe('Players', () => {\n        let players;\n        const white = { name: 'P White' };\n        const black = { name: 'P Black' };\n        beforeEach(() => {\n            players = Player.createPlayers({\n                black,\n                white\n            });\n        });\n        describe('New setting players', () => {\n            it('Set white player name', () => {\n                assert.ok(players.white.name === white.name);\n            });\n            it('Set black player name', () => {\n                assert.ok(players.black.name === black.name);\n            });\n            it('Set white player ai', () => {\n                assert.ok(players.white.ai === white.ai);\n            });\n            it('Set black player ai', () => {\n                assert.ok(players.black.ai === black.ai);\n            });\n        });\n    });\n});\n//# sourceMappingURL=Player.test.js.map"]}