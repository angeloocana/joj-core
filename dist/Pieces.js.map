{"version":3,"sources":["../dist-esnext/Pieces.js"],"names":["Piece","Position","removePiece","pieces","pieceToRemove","filter","hasSamePosition","piece","createPieces","isBlack","positions","map","position","createPiece","createPiecesCurried","curry","createBlackPieces","createWhitePieces","getOrderedPieces","boardSizeY","reduce","ordered","y","getYAsBlack","concat","getOrderedPiecesCurried","haveSamePieceAndPosition","a","b","i","length","hasSamePieceAndPosition"],"mappings":";;;;;;;AAAA;;;;AACA;;IAAYA,K;;AACZ;;IAAYC,Q;;;;;;AACZ;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,aAA7B,EAA4C;AACxC,WAAOD,OAAOE,MAAP,CAAc;AAAA,eAAS,CAACL,MAAMM,eAAN,CAAsBC,KAAtB,EAA6BH,aAA7B,CAAV;AAAA,KAAd,CAAP;AACH;AACD,SAASI,YAAT,CAAsBC,OAAtB,EAA+BC,SAA/B,EAA0C;AACtC,WAAOA,UAAUC,GAAV,CAAc,oBAAY;AAC7BC,iBAASH,OAAT,GAAmBA,OAAnB;AACA,eAAOT,MAAMa,WAAN,CAAkBD,QAAlB,CAAP;AACH,KAHM,CAAP;AAIH;AACD,IAAME,sBAAsB,gBAAEC,KAAF,CAAQP,YAAR,CAA5B;AACA,IAAMQ,oBAAoBF,oBAAoB,IAApB,CAA1B;AACA,IAAMG,oBAAoBH,oBAAoB,KAApB,CAA1B;AACA,SAASI,gBAAT,CAA0BC,UAA1B,EAAsCV,OAAtC,EAA+CN,MAA/C,EAAuD;AACnD,WAAOA,OAAOiB,MAAP,CAAc,UAACC,OAAD,EAAUd,KAAV,EAAoB;AACrC,YAAMe,IAAIrB,SAASsB,WAAT,CAAqBJ,UAArB,EAAiCZ,MAAMK,QAAN,CAAeU,CAAhD,EAAmDb,OAAnD,CAAV;AACAY,gBAAQC,CAAR,IAAa,CAACD,QAAQC,CAAR,KAAc,EAAf,EAAmBE,MAAnB,CAA0BjB,KAA1B,CAAb;AACA,eAAOc,OAAP;AACH,KAJM,EAIJ,EAJI,CAAP;AAKH;AACD,IAAMI,0BAA0B,gBAAEV,KAAF,CAAQG,gBAAR,CAAhC;AACA,SAASQ,wBAAT,CAAkCC,CAAlC,EAAqCC,CAArC,EAAwC;AACpC,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,EAAEG,MAAtB,EAA8BD,GAA9B,EAAmC;AAC/B,YAAI,CAAC7B,MAAM+B,uBAAN,CAA8BJ,EAAEE,CAAF,CAA9B,EAAoCD,EAAEC,CAAF,CAApC,CAAL,EACI,OAAO,KAAP;AACP;AACD,WAAO,IAAP;AACH;QACQb,iB,GAAAA,iB;QAAmBC,iB,GAAAA,iB;QAAmBf,W,GAAAA,W;QAAagB,gB,GAAAA,gB;QAAkBO,uB,GAAAA,uB;QAAyBC,wB,GAAAA,wB;AACvG","file":"Pieces.js","sourcesContent":["import R from 'ramda';\nimport * as Piece from './Piece';\nimport * as Position from './Position';\n// Remove piece from a list\nfunction removePiece(pieces, pieceToRemove) {\n    return pieces.filter(piece => !Piece.hasSamePosition(piece, pieceToRemove));\n}\nfunction createPieces(isBlack, positions) {\n    return positions.map(position => {\n        position.isBlack = isBlack;\n        return Piece.createPiece(position);\n    });\n}\nconst createPiecesCurried = R.curry(createPieces);\nconst createBlackPieces = createPiecesCurried(true);\nconst createWhitePieces = createPiecesCurried(false);\nfunction getOrderedPieces(boardSizeY, isBlack, pieces) {\n    return pieces.reduce((ordered, piece) => {\n        const y = Position.getYAsBlack(boardSizeY, piece.position.y, isBlack);\n        ordered[y] = (ordered[y] || []).concat(piece);\n        return ordered;\n    }, []);\n}\nconst getOrderedPiecesCurried = R.curry(getOrderedPieces);\nfunction haveSamePieceAndPosition(a, b) {\n    for (let i = 0; i < a.length; i++) {\n        if (!Piece.hasSamePieceAndPosition(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\nexport { createBlackPieces, createWhitePieces, removePiece, getOrderedPieces, getOrderedPiecesCurried, haveSamePieceAndPosition };\n//# sourceMappingURL=Pieces.js.map"]}