{"version":3,"sources":["../dist-esnext/Pieces.js"],"names":["Piece","Position","removePiece","pieces","pieceToRemove","filter","hasSamePosition","piece","createPieces","isBlack","positions","map","position","createPiece","createPiecesCurried","curry","createBlackPieces","createWhitePieces","getPiecesOrdered","boardSizeY","ordered","forEach","y","getYAsBlack","push","getPiecesOrderedCurried","haveSamePieceAndPosition","a","b","i","length","hasSamePieceAndPosition"],"mappings":";;;;;;;AAAA;;;;AACA;;IAAYA,K;;AACZ;;IAAYC,Q;;;;;;AACZ;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,aAA7B,EAA4C;AACxC,WAAOD,OAAOE,MAAP,CAAc;AAAA,eAAS,CAACL,MAAMM,eAAN,CAAsBC,KAAtB,EAA6BH,aAA7B,CAAV;AAAA,KAAd,CAAP;AACH;AACD,SAASI,YAAT,CAAsBC,OAAtB,EAA+BC,SAA/B,EAA0C;AACtC,WAAOA,UAAUC,GAAV,CAAc,oBAAY;AAC7BC,iBAASH,OAAT,GAAmBA,OAAnB;AACA,eAAOT,MAAMa,WAAN,CAAkBD,QAAlB,CAAP;AACH,KAHM,CAAP;AAIH;AACD,IAAME,sBAAsB,gBAAEC,KAAF,CAAQP,YAAR,CAA5B;AACA,IAAMQ,oBAAoBF,oBAAoB,IAApB,CAA1B;AACA,IAAMG,oBAAoBH,oBAAoB,KAApB,CAA1B;AACA,SAASI,gBAAT,CAA0BC,UAA1B,EAAsChB,MAAtC,EAA8CM,OAA9C,EAAuD;AACnD,QAAMW,UAAU,EAAhB;AACAjB,WAAOkB,OAAP,CAAe,iBAAS;AACpB,YAAMC,IAAIrB,SAASsB,WAAT,CAAqBJ,UAArB,EAAiCZ,MAAMK,QAAN,CAAeU,CAAhD,EAAmDb,OAAnD,CAAV;AACA,YAAI,CAACW,QAAQE,CAAR,CAAL,EACIF,QAAQE,CAAR,IAAa,CAACf,KAAD,CAAb,CADJ,KAGIa,QAAQE,CAAR,EAAWE,IAAX,CAAgBjB,KAAhB;AACP,KAND;AAOA,WAAOa,OAAP;AACH;AACD,IAAMK,0BAA0B,gBAAEV,KAAF,CAAQG,gBAAR,CAAhC;AACA,SAASQ,wBAAT,CAAkCC,CAAlC,EAAqCC,CAArC,EAAwC;AACpC,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,EAAEG,MAAtB,EAA8BD,GAA9B,EAAmC;AAC/B,YAAI,CAAC7B,MAAM+B,uBAAN,CAA8BJ,EAAEE,CAAF,CAA9B,EAAoCD,EAAEC,CAAF,CAApC,CAAL,EACI,OAAO,KAAP;AACP;AACD,WAAO,IAAP;AACH;QACQb,iB,GAAAA,iB;QAAmBC,iB,GAAAA,iB;QAAmBf,W,GAAAA,W;QAAagB,gB,GAAAA,gB;QAAkBO,uB,GAAAA,uB;QAAyBC,wB,GAAAA,wB;AACvG","file":"Pieces.js","sourcesContent":["import R from 'ramda';\nimport * as Piece from './Piece';\nimport * as Position from './Position';\n// Remove piece from a list\nfunction removePiece(pieces, pieceToRemove) {\n    return pieces.filter(piece => !Piece.hasSamePosition(piece, pieceToRemove));\n}\nfunction createPieces(isBlack, positions) {\n    return positions.map(position => {\n        position.isBlack = isBlack;\n        return Piece.createPiece(position);\n    });\n}\nconst createPiecesCurried = R.curry(createPieces);\nconst createBlackPieces = createPiecesCurried(true);\nconst createWhitePieces = createPiecesCurried(false);\nfunction getPiecesOrdered(boardSizeY, pieces, isBlack) {\n    const ordered = [];\n    pieces.forEach(piece => {\n        const y = Position.getYAsBlack(boardSizeY, piece.position.y, isBlack);\n        if (!ordered[y])\n            ordered[y] = [piece];\n        else\n            ordered[y].push(piece);\n    });\n    return ordered;\n}\nconst getPiecesOrderedCurried = R.curry(getPiecesOrdered);\nfunction haveSamePieceAndPosition(a, b) {\n    for (let i = 0; i < a.length; i++) {\n        if (!Piece.hasSamePieceAndPosition(a[i], b[i]))\n            return false;\n    }\n    return true;\n}\nexport { createBlackPieces, createWhitePieces, removePiece, getPiecesOrdered, getPiecesOrderedCurried, haveSamePieceAndPosition };\n//# sourceMappingURL=Pieces.js.map"]}