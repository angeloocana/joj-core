{"version":3,"sources":["../dist-esnext/Position.test.js"],"names":["assert","describe","it","position1","x","y","position2","equal","hasSameXY","position","isBlack","ok","hasBlackPiece","notOk","undefined","hasNoPiece","hasWhitePiece","hasPiece","isBackGroundBlack","getToSearchOrder8x8","getToSearchOrderCurried","getY0Start","getY0End4x4","getY0EndCurried","getY0End8x8","positions","containsXY","notContainsXY","positionsWhereCanIGo","oldPosition","newPosition","setICanGoHere","iCanGoHere","notEqual","getOrderedPositionsY0End8x8","curry","getOrderedPositionsY0EndCurried","getOrderedPositionsY0End8x8ForWhite","orderedPositions","length","getOrderedPositionsY0End8x8ForBlack"],"mappings":"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","file":"Position.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport R from 'ramda';\nimport { Position } from './index';\ndescribe('Position', () => {\n    describe('hasSameXY', () => {\n        it('true', () => {\n            const position1 = { x: 2, y: 3 };\n            const position2 = { x: 2, y: 3 };\n            assert.equal(Position.hasSameXY(position1, position2), true);\n        });\n        it('false', () => {\n            const position1 = { x: 3, y: 2 };\n            const position2 = { x: 2, y: 3 };\n            assert.equal(Position.hasSameXY(position1, position2), false);\n        });\n    });\n    describe('hasBlackPiece', () => {\n        it('return true for black piece', () => {\n            const position = { x: 2, y: 3, isBlack: true };\n            assert.ok(Position.hasBlackPiece(position));\n        });\n        it('return false for white piece', () => {\n            const position = { x: 2, y: 3, isBlack: false };\n            assert.notOk(Position.hasBlackPiece(position));\n        });\n        describe('return false for no piece', () => {\n            it('null', () => {\n                const position = { x: 2, y: 3, isBlack: null };\n                assert.notOk(Position.hasBlackPiece(position));\n            });\n            it('undefined', () => {\n                const position = { x: 2, y: 3, isBlack: undefined };\n                assert.notOk(Position.hasBlackPiece(position));\n            });\n            it('no prop', () => {\n                const position = { x: 2, y: 3 };\n                delete position.isBlack;\n                assert.notOk(Position.hasBlackPiece(position));\n            });\n        });\n    });\n    describe('hasNoPiece', () => {\n        it('return false for black piece', () => {\n            const position = { x: 2, y: 3, isBlack: true };\n            assert.notOk(Position.hasNoPiece(position));\n        });\n        it('return false for white piece', () => {\n            const position = { x: 2, y: 3, isBlack: false };\n            assert.notOk(Position.hasNoPiece(position));\n        });\n        describe('return true for no piece', () => {\n            it('null', () => {\n                const position = { x: 2, y: 3, isBlack: null };\n                assert.ok(Position.hasNoPiece(position));\n            });\n            it('undefined', () => {\n                const position = { x: 2, y: 3, isBlack: undefined };\n                assert.ok(Position.hasNoPiece(position));\n            });\n            it('no prop', () => {\n                const position = { x: 2, y: 3 };\n                delete position.isBlack;\n                assert.ok(Position.hasNoPiece(position));\n            });\n        });\n    });\n    describe('hasWhitePiece', () => {\n        it('return false for black piece', () => {\n            const position = { x: 2, y: 3, isBlack: true };\n            assert.notOk(Position.hasWhitePiece(position));\n        });\n        it('return true for white piece', () => {\n            const position = { x: 2, y: 3, isBlack: false };\n            assert.ok(Position.hasWhitePiece(position));\n        });\n        describe('return false for no piece', () => {\n            it('null', () => {\n                const position = { x: 2, y: 3, isBlack: null };\n                assert.notOk(Position.hasWhitePiece(position));\n            });\n            it('undefined', () => {\n                const position = { x: 2, y: 3, isBlack: undefined };\n                assert.notOk(Position.hasWhitePiece(position));\n            });\n            it('no prop', () => {\n                const position = { x: 2, y: 3 };\n                delete position.isBlack;\n                assert.notOk(Position.hasWhitePiece(position));\n            });\n        });\n    });\n    describe('hasPiece', () => {\n        it('return true for black piece', () => {\n            const position = { x: 2, y: 3, isBlack: true };\n            assert.ok(Position.hasPiece(position));\n        });\n        it('return true for white piece', () => {\n            const position = { x: 2, y: 3, isBlack: false };\n            assert.ok(Position.hasPiece(position));\n        });\n        describe('return false for no piece', () => {\n            it('null', () => {\n                const position = { x: 2, y: 3, isBlack: null };\n                assert.notOk(Position.hasPiece(position));\n            });\n            it('undefined', () => {\n                const position = { x: 2, y: 3, isBlack: undefined };\n                assert.notOk(Position.hasPiece(position));\n            });\n            it('no prop', () => {\n                const position = { x: 2, y: 3 };\n                delete position.isBlack;\n                assert.notOk(Position.hasPiece(position));\n            });\n        });\n    });\n    describe('isBackGroundBlack', () => {\n        it('0,0 => true', () => {\n            assert.ok(Position.isBackGroundBlack(0, 0));\n        });\n        it('0,1 => false', () => {\n            assert.ok(!Position.isBackGroundBlack(0, 1));\n        });\n    });\n    describe('getToSearchOrder', () => {\n        const getToSearchOrder8x8 = Position.getToSearchOrderCurried({ x: 8, y: 8 });\n        it('return 0 for 0', () => assert.equal(getToSearchOrder8x8(0), 0));\n        it('return 1 for 7', () => assert.equal(getToSearchOrder8x8(7), 1));\n        it('return 2 for 1', () => assert.equal(getToSearchOrder8x8(1), 2));\n        it('return 3 for 6', () => assert.equal(getToSearchOrder8x8(6), 3));\n        it('return 4 for 2', () => assert.equal(getToSearchOrder8x8(2), 4));\n        it('return 5 for 5', () => assert.equal(getToSearchOrder8x8(5), 5));\n        it('return 6 for 3', () => assert.equal(getToSearchOrder8x8(3), 6));\n        it('return 7 for 4', () => assert.equal(getToSearchOrder8x8(4), 7));\n        it('return null for invalid x', () => assert.notOk(getToSearchOrder8x8(-1)));\n    });\n    describe('getY0Start', () => {\n        describe('4x4 Board', () => {\n            describe('for white', () => {\n                it('return 7 for 0', () => assert.equal(Position.getY0Start(4, 0, false), 3));\n                it('return 6 for 1', () => assert.equal(Position.getY0Start(4, 1, false), 2));\n                it('return 5 for 2', () => assert.equal(Position.getY0Start(4, 2, false), 1));\n                it('return 4 for 3', () => assert.equal(Position.getY0Start(4, 3, false), 0));\n            });\n            describe('for black', () => {\n                it('return 0 for 0', () => assert.equal(Position.getY0Start(4, 0, true), 0));\n                it('return 1 for 1', () => assert.equal(Position.getY0Start(4, 1, true), 1));\n                it('return 2 for 2', () => assert.equal(Position.getY0Start(4, 2, true), 2));\n                it('return 3 for 3', () => assert.equal(Position.getY0Start(4, 3, true), 3));\n            });\n        });\n        describe('8x8 Board', () => {\n            describe('for white', () => {\n                it('return 7 for 0', () => assert.equal(Position.getY0Start(8, 0, false), 7));\n                it('return 6 for 1', () => assert.equal(Position.getY0Start(8, 1, false), 6));\n                it('return 5 for 2', () => assert.equal(Position.getY0Start(8, 2, false), 5));\n                it('return 4 for 3', () => assert.equal(Position.getY0Start(8, 3, false), 4));\n                it('return 3 for 4', () => assert.equal(Position.getY0Start(8, 4, false), 3));\n                it('return 2 for 5', () => assert.equal(Position.getY0Start(8, 5, false), 2));\n                it('return 1 for 6', () => assert.equal(Position.getY0Start(8, 6, false), 1));\n                it('return 0 for 7', () => assert.equal(Position.getY0Start(8, 7, false), 0));\n            });\n            describe('for black', () => {\n                it('return 0 for 0', () => assert.equal(Position.getY0Start(8, 0, true), 0));\n                it('return 1 for 1', () => assert.equal(Position.getY0Start(8, 1, true), 1));\n                it('return 2 for 2', () => assert.equal(Position.getY0Start(8, 2, true), 2));\n                it('return 3 for 3', () => assert.equal(Position.getY0Start(8, 3, true), 3));\n                it('return 4 for 4', () => assert.equal(Position.getY0Start(8, 4, true), 4));\n                it('return 5 for 5', () => assert.equal(Position.getY0Start(8, 5, true), 5));\n                it('return 6 for 6', () => assert.equal(Position.getY0Start(8, 6, true), 6));\n                it('return 7 for 7', () => assert.equal(Position.getY0Start(8, 7, true), 7));\n            });\n        });\n    });\n    describe('getY0End', () => {\n        describe('4x4 Board', () => {\n            const getY0End4x4 = Position.getY0EndCurried(4);\n            describe('for white', () => {\n                it('return 0 for 0', () => assert.equal(getY0End4x4(0, false), 0));\n                it('return 1 for 1', () => assert.equal(getY0End4x4(1, false), 1));\n                it('return 2 for 2', () => assert.equal(getY0End4x4(2, false), 2));\n                it('return 3 for 3', () => assert.equal(getY0End4x4(3, false), 3));\n            });\n            describe('for black', () => {\n                it('return 7 for 0', () => assert.equal(getY0End4x4(0, true), 3));\n                it('return 6 for 1', () => assert.equal(getY0End4x4(1, true), 2));\n                it('return 5 for 2', () => assert.equal(getY0End4x4(2, true), 1));\n                it('return 4 for 3', () => assert.equal(getY0End4x4(3, true), 0));\n            });\n        });\n        describe('8x8 Board', () => {\n            const getY0End8x8 = Position.getY0EndCurried(8);\n            describe('for white', () => {\n                it('return 0 for 0', () => assert.equal(getY0End8x8(0, false), 0));\n                it('return 1 for 1', () => assert.equal(getY0End8x8(1, false), 1));\n                it('return 2 for 2', () => assert.equal(getY0End8x8(2, false), 2));\n                it('return 3 for 3', () => assert.equal(getY0End8x8(3, false), 3));\n                it('return 4 for 4', () => assert.equal(getY0End8x8(4, false), 4));\n                it('return 5 for 5', () => assert.equal(getY0End8x8(5, false), 5));\n                it('return 6 for 6', () => assert.equal(getY0End8x8(6, false), 6));\n                it('return 7 for 7', () => assert.equal(getY0End8x8(7, false), 7));\n            });\n            describe('for black', () => {\n                it('return 7 for 0', () => assert.equal(getY0End8x8(0, true), 7));\n                it('return 6 for 1', () => assert.equal(getY0End8x8(1, true), 6));\n                it('return 5 for 2', () => assert.equal(getY0End8x8(2, true), 5));\n                it('return 4 for 3', () => assert.equal(getY0End8x8(3, true), 4));\n                it('return 3 for 4', () => assert.equal(getY0End8x8(4, true), 3));\n                it('return 2 for 5', () => assert.equal(getY0End8x8(5, true), 2));\n                it('return 1 for 6', () => assert.equal(getY0End8x8(6, true), 1));\n                it('return 0 for 7', () => assert.equal(getY0End8x8(7, true), 0));\n            });\n        });\n    });\n    describe('positionsContains', () => {\n        it('not contains', () => {\n            const position = { x: 5, y: 2 };\n            const positions = [{ x: 4, y: 0 }, { x: 3, y: 0 }];\n            assert.notOk(Position.containsXY(positions, position));\n        });\n        it('contains', () => {\n            const position = { x: 3, y: 0 };\n            const positions = [{ x: 4, y: 0 }, { x: 3, y: 0 }];\n            assert.ok(Position.containsXY(positions, position));\n        });\n    });\n    describe('positionsNotContains', () => {\n        it('not contains', () => {\n            const position = { x: 5, y: 2 };\n            const positions = [{ x: 4, y: 0 }, { x: 3, y: 0 }];\n            assert.ok(Position.notContainsXY(positions, position));\n        });\n        it('contains', () => {\n            const position = { x: 3, y: 0 };\n            const positions = [{ x: 4, y: 0 }, { x: 3, y: 0 }];\n            assert.notOk(Position.notContainsXY(positions, position));\n        });\n    });\n    describe('setICanGoHere', () => {\n        it('I can go here', () => {\n            const positionsWhereCanIGo = [{ x: 0, y: 0 }, { x: 1, y: 1 }];\n            const oldPosition = { x: 0, y: 0 };\n            const newPosition = Position.setICanGoHere(positionsWhereCanIGo, oldPosition);\n            assert.notOk(oldPosition.iCanGoHere);\n            assert.ok(newPosition.iCanGoHere);\n            assert.notEqual(oldPosition, newPosition);\n        });\n    });\n    describe('getOrderedPositionsY0End', () => {\n        describe('board=8x8', () => {\n            const getOrderedPositionsY0End8x8 = R.curry(Position.getOrderedPositionsY0EndCurried(8));\n            describe('white positions', () => {\n                const getOrderedPositionsY0End8x8ForWhite = getOrderedPositionsY0End8x8(false);\n                it('return all positions in orderedPositions[0]', () => {\n                    const positions = [\n                        { x: 0, y: 0 },\n                        { x: 1, y: 0 },\n                        { x: 2, y: 0 },\n                        { x: 3, y: 0 },\n                        { x: 4, y: 0 },\n                        { x: 5, y: 0 },\n                        { x: 6, y: 0 },\n                        { x: 7, y: 0 }\n                    ];\n                    const orderedPositions = getOrderedPositionsY0End8x8ForWhite(positions);\n                    assert.equal(orderedPositions[0].length, 8);\n                });\n            });\n            describe('black positions', () => {\n                const getOrderedPositionsY0End8x8ForBlack = getOrderedPositionsY0End8x8(true);\n                it('return all positions in orderedPositions[0]', () => {\n                    const positions = [\n                        { x: 0, y: 7 },\n                        { x: 1, y: 7 },\n                        { x: 2, y: 7 },\n                        { x: 3, y: 7 },\n                        { x: 4, y: 7 },\n                        { x: 5, y: 7 },\n                        { x: 6, y: 7 },\n                        { x: 7, y: 7 }\n                    ];\n                    const orderedPositions = getOrderedPositionsY0End8x8ForBlack(positions);\n                    assert.equal(orderedPositions[0].length, 8);\n                });\n                it('return all positions in orderedPositions[7]', () => {\n                    const positions = [\n                        { x: 0, y: 7 },\n                        { x: 1, y: 7 },\n                        { x: 2, y: 7 },\n                        { x: 3, y: 7 },\n                        { x: 4, y: 7 },\n                        { x: 5, y: 7 },\n                        { x: 6, y: 7 },\n                        { x: 7, y: 7 }\n                    ];\n                    const orderedPositions = getOrderedPositionsY0End8x8ForBlack(positions);\n                    assert.equal(orderedPositions[0].length, 8);\n                });\n            });\n        });\n    });\n});\n//# sourceMappingURL=Position.test.js.map"]}