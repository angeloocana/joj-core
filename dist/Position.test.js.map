{"version":3,"sources":["../dist-esnext/Position.test.js"],"names":["assert","describe","it","position1","x","y","position2","equal","hasSamePosition","position","isBlack","ok","hasBlackPiece","notOk","undefined","hasNoPiece","hasWhitePiece","hasPiece","isBackGroundBlack","getToSearchOrder8x8","getToSearchOrderCurried","getYAsBlack","getYAsWhite4x4","getYAsWhiteCurried","getYAsWhite8x8"],"mappings":"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","file":"Position.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Position } from './index';\ndescribe('Position', () => {\n    describe('hasSamePosition', () => {\n        it('true', () => {\n            const position1 = { x: 2, y: 3 };\n            const position2 = { x: 2, y: 3 };\n            assert.equal(Position.hasSamePosition(position1, position2), true);\n        });\n        it('false', () => {\n            const position1 = { x: 3, y: 2 };\n            const position2 = { x: 2, y: 3 };\n            assert.equal(Position.hasSamePosition(position1, position2), false);\n        });\n    });\n    describe('hasBlackPiece', () => {\n        it('return true for black piece', () => {\n            const position = { x: 2, y: 3, isBlack: true };\n            assert.ok(Position.hasBlackPiece(position));\n        });\n        it('return false for white piece', () => {\n            const position = { x: 2, y: 3, isBlack: false };\n            assert.notOk(Position.hasBlackPiece(position));\n        });\n        describe('return false for no piece', () => {\n            it('null', () => {\n                const position = { x: 2, y: 3, isBlack: null };\n                assert.notOk(Position.hasBlackPiece(position));\n            });\n            it('undefined', () => {\n                const position = { x: 2, y: 3, isBlack: undefined };\n                assert.notOk(Position.hasBlackPiece(position));\n            });\n            it('no prop', () => {\n                const position = { x: 2, y: 3 };\n                delete position.isBlack;\n                assert.notOk(Position.hasBlackPiece(position));\n            });\n        });\n    });\n    describe('hasNoPiece', () => {\n        it('return false for black piece', () => {\n            const position = { x: 2, y: 3, isBlack: true };\n            assert.notOk(Position.hasNoPiece(position));\n        });\n        it('return false for white piece', () => {\n            const position = { x: 2, y: 3, isBlack: false };\n            assert.notOk(Position.hasNoPiece(position));\n        });\n        describe('return true for no piece', () => {\n            it('null', () => {\n                const position = { x: 2, y: 3, isBlack: null };\n                assert.ok(Position.hasNoPiece(position));\n            });\n            it('undefined', () => {\n                const position = { x: 2, y: 3, isBlack: undefined };\n                assert.ok(Position.hasNoPiece(position));\n            });\n            it('no prop', () => {\n                const position = { x: 2, y: 3 };\n                delete position.isBlack;\n                assert.ok(Position.hasNoPiece(position));\n            });\n        });\n    });\n    describe('hasWhitePiece', () => {\n        it('return false for black piece', () => {\n            const position = { x: 2, y: 3, isBlack: true };\n            assert.notOk(Position.hasWhitePiece(position));\n        });\n        it('return true for white piece', () => {\n            const position = { x: 2, y: 3, isBlack: false };\n            assert.ok(Position.hasWhitePiece(position));\n        });\n        describe('return false for no piece', () => {\n            it('null', () => {\n                const position = { x: 2, y: 3, isBlack: null };\n                assert.notOk(Position.hasWhitePiece(position));\n            });\n            it('undefined', () => {\n                const position = { x: 2, y: 3, isBlack: undefined };\n                assert.notOk(Position.hasWhitePiece(position));\n            });\n            it('no prop', () => {\n                const position = { x: 2, y: 3 };\n                delete position.isBlack;\n                assert.notOk(Position.hasWhitePiece(position));\n            });\n        });\n    });\n    describe('hasPiece', () => {\n        it('return true for black piece', () => {\n            const position = { x: 2, y: 3, isBlack: true };\n            assert.ok(Position.hasPiece(position));\n        });\n        it('return true for white piece', () => {\n            const position = { x: 2, y: 3, isBlack: false };\n            assert.ok(Position.hasPiece(position));\n        });\n        describe('return false for no piece', () => {\n            it('null', () => {\n                const position = { x: 2, y: 3, isBlack: null };\n                assert.notOk(Position.hasPiece(position));\n            });\n            it('undefined', () => {\n                const position = { x: 2, y: 3, isBlack: undefined };\n                assert.notOk(Position.hasPiece(position));\n            });\n            it('no prop', () => {\n                const position = { x: 2, y: 3 };\n                delete position.isBlack;\n                assert.notOk(Position.hasPiece(position));\n            });\n        });\n    });\n    describe('isBackGroundBlack', () => {\n        it('0,0 => true', () => {\n            assert.ok(Position.isBackGroundBlack(0, 0));\n        });\n        it('0,1 => false', () => {\n            assert.ok(!Position.isBackGroundBlack(0, 1));\n        });\n    });\n    describe('getToSearchOrder', () => {\n        const getToSearchOrder8x8 = Position.getToSearchOrderCurried({ x: 8, y: 8 });\n        it('return 0 for 0', () => assert.equal(getToSearchOrder8x8(0), 0));\n        it('return 1 for 7', () => assert.equal(getToSearchOrder8x8(7), 1));\n        it('return 2 for 1', () => assert.equal(getToSearchOrder8x8(1), 2));\n        it('return 3 for 6', () => assert.equal(getToSearchOrder8x8(6), 3));\n        it('return 4 for 2', () => assert.equal(getToSearchOrder8x8(2), 4));\n        it('return 5 for 5', () => assert.equal(getToSearchOrder8x8(5), 5));\n        it('return 6 for 3', () => assert.equal(getToSearchOrder8x8(3), 6));\n        it('return 7 for 4', () => assert.equal(getToSearchOrder8x8(4), 7));\n        it('return null for invalid x', () => assert.notOk(getToSearchOrder8x8(-1)));\n    });\n    describe('getYAsBlack', () => {\n        describe('4x4 Board', () => {\n            describe('for white', () => {\n                it('return 7 for 0', () => assert.equal(Position.getYAsBlack(4, 0, false), 3));\n                it('return 6 for 1', () => assert.equal(Position.getYAsBlack(4, 1, false), 2));\n                it('return 5 for 2', () => assert.equal(Position.getYAsBlack(4, 2, false), 1));\n                it('return 4 for 3', () => assert.equal(Position.getYAsBlack(4, 3, false), 0));\n            });\n            describe('for black', () => {\n                it('return 0 for 0', () => assert.equal(Position.getYAsBlack(4, 0, true), 0));\n                it('return 1 for 1', () => assert.equal(Position.getYAsBlack(4, 1, true), 1));\n                it('return 2 for 2', () => assert.equal(Position.getYAsBlack(4, 2, true), 2));\n                it('return 3 for 3', () => assert.equal(Position.getYAsBlack(4, 3, true), 3));\n            });\n        });\n        describe('8x8 Board', () => {\n            describe('for white', () => {\n                it('return 7 for 0', () => assert.equal(Position.getYAsBlack(8, 0, false), 7));\n                it('return 6 for 1', () => assert.equal(Position.getYAsBlack(8, 1, false), 6));\n                it('return 5 for 2', () => assert.equal(Position.getYAsBlack(8, 2, false), 5));\n                it('return 4 for 3', () => assert.equal(Position.getYAsBlack(8, 3, false), 4));\n                it('return 3 for 4', () => assert.equal(Position.getYAsBlack(8, 4, false), 3));\n                it('return 2 for 5', () => assert.equal(Position.getYAsBlack(8, 5, false), 2));\n                it('return 1 for 6', () => assert.equal(Position.getYAsBlack(8, 6, false), 1));\n                it('return 0 for 7', () => assert.equal(Position.getYAsBlack(8, 7, false), 0));\n            });\n            describe('for black', () => {\n                it('return 0 for 0', () => assert.equal(Position.getYAsBlack(8, 0, true), 0));\n                it('return 1 for 1', () => assert.equal(Position.getYAsBlack(8, 1, true), 1));\n                it('return 2 for 2', () => assert.equal(Position.getYAsBlack(8, 2, true), 2));\n                it('return 3 for 3', () => assert.equal(Position.getYAsBlack(8, 3, true), 3));\n                it('return 4 for 4', () => assert.equal(Position.getYAsBlack(8, 4, true), 4));\n                it('return 5 for 5', () => assert.equal(Position.getYAsBlack(8, 5, true), 5));\n                it('return 6 for 6', () => assert.equal(Position.getYAsBlack(8, 6, true), 6));\n                it('return 7 for 7', () => assert.equal(Position.getYAsBlack(8, 7, true), 7));\n            });\n        });\n    });\n    describe('getYAsWhite', () => {\n        describe('4x4 Board', () => {\n            const getYAsWhite4x4 = Position.getYAsWhiteCurried(4);\n            describe('for white', () => {\n                it('return 0 for 0', () => assert.equal(getYAsWhite4x4(0, false), 0));\n                it('return 1 for 1', () => assert.equal(getYAsWhite4x4(1, false), 1));\n                it('return 2 for 2', () => assert.equal(getYAsWhite4x4(2, false), 2));\n                it('return 3 for 3', () => assert.equal(getYAsWhite4x4(3, false), 3));\n            });\n            describe('for black', () => {\n                it('return 7 for 0', () => assert.equal(getYAsWhite4x4(0, true), 3));\n                it('return 6 for 1', () => assert.equal(getYAsWhite4x4(1, true), 2));\n                it('return 5 for 2', () => assert.equal(getYAsWhite4x4(2, true), 1));\n                it('return 4 for 3', () => assert.equal(getYAsWhite4x4(3, true), 0));\n            });\n        });\n        describe('8x8 Board', () => {\n            const getYAsWhite8x8 = Position.getYAsWhiteCurried(8);\n            describe('for white', () => {\n                it('return 0 for 0', () => assert.equal(getYAsWhite8x8(0, false), 0));\n                it('return 1 for 1', () => assert.equal(getYAsWhite8x8(1, false), 1));\n                it('return 2 for 2', () => assert.equal(getYAsWhite8x8(2, false), 2));\n                it('return 3 for 3', () => assert.equal(getYAsWhite8x8(3, false), 3));\n                it('return 4 for 4', () => assert.equal(getYAsWhite8x8(4, false), 4));\n                it('return 5 for 5', () => assert.equal(getYAsWhite8x8(5, false), 5));\n                it('return 6 for 6', () => assert.equal(getYAsWhite8x8(6, false), 6));\n                it('return 7 for 7', () => assert.equal(getYAsWhite8x8(7, false), 7));\n            });\n            describe('for black', () => {\n                it('return 7 for 0', () => assert.equal(getYAsWhite8x8(0, true), 7));\n                it('return 6 for 1', () => assert.equal(getYAsWhite8x8(1, true), 6));\n                it('return 5 for 2', () => assert.equal(getYAsWhite8x8(2, true), 5));\n                it('return 4 for 3', () => assert.equal(getYAsWhite8x8(3, true), 4));\n                it('return 3 for 4', () => assert.equal(getYAsWhite8x8(4, true), 3));\n                it('return 2 for 5', () => assert.equal(getYAsWhite8x8(5, true), 2));\n                it('return 1 for 6', () => assert.equal(getYAsWhite8x8(6, true), 1));\n                it('return 0 for 7', () => assert.equal(getYAsWhite8x8(7, true), 0));\n            });\n        });\n    });\n});\n//# sourceMappingURL=Position.test.js.map"]}