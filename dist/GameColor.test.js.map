{"version":3,"sources":["../dist-esnext/GameColor.test.js"],"names":["assert","assertColor","actual","expected","equal","endRow","jumps","nMoves","ok","haveSamePieceAndPosition","pieces","describe","miniBoardConf","getBoardConf","x","y","it","isBlack","createBlackPieces","expectedColor","score","won","preWinnersPoints","winners","points","startRow","actualColor","create","createWhitePieces","color","defaultBoardConf","getColorScore","notOk"],"mappings":"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","file":"GameColor.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Board, GameColor, Pieces } from './index';\nfunction assertColor(actual, expected) {\n    assert.equal(actual.endRow, expected.endRow, 'endRow');\n    assert.equal(actual.jumps, expected.jumps, 'jumps');\n    assert.equal(actual.nMoves, expected.nMoves, 'nMoves');\n    assert.ok(Pieces.haveSamePieceAndPosition(actual.pieces, expected.pieces));\n    // assert.equal(actual.points, expected.points, 'points');\n    // assert.equal(actual.score.preWinnersPoints, expected.score.preWinnersPoints,\n    //     `preWinnersPoints actual: ${actual.score.preWinnersPoints} expected: ${expected.score.preWinnersPoints}`);\n    // assert.equal(actual.startRow, expected.startRow, 'startRow');\n    // assert.equal(actual.score.winners, expected.score.winners, 'winners');\n}\ndescribe('GameColor', () => {\n    describe('GameColor.create', () => {\n        const miniBoardConf = Board.getBoardConf({ x: 3, y: 3 });\n        it('New white color with default options', () => {\n            const isBlack = false;\n            const pieces = Pieces.createBlackPieces([{ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }]);\n            const expectedColor = {\n                score: {\n                    won: false,\n                    preWinnersPoints: 0,\n                    winners: 0\n                },\n                jumps: 0,\n                points: 0,\n                nMoves: 0,\n                startRow: 2,\n                endRow: 0,\n                pieces,\n                isBlack\n            };\n            const actualColor = GameColor.create(miniBoardConf, isBlack, pieces);\n            assertColor(actualColor, expectedColor);\n        });\n        it('New black color with default options', () => {\n            const isBlack = true;\n            const pieces = Pieces.createBlackPieces([{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }]);\n            const expectedColor = {\n                score: {\n                    won: false,\n                    preWinnersPoints: 0,\n                    winners: 0\n                },\n                jumps: 0,\n                points: 0,\n                nMoves: 0,\n                startRow: 0,\n                endRow: 2,\n                pieces,\n                isBlack\n            };\n            const actualColor = GameColor.create(miniBoardConf, isBlack, pieces);\n            assertColor(actualColor, expectedColor);\n        });\n    });\n    describe('getColorScore', () => {\n        it('return 0', () => {\n            const pieces = Pieces.createWhitePieces([\n                { x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }, { x: 3, y: 0 },\n                { x: 4, y: 0 }, { x: 5, y: 0 }, { x: 6, y: 0 }, { x: 7, y: 0 }\n            ]);\n            const color = GameColor.create(Board.defaultBoardConf, true, pieces);\n            const score = GameColor.getColorScore(color);\n            assert.equal(score.preWinnersPoints, 0, 'preWinnersPoints');\n            assert.equal(score.winners, 0, 'winners');\n            assert.notOk(score.won, 'did NOT won');\n        });\n        it('return 1', () => {\n            const pieces = Pieces.createBlackPieces([\n                { x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 },\n                { x: 4, y: 4 }, { x: 5, y: 5 }, { x: 6, y: 6 }, { x: 7, y: 7 }\n            ]);\n            const color = GameColor.create(Board.defaultBoardConf, true, pieces);\n            const score = GameColor.getColorScore(color);\n            assert.equal(score.preWinnersPoints, 21, 'preWinnersPoints');\n            assert.equal(score.winners, 1, 'winners');\n            assert.notOk(score.won, 'did NOT won');\n        });\n        it('return 2', () => {\n            const pieces = Pieces.createBlackPieces([\n                { x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 },\n                { x: 4, y: 4 }, { x: 5, y: 5 }, { x: 6, y: 7 }, { x: 7, y: 7 }\n            ]);\n            const color = GameColor.create(Board.defaultBoardConf, true, pieces);\n            const score = GameColor.getColorScore(color);\n            assert.equal(score.preWinnersPoints, 15, 'preWinnersPoints');\n            assert.equal(score.winners, 2, 'winners');\n            assert.notOk(score.won, 'did NOT won');\n        });\n        it('return 8', () => {\n            const pieces = Pieces.createBlackPieces([\n                { x: 0, y: 7 }, { x: 1, y: 7 }, { x: 2, y: 7 }, { x: 3, y: 7 },\n                { x: 4, y: 7 }, { x: 5, y: 7 }, { x: 6, y: 7 }, { x: 7, y: 7 }\n            ]);\n            const color = GameColor.create(Board.defaultBoardConf, true, pieces);\n            const score = GameColor.getColorScore(color);\n            assert.equal(score.preWinnersPoints, 0, 'preWinnersPoints');\n            assert.equal(score.winners, 8, 'winners');\n            assert.ok(score.won, 'won');\n        });\n    });\n});\n//# sourceMappingURL=GameColor.test.js.map"]}