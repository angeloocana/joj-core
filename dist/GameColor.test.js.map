{"version":3,"sources":["../dist-esnext/GameColor.test.js"],"names":["assertPieces","actual","expected","i","length","actualPiece","expectedPiece","samePositionAs","position","assertColor","endRow","jumps","nMoves","pieces","points","score","preWinnersPoints","startRow","winners","describe","miniBoardConf","x","y","it","isBlack","expectedColor","actualColor","color","blackPieces","win"],"mappings":"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","file":"GameColor.test.js","sourcesContent":["import { equal, notOk, ok } from 'ptz-assert';\nimport log from 'ptz-log';\nimport { colorWin, createGameColor, createPiece, defaultBoardConf, getBoardConf, getColorScore, getInitialBoard, hasBlackPiece, hasNoPiece, hasWhitePiece, isSamePositionAs } from './index';\nfunction assertPieces(actual, expected) {\n    for (let i = 0; i < actual.length; i++) {\n        const actualPiece = actual[i];\n        const expectedPiece = expected[i];\n        const samePositionAs = isSamePositionAs(actualPiece.position, expectedPiece.position);\n        if (!samePositionAs) {\n            log('assertPieces: actualPiece:', actualPiece, ' \\n expectedPiece', expectedPiece);\n        }\n        ok(samePositionAs, 'isSamePositionAs');\n        equal(hasBlackPiece(actualPiece.position), hasBlackPiece(expectedPiece.position));\n        equal(hasWhitePiece(actualPiece.position), hasWhitePiece(expectedPiece.position));\n        equal(hasNoPiece(actualPiece.position), hasNoPiece(expectedPiece.position));\n    }\n}\nfunction assertColor(actual, expected) {\n    equal(actual.endRow, expected.endRow, 'endRow');\n    equal(actual.jumps, expected.jumps, 'jumps');\n    equal(actual.nMoves, expected.nMoves, 'nMoves');\n    assertPieces(actual.pieces, expected.pieces);\n    equal(actual.points, expected.points, 'points');\n    equal(actual.score.preWinnersPoints, expected.score.preWinnersPoints, `preWinnersPoints actual: ${actual.score.preWinnersPoints} expected: ${expected.score.preWinnersPoints}`);\n    equal(actual.startRow, expected.startRow, 'startRow');\n    equal(actual.score.winners, expected.score.winners, 'winners');\n}\ndescribe('GameColor', () => {\n    describe('createGameColor', () => {\n        const miniBoardConf = getBoardConf({ x: 3, y: 3 });\n        it('New white color with default options', () => {\n            const isBlack = false;\n            const pieces = [createPiece(0, 2, isBlack), createPiece(1, 2, isBlack), createPiece(2, 2, isBlack)];\n            const expectedColor = {\n                score: {\n                    preWinnersPoints: 0,\n                    winners: 0\n                },\n                jumps: 0,\n                points: 0,\n                nMoves: 0,\n                startRow: 2,\n                endRow: 0,\n                pieces,\n                isBlack\n            };\n            const actualColor = createGameColor(miniBoardConf, isBlack, pieces);\n            assertColor(actualColor, expectedColor);\n        });\n        it('New black color with default options', () => {\n            const isBlack = true;\n            const pieces = [createPiece(0, 0, isBlack), createPiece(1, 0, isBlack), createPiece(2, 0, isBlack)];\n            const expectedColor = {\n                score: {\n                    preWinnersPoints: 0,\n                    winners: 0\n                },\n                jumps: 0,\n                points: 0,\n                nMoves: 0,\n                startRow: 0,\n                endRow: 2,\n                pieces,\n                isBlack\n            };\n            const actualColor = createGameColor(miniBoardConf, isBlack, pieces);\n            assertColor(actualColor, expectedColor);\n        });\n    });\n    describe('getColorScore', () => {\n        it('return 0 when new game', () => {\n            const color = createGameColor(defaultBoardConf, false, []);\n            const winners = getColorScore(color);\n            equal(winners.preWinnersPoints, 0);\n            equal(winners.winners, 0);\n        });\n        it('return 1');\n        it('return 2');\n        it('return 3');\n        it('return 4');\n        it('return 5');\n        it('return 6');\n        it('return 7');\n        it('return 8');\n    });\n    describe('colorWin', () => {\n        const { blackPieces } = getInitialBoard(defaultBoardConf);\n        log('blackPieces', blackPieces);\n        it('return false when new game', () => {\n            const color = createGameColor(defaultBoardConf, false, blackPieces);\n            const win = colorWin(color);\n            log('color', color);\n            notOk(win);\n        });\n        it('return true', () => {\n            const color = createGameColor(defaultBoardConf, false, blackPieces);\n            color.score.winners = 8;\n            const win = colorWin(color);\n            log('color', color);\n            ok(win);\n        });\n    });\n});\n//# sourceMappingURL=GameColor.test.js.map"]}