{"version":3,"sources":["../dist-esnext/GameColor.test.js"],"names":["assert","assertColor","actual","expected","equal","endRow","jumps","nMoves","ok","haveSamePieceAndPosition","pieces","describe","miniBoardConf","getBoardConf","x","y","it","isBlack","create","expectedColor","score","preWinnersPoints","winners","points","startRow","actualColor","color","defaultBoardConf","getScore","getInitialBoard","blackPieces","won","hasWon","notOk"],"mappings":"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","file":"GameColor.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport log from 'ptz-log';\nimport { Board, GameColor, Piece, Pieces } from './index';\nfunction assertColor(actual, expected) {\n    assert.equal(actual.endRow, expected.endRow, 'endRow');\n    assert.equal(actual.jumps, expected.jumps, 'jumps');\n    assert.equal(actual.nMoves, expected.nMoves, 'nMoves');\n    assert.ok(Pieces.haveSamePieceAndPosition(actual.pieces, expected.pieces));\n    // assert.equal(actual.points, expected.points, 'points');\n    // assert.equal(actual.score.preWinnersPoints, expected.score.preWinnersPoints,\n    //     `preWinnersPoints actual: ${actual.score.preWinnersPoints} expected: ${expected.score.preWinnersPoints}`);\n    // assert.equal(actual.startRow, expected.startRow, 'startRow');\n    // assert.equal(actual.score.winners, expected.score.winners, 'winners');\n}\ndescribe('GameColor', () => {\n    describe('GameColor.create', () => {\n        const miniBoardConf = Board.getBoardConf({ x: 3, y: 3 });\n        it('New white color with default options', () => {\n            const isBlack = false;\n            const pieces = [Piece.create(0, 2, isBlack), Piece.create(1, 2, isBlack), Piece.create(2, 2, isBlack)];\n            const expectedColor = {\n                score: {\n                    preWinnersPoints: 0,\n                    winners: 0\n                },\n                jumps: 0,\n                points: 0,\n                nMoves: 0,\n                startRow: 2,\n                endRow: 0,\n                pieces,\n                isBlack\n            };\n            const actualColor = GameColor.create(miniBoardConf, isBlack, pieces);\n            assertColor(actualColor, expectedColor);\n        });\n        it('New black color with default options', () => {\n            const isBlack = true;\n            const pieces = [Piece.create(0, 0, isBlack), Piece.create(1, 0, isBlack), Piece.create(2, 0, isBlack)];\n            const expectedColor = {\n                score: {\n                    preWinnersPoints: 0,\n                    winners: 0\n                },\n                jumps: 0,\n                points: 0,\n                nMoves: 0,\n                startRow: 0,\n                endRow: 2,\n                pieces,\n                isBlack\n            };\n            const actualColor = GameColor.create(miniBoardConf, isBlack, pieces);\n            assertColor(actualColor, expectedColor);\n        });\n    });\n    describe('getColorScore', () => {\n        it('return 0 when new game', () => {\n            const color = GameColor.create(Board.defaultBoardConf, false, []);\n            const winners = GameColor.getScore(color);\n            assert.equal(winners.preWinnersPoints, 0);\n            assert.equal(winners.winners, 0);\n        });\n        it('return 1');\n        it('return 2');\n        it('return 3');\n        it('return 4');\n        it('return 5');\n        it('return 6');\n        it('return 7');\n        it('return 8');\n    });\n    describe('colorWin', () => {\n        const { blackPieces } = Board.getInitialBoard(Board.defaultBoardConf);\n        log('blackPieces', blackPieces);\n        it('return false when new game', () => {\n            const color = GameColor.create(Board.defaultBoardConf, false, blackPieces);\n            const won = GameColor.hasWon(color);\n            assert.notOk(won);\n        });\n        it('return true', () => {\n            const color = GameColor.create(Board.defaultBoardConf, false, blackPieces);\n            color.score.winners = 8;\n            const won = GameColor.hasWon(color);\n            assert.ok(won);\n        });\n    });\n});\n//# sourceMappingURL=GameColor.test.js.map"]}