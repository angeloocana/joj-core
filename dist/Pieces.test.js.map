{"version":3,"sources":["../dist-esnext/Pieces.test.js"],"names":["assert","describe","it","pieceToRemove","position","x","y","isBlack","pieces","createWhitePieces","newPieces","removePiece","notContains","deepEqual","getOrderedPieces8x8","curry","getOrderedPiecesCurried","getOrderedPieces8x8ForWhite","map","createPiece","p","orderedPieces","equal","length","getOrderedPieces8x8ForBlack","a","b","ok","haveSamePieceAndPosition","notOk"],"mappings":"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","file":"Pieces.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport R from 'ramda';\nimport { Piece, Pieces } from './index';\ndescribe('Pieces', () => {\n    describe('removePiece', () => {\n        it('remove', () => {\n            const pieceToRemove = { position: { x: 0, y: 2, isBlack: false } };\n            const pieces = Pieces.createWhitePieces([{ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }]);\n            const newPieces = Pieces.removePiece(pieces, pieceToRemove);\n            assert.notContains(newPieces, pieces[0]);\n        });\n        it('do not remove', () => {\n            const pieceToRemove = { position: { x: 0, y: 0, isBlack: false } };\n            const pieces = Pieces.createWhitePieces([{ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }]);\n            const newPieces = Pieces.removePiece(pieces, pieceToRemove);\n            assert.deepEqual(newPieces, pieces);\n        });\n    });\n    describe('getOrderedPieces', () => {\n        describe('board=8x8', () => {\n            const getOrderedPieces8x8 = R.curry(Pieces.getOrderedPiecesCurried(8));\n            describe('white pieces', () => {\n                const getOrderedPieces8x8ForWhite = getOrderedPieces8x8(false);\n                it('return all pieces in orderedPieces[0]', () => {\n                    const pieces = [\n                        { x: 0, y: 7 },\n                        { x: 1, y: 7 },\n                        { x: 2, y: 7 },\n                        { x: 3, y: 7 },\n                        { x: 4, y: 7 },\n                        { x: 5, y: 7 },\n                        { x: 6, y: 7 },\n                        { x: 7, y: 7 }\n                    ].map(p => Piece.createPiece(p));\n                    const orderedPieces = getOrderedPieces8x8ForWhite(pieces);\n                    assert.equal(orderedPieces[0].length, 8);\n                });\n            });\n            describe('black pieces', () => {\n                const getOrderedPieces8x8ForBlack = getOrderedPieces8x8(true);\n                it('return all pieces in orderedPieces[0]', () => {\n                    const pieces = [\n                        { x: 0, y: 0 },\n                        { x: 1, y: 0 },\n                        { x: 2, y: 0 },\n                        { x: 3, y: 0 },\n                        { x: 4, y: 0 },\n                        { x: 5, y: 0 },\n                        { x: 6, y: 0 },\n                        { x: 7, y: 0 }\n                    ].map(p => Piece.createPiece(p));\n                    const orderedPieces = getOrderedPieces8x8ForBlack(pieces);\n                    assert.equal(orderedPieces[0].length, 8);\n                });\n                it('return all pieces in orderedPieces[7]', () => {\n                    const pieces = [\n                        { x: 0, y: 7 },\n                        { x: 1, y: 7 },\n                        { x: 2, y: 7 },\n                        { x: 3, y: 7 },\n                        { x: 4, y: 7 },\n                        { x: 5, y: 7 },\n                        { x: 6, y: 7 },\n                        { x: 7, y: 7 }\n                    ].map(p => Piece.createPiece(p));\n                    const orderedPieces = getOrderedPieces8x8ForBlack(pieces);\n                    assert.equal(orderedPieces[7].length, 8);\n                });\n            });\n        });\n    });\n    describe('haveSamePieceAndPosition', () => {\n        it('return true for same piece and same position', () => {\n            const a = [{ position: { x: 0, y: 0, isBlack: true } }];\n            const b = [{ position: { x: 0, y: 0, isBlack: true } }];\n            assert.ok(Pieces.haveSamePieceAndPosition(a, b));\n        });\n        it('return false for diferente piece and same position', () => {\n            const a = [{ position: { x: 0, y: 0, isBlack: true } }];\n            const b = [{ position: { x: 0, y: 0, isBlack: false } }];\n            assert.notOk(Pieces.haveSamePieceAndPosition(a, b));\n        });\n        it('return false for same piece and diferent position', () => {\n            const a = [{ position: { x: 0, y: 0, isBlack: true } }];\n            const b = [{ position: { x: 0, y: 1, isBlack: true } }];\n            assert.notOk(Pieces.haveSamePieceAndPosition(a, b));\n        });\n        it('return false for diferente piece and diferent position', () => {\n            const a = [{ position: { x: 0, y: 0, isBlack: true } }];\n            const b = [{ position: { x: 0, y: 1, isBlack: false } }];\n            assert.notOk(Pieces.haveSamePieceAndPosition(a, b));\n        });\n    });\n});\n//# sourceMappingURL=Pieces.test.js.map"]}