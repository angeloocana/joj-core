{"version":3,"sources":["../dist-esnext/Move.test.js"],"names":["assert","describe","it","move","from","x","y","to","backMove","getBackMove","equal","players","white","name","foto","black","game","createGame","gameBeforeLastMove","getGameAfterMove","getGameBeforeLastMove","moves","length","deepEqual","beforeEach","throws","gameBeforeMoves","getMovesFromArray","gameAfterMoves","getGameAfterMoves","notEqual"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;AACAC,SAAS,MAAT,EAAiB,YAAM;AACnBA,aAAS,aAAT,EAAwB,YAAM;AAC1BC,WAAG,oDAAH,EAAyD,YAAM;AAC3D,gBAAMC,OAAO;AACTC,sBAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EADG;AAETC,oBAAI,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX;AAFK,aAAb;AAIA,gBAAME,WAAW,YAAKC,WAAL,CAAiBN,IAAjB,CAAjB;AACAH,mBAAOU,KAAP,CAAaF,SAASJ,IAAtB,EAA4BD,KAAKI,EAAjC;AACAP,mBAAOU,KAAP,CAAaF,SAASD,EAAtB,EAA0BJ,KAAKC,IAA/B;AACH,SARD;AASH,KAVD;AAWAH,aAAS,UAAT,EAAqB,YAAM;AACvBC,WAAG,uBAAH,EAA4B,YAAM;AAC9B,gBAAMS,UAAU;AACZC,uBAAO,EAAEC,MAAM,QAAR,EAAkBC,MAAM,oBAAxB,EADK;AAEZC,uBAAO,EAAEF,MAAM,MAAR,EAAgBC,MAAM,oBAAtB;AAFK,aAAhB;AAIA,gBAAIE,OAAO,YAAKC,UAAL,CAAgB,EAAEN,gBAAF,EAAhB,CAAX;AACA,gBAAMO,qBAAqB,YAAKC,gBAAL,CAAsBH,IAAtB,EAA4B,EAAEZ,MAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAR,EAAwBC,IAAI,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX,EAA5B,EAA5B,CAA3B;AACAU,mBAAO,YAAKG,gBAAL,CAAsBD,kBAAtB,EAA0C,EAAEd,MAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAR,EAAwBC,IAAI,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX,EAA5B,EAA1C,CAAP;AACAU,mBAAO,YAAKI,qBAAL,CAA2BJ,IAA3B,CAAP;AACAhB,mBAAOU,KAAP,CAAaQ,mBAAmBG,KAAnB,CAAyBC,MAAtC,EAA8CN,KAAKK,KAAL,CAAWC,MAAzD;AACAtB,mBAAOuB,SAAP,CAAiBL,mBAAmBG,KAApC,EAA2CL,KAAKK,KAAhD;AACH,SAXD;AAYH,KAbD;AAcApB,aAAS,kBAAT,EAA6B,YAAM;AAC/B,YAAIe,IAAJ;AACAQ,mBAAW,YAAM;AACbR,mBAAO,YAAKC,UAAL,CAAgB;AACnBN,yBAAS;AACLC,2BAAO,EAAEC,MAAM,QAAR,EAAkBC,MAAM,oBAAxB,EADF;AAELC,2BAAO,EAAEF,MAAM,MAAR,EAAgBC,MAAM,oBAAtB;AAFF;AADU,aAAhB,CAAP;AAMH,SAPD;AAQAZ,WAAG,+BAAH,EAAoC,YAAM;AACtC,gBAAMC,OAAO;AACTC,sBAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EADG;AAETC,oBAAI,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX;AAFK,aAAb;AAIAN,mBAAOyB,MAAP,CAAc,YAAM;AAChBT,uBAAO,YAAKG,gBAAL,CAAsBH,IAAtB,EAA4Bb,IAA5B,CAAP;AACH,aAFD;AAGH,SARD;AASH,KAnBD;AAoBAD,OAAG,mBAAH,EAAwB,YAAM;AAC1B,YAAMwB,kBAAkB,YAAKT,UAAL,EAAxB;AACA,YAAMI,QAAQ,YAAKM,iBAAL,CAAuB,CACjC,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CADiC,EAEjC,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CAFiC,EAGjC,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,CAAT,CAHiC,CAAvB,CAAd;AAKA,YAAMC,iBAAiB,YAAKC,iBAAL,CAAuBH,eAAvB,EAAwCL,KAAxC,CAAvB;AACArB,eAAO8B,QAAP,CAAgBJ,eAAhB,EAAiCE,cAAjC,EAAiD,WAAjD;AACA5B,eAAOU,KAAP,CAAakB,eAAeP,KAAf,CAAqBC,MAAlC,EAA0CD,MAAMC,MAAhD;AACH,KAVD;AAWH,CAzDD;AA0DA","file":"Move.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Game, Move } from './index';\ndescribe('Move', () => {\n    describe('getBackMove', () => {\n        it('invert move {from:0,7 to:1,6} => {from:1,6 to:0,7}', () => {\n            const move = {\n                from: { x: 0, y: 7 },\n                to: { x: 1, y: 6 }\n            };\n            const backMove = Move.getBackMove(move);\n            assert.equal(backMove.from, move.to);\n            assert.equal(backMove.to, move.from);\n        });\n    });\n    describe('backMove', () => {\n        it('backMove offline game', () => {\n            const players = {\n                white: { name: 'Angelo', foto: 'img/black_user.png' },\n                black: { name: 'Gabi', foto: 'img/white_user.png' }\n            };\n            let game = Game.createGame({ players });\n            const gameBeforeLastMove = Move.getGameAfterMove(game, { from: { x: 2, y: 7 }, to: { x: 2, y: 6 } });\n            game = Move.getGameAfterMove(gameBeforeLastMove, { from: { x: 2, y: 0 }, to: { x: 2, y: 1 } });\n            game = Move.getGameBeforeLastMove(game);\n            assert.equal(gameBeforeLastMove.moves.length, game.moves.length);\n            assert.deepEqual(gameBeforeLastMove.moves, game.moves);\n        });\n    });\n    describe('getGameAfterMove', () => {\n        var game;\n        beforeEach(() => {\n            game = Game.createGame({\n                players: {\n                    white: { name: 'Angelo', foto: 'img/black_user.png' },\n                    black: { name: 'Gabi', foto: 'img/white_user.png' }\n                }\n            });\n        });\n        it('Block moving to same position', () => {\n            const move = {\n                from: { x: 0, y: 0 },\n                to: { x: 0, y: 0 }\n            };\n            assert.throws(() => {\n                game = Move.getGameAfterMove(game, move);\n            });\n        });\n    });\n    it('getGameAfterMoves', () => {\n        const gameBeforeMoves = Game.createGame();\n        const moves = Move.getMovesFromArray([\n            [[5, 7], [5, 6]],\n            [[2, 0], [2, 1]],\n            [[7, 7], [5, 5]]\n        ]);\n        const gameAfterMoves = Move.getGameAfterMoves(gameBeforeMoves, moves);\n        assert.notEqual(gameBeforeMoves, gameAfterMoves, 'immutable');\n        assert.equal(gameAfterMoves.moves.length, moves.length);\n    });\n});\n//# sourceMappingURL=Move.test.js.map"]}