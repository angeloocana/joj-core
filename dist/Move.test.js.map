{"version":3,"sources":["../dist-esnext/Move.test.js"],"names":["assert","TestData","describe","it","move","from","x","y","to","backMove","getBackMove","equal","players","white","name","foto","black","game","createGame","gameBeforeLastMove","getGameAfterMove","getGameBeforeLastMove","moves","length","deepEqual","beforeEach","throws","gameBeforeMoves","getMovesFromArray","gameAfterMoves","getGameAfterMoves","notEqual","pieces","isBlack","boardBefore","getBoardWithPieces","cleanBoard","p55","jumpingBlackPiece","jumps","p53","p51","boardAfter","getBoardAfterMove","boardAfterExpected","lastMove","lastMoveJump"],"mappings":"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","file":"Move.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as TestData from './__testdata__/board.data.test';\nimport { Board, Game, Move } from './index';\ndescribe('Move', () => {\n    describe('getBackMove', () => {\n        it('invert move {from:0,7 to:1,6} => {from:1,6 to:0,7}', () => {\n            const move = {\n                from: { x: 0, y: 7 },\n                to: { x: 1, y: 6 }\n            };\n            const backMove = Move.getBackMove(move);\n            assert.equal(backMove.from, move.to);\n            assert.equal(backMove.to, move.from);\n        });\n    });\n    describe('backMove', () => {\n        it('backMove offline game', () => {\n            const players = {\n                white: { name: 'Angelo', foto: 'img/black_user.png' },\n                black: { name: 'Gabi', foto: 'img/white_user.png' }\n            };\n            let game = Game.createGame({ players });\n            const gameBeforeLastMove = Move.getGameAfterMove(game, { from: { x: 2, y: 7 }, to: { x: 2, y: 6 } });\n            game = Move.getGameAfterMove(gameBeforeLastMove, { from: { x: 2, y: 0 }, to: { x: 2, y: 1 } });\n            game = Move.getGameBeforeLastMove(game);\n            assert.equal(gameBeforeLastMove.moves.length, game.moves.length);\n            assert.deepEqual(gameBeforeLastMove.moves, game.moves);\n        });\n    });\n    describe('getGameAfterMove', () => {\n        var game;\n        beforeEach(() => {\n            game = Game.createGame({\n                players: {\n                    white: { name: 'Angelo', foto: 'img/black_user.png' },\n                    black: { name: 'Gabi', foto: 'img/white_user.png' }\n                }\n            });\n        });\n        it('Block moving to same position', () => {\n            const move = {\n                from: { x: 0, y: 0 },\n                to: { x: 0, y: 0 }\n            };\n            assert.throws(() => {\n                game = Move.getGameAfterMove(game, move);\n            });\n        });\n    });\n    it('getGameAfterMoves', () => {\n        const gameBeforeMoves = Game.createGame();\n        const moves = Move.getMovesFromArray([\n            [[5, 7], [5, 6]],\n            [[2, 0], [2, 1]],\n            [[7, 7], [5, 5]]\n        ]);\n        const gameAfterMoves = Move.getGameAfterMoves(gameBeforeMoves, moves);\n        assert.notEqual(gameBeforeMoves, gameAfterMoves, 'immutable');\n        assert.equal(gameAfterMoves.moves.length, moves.length);\n    });\n    describe('getBoardAfterMove', () => {\n        it('5,7 => 5,6 5,5 5,3 => 5,1', () => {\n            const pieces = [\n                { x: 5, y: 7, isBlack: true },\n                { x: 5, y: 6, isBlack: false },\n                { x: 5, y: 4, isBlack: false },\n                { x: 5, y: 2, isBlack: false },\n            ];\n            const boardBefore = Board.getBoardWithPieces(TestData.cleanBoard, pieces);\n            const from = { x: 5, y: 7 };\n            const p55 = {\n                x: 5, y: 5,\n                jumpingBlackPiece: false,\n                jumps: [from]\n            };\n            const p53 = {\n                x: 5, y: 3,\n                jumpingBlackPiece: false,\n                jumps: [from, p55]\n            };\n            const p51 = {\n                x: 5, y: 1,\n                jumpingBlackPiece: false,\n                jumps: [from, p55, p53]\n            };\n            const move = {\n                from,\n                to: p51\n            };\n            const boardAfter = Move.getBoardAfterMove(boardBefore, move);\n            // tslint:disable:max-line-length\n            const boardAfterExpected = [\n                [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }, { x: 3, y: 0 }, { x: 4, y: 0 }, { x: 5, y: 0 }, { x: 6, y: 0 }, { x: 7, y: 0 }],\n                [{ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }, { x: 3, y: 1 }, { x: 4, y: 1 }, { x: 5, y: 1, isBlack: true, lastMove: true }, { x: 6, y: 1 }, { x: 7, y: 1 }],\n                [{ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }, { x: 3, y: 2 }, { x: 4, y: 2 }, { x: 5, y: 2, isBlack: false }, { x: 6, y: 2 }, { x: 7, y: 2 }],\n                [{ x: 0, y: 3 }, { x: 1, y: 3 }, { x: 2, y: 3 }, { x: 3, y: 3 }, { x: 4, y: 3 }, { x: 5, y: 3, lastMoveJump: true }, { x: 6, y: 3 }, { x: 7, y: 3 }],\n                [{ x: 0, y: 4 }, { x: 1, y: 4 }, { x: 2, y: 4 }, { x: 3, y: 4 }, { x: 4, y: 4 }, { x: 5, y: 4, isBlack: false }, { x: 6, y: 4 }, { x: 7, y: 4 }],\n                [{ x: 0, y: 5 }, { x: 1, y: 5 }, { x: 2, y: 5 }, { x: 3, y: 5 }, { x: 4, y: 5 }, { x: 5, y: 5, lastMoveJump: true }, { x: 6, y: 5 }, { x: 7, y: 5 }],\n                [{ x: 0, y: 6 }, { x: 1, y: 6 }, { x: 2, y: 6 }, { x: 3, y: 6 }, { x: 4, y: 6 }, { x: 5, y: 6, isBlack: false }, { x: 6, y: 6 }, { x: 7, y: 6 }],\n                [{ x: 0, y: 7 }, { x: 1, y: 7 }, { x: 2, y: 7 }, { x: 3, y: 7 }, { x: 4, y: 7 }, { x: 5, y: 7, lastMove: true }, { x: 6, y: 7 }, { x: 7, y: 7 }]\n            ];\n            assert.deepEqual(boardAfter, boardAfterExpected);\n        });\n    });\n});\n//# sourceMappingURL=Move.test.js.map"]}