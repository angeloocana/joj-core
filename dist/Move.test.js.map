{"version":3,"sources":["../dist-esnext/Move.test.js"],"names":["assert","TestData","describe","it","move","from","x","y","to","backMove","getBackMove","equal","players","white","name","foto","black","game0","createGame","game1","getGameAfterMove","game2","game_1","getGameBeforeLastMove","deepEqual","moves","isAi","gameBefore","length","game","gameAfterMove","gameBeforeMoves","getMovesFromArray","gameAfterMoves","getGameAfterMoves","notEqual","pieces","isBlack","boardBefore","getBoardWithPieces","cleanBoard","p55","jumpingBlackPiece","jumps","p53","p51","boardAfter","getBoardAfterMove","boardAfterExpected","lastMove","lastMoveJump","getAllowedMovesFromArrays","expectedMoves"],"mappings":"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","file":"Move.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as TestData from './__testdata__/index.data.test';\nimport { Board, Game, Move } from './index';\ndescribe('Move', () => {\n    describe('getBackMove', () => {\n        it('invert move {from:0,7 to:1,6} => {from:1,6 to:0,7}', () => {\n            const move = {\n                from: { x: 0, y: 7 },\n                to: { x: 1, y: 6 }\n            };\n            const backMove = Move.getBackMove(move);\n            assert.equal(backMove.from, move.to);\n            assert.equal(backMove.to, move.from);\n        });\n    });\n    describe('backMove', () => {\n        it('backMove offline game', () => {\n            const players = {\n                white: { name: 'Angelo', foto: 'img/black_user.png' },\n                black: { name: 'Gabi', foto: 'img/white_user.png' }\n            };\n            const game0 = Game.createGame({ players });\n            const game1 = Move.getGameAfterMove(game0, { from: { x: 2, y: 7 }, to: { x: 2, y: 6 } });\n            const game2 = Move.getGameAfterMove(game1, { from: { x: 2, y: 0 }, to: { x: 2, y: 1 } });\n            const game_1 = Move.getGameBeforeLastMove(game2); // tslint:disable-line:variable-name\n            assert.deepEqual(game_1.moves, game1.moves);\n        });\n        it('return AI move too', () => {\n            const players = {\n                white: { name: 'Angelo' },\n                black: { name: 'AI', isAi: true }\n            };\n            const game0 = Game.createGame({ players });\n            const game1 = Move.getGameAfterMove(game0, { from: { x: 2, y: 7 }, to: { x: 2, y: 6 } });\n            const game2 = Move.getGameAfterMove(game1, { from: { x: 2, y: 0 }, to: { x: 2, y: 1 } });\n            const gameBefore = Move.getGameBeforeLastMove(game2);\n            assert.equal(gameBefore.moves.length, game0.moves.length);\n            assert.deepEqual(gameBefore.moves, game0.moves);\n        });\n        it('no moves', () => {\n            const game = Game.createGame();\n            const gameBefore = Move.getGameBeforeLastMove(game);\n            assert.equal(gameBefore.moves.length, game.moves.length);\n            assert.deepEqual(gameBefore.moves, game.moves);\n        });\n        it('no AI move', () => {\n            const players = {\n                white: { name: 'AI', isAi: true },\n                black: { name: 'Angelo' }\n            };\n            const game0 = Game.createGame({ players });\n            const game1 = Move.getGameAfterMove(game0, { from: { x: 2, y: 7 }, to: { x: 2, y: 6 } });\n            const gameBefore = Move.getGameBeforeLastMove(game1);\n            assert.equal(gameBefore.moves.length, game0.moves.length);\n            assert.deepEqual(gameBefore.moves, game0.moves);\n        });\n    });\n    describe('getGameAfterMove', () => {\n        it('Block moving to same position', () => {\n            const game = Game.createGame({\n                players: {\n                    white: { name: 'Angelo', foto: 'img/black_user.png' },\n                    black: { name: 'Gabi', foto: 'img/white_user.png' }\n                }\n            });\n            const move = {\n                from: { x: 0, y: 0 },\n                to: { x: 0, y: 0 }\n            };\n            const gameAfterMove = Move.getGameAfterMove(game, move);\n            assert.equal(gameAfterMove, game, 'not the same game');\n        });\n    });\n    it('getGameAfterMoves', () => {\n        const gameBeforeMoves = Game.createGame();\n        const moves = Move.getMovesFromArray([\n            [[5, 7], [5, 6]],\n            [[2, 0], [2, 1]],\n            [[7, 7], [5, 5]]\n        ]);\n        const gameAfterMoves = Move.getGameAfterMoves(gameBeforeMoves, moves);\n        assert.notEqual(gameBeforeMoves, gameAfterMoves, 'immutable');\n        assert.equal(gameAfterMoves.moves.length, moves.length, 'n moves');\n    });\n    describe('getBoardAfterMove', () => {\n        it('5,7 => 5,6 5,5 5,3 => 5,1', () => {\n            const pieces = [\n                { x: 5, y: 7, isBlack: true },\n                { x: 5, y: 6, isBlack: false },\n                { x: 5, y: 4, isBlack: false },\n                { x: 5, y: 2, isBlack: false },\n            ];\n            const boardBefore = Board.getBoardWithPieces(TestData.cleanBoard, pieces);\n            const from = { x: 5, y: 7 };\n            const p55 = {\n                x: 5, y: 5,\n                jumpingBlackPiece: false,\n                jumps: [from]\n            };\n            const p53 = {\n                x: 5, y: 3,\n                jumpingBlackPiece: false,\n                jumps: [from, p55]\n            };\n            const p51 = {\n                x: 5, y: 1,\n                jumpingBlackPiece: false,\n                jumps: [from, p55, p53]\n            };\n            const move = {\n                from,\n                to: p51\n            };\n            const boardAfter = Move.getBoardAfterMove(boardBefore, move);\n            // tslint:disable:max-line-length\n            const boardAfterExpected = [\n                [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }, { x: 3, y: 0 }, { x: 4, y: 0 }, { x: 5, y: 0 }, { x: 6, y: 0 }, { x: 7, y: 0 }],\n                [{ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }, { x: 3, y: 1 }, { x: 4, y: 1 }, { x: 5, y: 1, isBlack: true, lastMove: true }, { x: 6, y: 1 }, { x: 7, y: 1 }],\n                [{ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }, { x: 3, y: 2 }, { x: 4, y: 2 }, { x: 5, y: 2, isBlack: false }, { x: 6, y: 2 }, { x: 7, y: 2 }],\n                [{ x: 0, y: 3 }, { x: 1, y: 3 }, { x: 2, y: 3 }, { x: 3, y: 3 }, { x: 4, y: 3 }, { x: 5, y: 3, lastMoveJump: true }, { x: 6, y: 3 }, { x: 7, y: 3 }],\n                [{ x: 0, y: 4 }, { x: 1, y: 4 }, { x: 2, y: 4 }, { x: 3, y: 4 }, { x: 4, y: 4 }, { x: 5, y: 4, isBlack: false }, { x: 6, y: 4 }, { x: 7, y: 4 }],\n                [{ x: 0, y: 5 }, { x: 1, y: 5 }, { x: 2, y: 5 }, { x: 3, y: 5 }, { x: 4, y: 5 }, { x: 5, y: 5, lastMoveJump: true }, { x: 6, y: 5 }, { x: 7, y: 5 }],\n                [{ x: 0, y: 6 }, { x: 1, y: 6 }, { x: 2, y: 6 }, { x: 3, y: 6 }, { x: 4, y: 6 }, { x: 5, y: 6, isBlack: false }, { x: 6, y: 6 }, { x: 7, y: 6 }],\n                [{ x: 0, y: 7 }, { x: 1, y: 7 }, { x: 2, y: 7 }, { x: 3, y: 7 }, { x: 4, y: 7 }, { x: 5, y: 7, lastMove: true }, { x: 6, y: 7 }, { x: 7, y: 7 }]\n            ];\n            assert.deepEqual(boardAfter, boardAfterExpected);\n        });\n    });\n    describe('getAllowedMovesFromArrays', () => {\n        it('get from array', () => {\n            const moves = Move.getAllowedMovesFromArrays([\n                [[0, 7], [0, 6], [1, 6]],\n                [[1, 7], [0, 6], [1, 6], [2, 6]]\n            ]);\n            const expectedMoves = [\n                { from: { x: 0, y: 7 }, to: { x: 0, y: 6 } },\n                { from: { x: 0, y: 7 }, to: { x: 1, y: 6 } },\n                { from: { x: 1, y: 7 }, to: { x: 0, y: 6 } },\n                { from: { x: 1, y: 7 }, to: { x: 1, y: 6 } },\n                { from: { x: 1, y: 7 }, to: { x: 2, y: 6 } },\n            ];\n            assert.deepEqual(moves, expectedMoves);\n        });\n    });\n});\n//# sourceMappingURL=Move.test.js.map"]}