{"version":3,"sources":["../dist-esnext/Game.test.js"],"names":["assert","describe","it","cleanGame","getCleanGameToSaveOnServer","equal","ended","deepEqual","movements","move","from","x","y","to","game","getGameAfterMove","length","firstMove","ok","isMyTurn","notOk"],"mappings":"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","file":"Game.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport log from 'ptz-log';\nimport { Game, Move } from './index';\nimport { initialGame } from './__tests__/game.data.test';\ndescribe('Game', () => {\n    describe('create', () => {\n        it('creates a new game');\n    });\n    describe('needToValidateMovements', () => {\n        it('when null should validate');\n        it('when undefined should validate');\n        it('when true should validate');\n        it('when false should NOT validate');\n    });\n    describe('getCleanGameToSaveOnServer', () => {\n        it('map no movements', () => {\n            const cleanGame = Game.getCleanGameToSaveOnServer(initialGame);\n            assert.equal(initialGame.ended, cleanGame.ended);\n            assert.deepEqual(initialGame.movements, cleanGame.movements);\n        });\n        it('map with movements', () => {\n            const move = {\n                from: { x: 4, y: 7 },\n                to: { x: 4, y: 6 }\n            };\n            log('before initialGame.movements', initialGame.movements);\n            const game = Move.getGameAfterMove(initialGame, move, false);\n            log('game === initialGame: ', game === initialGame);\n            log('after initialGame.movements', initialGame.movements);\n            log('game.movements', game.movements);\n            const cleanGame = Game.getCleanGameToSaveOnServer(game);\n            assert.equal(game.ended, cleanGame.ended);\n            assert.equal(cleanGame.movements.length, 1);\n            assert.deepEqual(game.movements, cleanGame.movements);\n        });\n    });\n    describe('isMyTurn', () => {\n        it('returns true for black piece and black turn', () => {\n            const firstMove = { from: { x: 5, y: 7 }, to: { x: 5, y: 6 } };\n            const game = Move.getGameAfterMove(initialGame, firstMove);\n            const from = { x: 5, y: 0 };\n            assert.ok(Game.isMyTurn(game, from));\n        });\n        it('returns true for white piece and white turn', () => {\n            const from = { x: 5, y: 7 };\n            assert.ok(Game.isMyTurn(initialGame, from));\n        });\n        it('returns false for white piece and black turn', () => {\n            const firstMove = { from: { x: 5, y: 7 }, to: { x: 5, y: 6 } };\n            log('initialGame', initialGame);\n            const game = Move.getGameAfterMove(initialGame, firstMove);\n            const from = { x: 7, y: 7 };\n            assert.notOk(Game.isMyTurn(game, from));\n        });\n        it('returns false for black piece and white turn', () => {\n            const from = { x: 5, y: 0 };\n            assert.notOk(Game.isMyTurn(initialGame, from));\n        });\n    });\n});\n//# sourceMappingURL=Game.test.js.map"]}