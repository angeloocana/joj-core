{"version":3,"sources":["../dist-esnext/Game.test.js"],"names":["assert","describe","it","players","white","name","foto","black","game","create","gameBeforeLastMove","getGameAfterMove","from","x","y","to","getGameBeforeLastMove","equal","movements","length","deepEqual","beforeEach","move","throws","cleanGame","getCleanGameToSaveOnServer","ended","blackWin"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;AACAC,SAAS,MAAT,EAAiB,YAAM;AACnBA,aAAS,QAAT,EAAmB,YAAM;AACrBC,WAAG,oBAAH;AACH,KAFD;AAGAD,aAAS,yBAAT,EAAoC,YAAM;AACtCC,WAAG,2BAAH;AACAA,WAAG,gCAAH;AACAA,WAAG,2BAAH;AACAA,WAAG,gCAAH;AACH,KALD;AAMAD,aAAS,UAAT,EAAqB,YAAM;AACvBC,WAAG,uBAAH,EAA4B,YAAM;AAC9B,gBAAMC,UAAU;AACZC,uBAAO,EAAEC,MAAM,QAAR,EAAkBC,MAAM,oBAAxB,EADK;AAEZC,uBAAO,EAAEF,MAAM,MAAR,EAAgBC,MAAM,oBAAtB;AAFK,aAAhB;AAIA,gBAAIE,OAAO,YAAKC,MAAL,CAAY,EAAEN,gBAAF,EAAZ,CAAX;AACA,gBAAMO,qBAAqB,YAAKC,gBAAL,CAAsBH,IAAtB,EAA4B,EAAEI,MAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAR,EAAwBC,IAAI,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX,EAA5B,EAA5B,CAA3B;AACAN,mBAAO,YAAKG,gBAAL,CAAsBD,kBAAtB,EAA0C,EAAEE,MAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EAAR,EAAwBC,IAAI,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX,EAA5B,EAA1C,CAAP;AACAN,mBAAO,YAAKQ,qBAAL,CAA2BR,IAA3B,CAAP;AACAR,mBAAOiB,KAAP,CAAaP,mBAAmBQ,SAAnB,CAA6BC,MAA1C,EAAkDX,KAAKU,SAAL,CAAeC,MAAjE;AACAnB,mBAAOoB,SAAP,CAAiBV,mBAAmBQ,SAApC,EAA+CV,KAAKU,SAApD;AACH,SAXD;AAYH,KAbD;AAcAjB,aAAS,MAAT,EAAiB,YAAM;AACnB,YAAIO,IAAJ;AACAa,mBAAW,YAAM;AACbb,mBAAO,YAAKC,MAAL,CAAY;AACfN,yBAAS;AACLC,2BAAO,EAAEC,MAAM,QAAR,EAAkBC,MAAM,oBAAxB,EADF;AAELC,2BAAO,EAAEF,MAAM,MAAR,EAAgBC,MAAM,oBAAtB;AAFF;AADM,aAAZ,CAAP;AAMH,SAPD;AAQAJ,WAAG,+BAAH,EAAoC,YAAM;AACtC,gBAAMoB,OAAO;AACTV,sBAAM,EAAEC,GAAG,CAAL,EAAQC,GAAG,CAAX,EADG;AAETC,oBAAI,EAAEF,GAAG,CAAL,EAAQC,GAAG,CAAX;AAFK,aAAb;AAIAd,mBAAOuB,MAAP,CAAc,YAAM;AAChBf,uBAAO,YAAKG,gBAAL,CAAsBH,IAAtB,EAA4Bc,IAA5B,CAAP;AACH,aAFD;AAGH,SARD;AASH,KAnBD;AAoBArB,aAAS,4BAAT,EAAuC,YAAM;AACzCC,WAAG,KAAH,EAAU,YAAM;AACZ,gBAAMM,OAAO,YAAKC,MAAL,CAAY;AACrBN,yBAAS;AACLC,2BAAO,EAAEC,MAAM,QAAR,EAAkBC,MAAM,oBAAxB,EADF;AAELC,2BAAO,EAAEF,MAAM,MAAR,EAAgBC,MAAM,oBAAtB;AAFF;AADY,aAAZ,CAAb;AAMA,gBAAMkB,YAAY,YAAKC,0BAAL,CAAgCjB,IAAhC,CAAlB;AACAR,mBAAOiB,KAAP,CAAaT,KAAKkB,KAAlB,EAAyBF,UAAUE,KAAnC;AACA1B,mBAAOoB,SAAP,CAAiBZ,KAAKU,SAAtB,EAAiCM,UAAUN,SAA3C;AACAlB,mBAAOiB,KAAP,CAAaT,KAAKmB,QAAlB,EAA4BH,UAAUG,QAAtC;AACH,SAXD;AAYH,KAbD;AAcH,CA1DD;AA2DA","file":"Game.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Game } from './index';\ndescribe('Game', () => {\n    describe('create', () => {\n        it('creates a new game');\n    });\n    describe('needToValidateMovements', () => {\n        it('when null should validate');\n        it('when undefined should validate');\n        it('when true should validate');\n        it('when false should NOT validate');\n    });\n    describe('backMove', () => {\n        it('backMove offline game', () => {\n            const players = {\n                white: { name: 'Angelo', foto: 'img/black_user.png' },\n                black: { name: 'Gabi', foto: 'img/white_user.png' }\n            };\n            let game = Game.create({ players });\n            const gameBeforeLastMove = Game.getGameAfterMove(game, { from: { x: 2, y: 7 }, to: { x: 2, y: 6 } });\n            game = Game.getGameAfterMove(gameBeforeLastMove, { from: { x: 2, y: 0 }, to: { x: 2, y: 1 } });\n            game = Game.getGameBeforeLastMove(game);\n            assert.equal(gameBeforeLastMove.movements.length, game.movements.length);\n            assert.deepEqual(gameBeforeLastMove.movements, game.movements);\n        });\n    });\n    describe('Move', () => {\n        var game;\n        beforeEach(() => {\n            game = Game.create({\n                players: {\n                    white: { name: 'Angelo', foto: 'img/black_user.png' },\n                    black: { name: 'Gabi', foto: 'img/white_user.png' }\n                }\n            });\n        });\n        it('Block moving to same position', () => {\n            const move = {\n                from: { x: 0, y: 0 },\n                to: { x: 0, y: 0 }\n            };\n            assert.throws(() => {\n                game = Game.getGameAfterMove(game, move);\n            });\n        });\n    });\n    describe('getCleanGameToSaveOnServer', () => {\n        it('map', () => {\n            const game = Game.create({\n                players: {\n                    white: { name: 'Angelo', foto: 'img/black_user.png' },\n                    black: { name: 'Gabi', foto: 'img/white_user.png' }\n                }\n            });\n            const cleanGame = Game.getCleanGameToSaveOnServer(game);\n            assert.equal(game.ended, cleanGame.ended);\n            assert.deepEqual(game.movements, cleanGame.movements);\n            assert.equal(game.blackWin, cleanGame.blackWin);\n        });\n    });\n});\n//# sourceMappingURL=Game.test.js.map"]}