{"version":3,"sources":["../dist-esnext/Game.test.js"],"names":["assert","describe","it","firstMove","from","x","y","to","moveFrom","game","getGameAfterMove","ok","isMyTurn","notOk","score","ended","equal","getPlayerTurn","players","white","black"],"mappings":"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","file":"Game.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { initialGame } from './__testdata__/game.data.test';\nimport { Game, Move } from './index';\ndescribe('Game', () => {\n    describe('create', () => {\n        it('creates a new game');\n    });\n    describe('needToValidateMovements', () => {\n        it('when null should validate');\n        it('when undefined should validate');\n        it('when true should validate');\n        it('when false should NOT validate');\n    });\n    describe('isMyTurn', () => {\n        it('returns true for black piece and black turn', () => {\n            const firstMove = { from: { x: 5, y: 7 }, to: { x: 5, y: 6 } };\n            const moveFrom = { x: 5, y: 0 };\n            const game = Move.getGameAfterMove(initialGame, firstMove);\n            assert.ok(Game.isMyTurn(game, moveFrom));\n        });\n        it('returns true for white piece and white turn', () => {\n            const from = { x: 5, y: 7 };\n            assert.ok(Game.isMyTurn(initialGame, from));\n        });\n        it('returns false for white piece and black turn', () => {\n            const firstMove = { from: { x: 5, y: 7 }, to: { x: 5, y: 6 } };\n            const game = Move.getGameAfterMove(initialGame, firstMove);\n            const from = { x: 7, y: 7 };\n            assert.notOk(Game.isMyTurn(game, from));\n        });\n        it('returns false for black piece and white turn', () => {\n            const from = { x: 5, y: 0 };\n            assert.notOk(Game.isMyTurn(initialGame, from));\n        });\n        it('returns false for ended game', () => {\n            const firstMove = { from: { x: 5, y: 7 }, to: { x: 5, y: 6 } };\n            const game = Move.getGameAfterMove(initialGame, firstMove);\n            const from = { x: 5, y: 0 };\n            // $Fix\n            // I dont know if it is the best way\n            // Are getGameAfterMove supposed to calculate if game is ended???\n            game.score.ended = true;\n            assert.notOk(Game.isMyTurn(game, from));\n        });\n    });\n    describe('getPlayerTurn', () => {\n        it('return white player when white turn', () => {\n            assert.equal(Game.getPlayerTurn(initialGame), initialGame.players.white);\n        });\n        it('return black player when black turn', () => {\n            const firstMove = { from: { x: 5, y: 7 }, to: { x: 5, y: 6 } };\n            const game = Move.getGameAfterMove(initialGame, firstMove);\n            assert.equal(Game.getPlayerTurn(game), game.players.black);\n        });\n    });\n});\n//# sourceMappingURL=Game.test.js.map"]}