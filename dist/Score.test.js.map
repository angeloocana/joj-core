{"version":3,"sources":["../dist-esnext/Score.test.js"],"names":["assert","describe","it","positions","x","y","score","getColorScore","startRow","endRow","equal","preWinnersPoints","winners","notOk","won","ok"],"mappings":"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","file":"Score.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Score } from './index';\ndescribe('Score', () => {\n    describe('getColorScore', () => {\n        describe('for Black', () => {\n            it('return 0', () => {\n                const positions = [\n                    { x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }, { x: 3, y: 0 },\n                    { x: 4, y: 0 }, { x: 5, y: 0 }, { x: 6, y: 0 }, { x: 7, y: 0 }\n                ];\n                const score = Score.getColorScore({ startRow: 0, endRow: 7 }, positions);\n                assert.equal(score.preWinnersPoints, 0, 'preWinnersPoints');\n                assert.equal(score.winners, 0, 'winners');\n                assert.notOk(score.won, 'did NOT won');\n            });\n            it('return 1', () => {\n                const positions = [\n                    { x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 },\n                    { x: 4, y: 4 }, { x: 5, y: 5 }, { x: 6, y: 6 }, { x: 7, y: 7 }\n                ];\n                const score = Score.getColorScore({ startRow: 0, endRow: 7 }, positions);\n                assert.equal(score.preWinnersPoints, 21, 'preWinnersPoints');\n                assert.equal(score.winners, 1, 'winners');\n                assert.notOk(score.won, 'did NOT won');\n            });\n            it('return 2', () => {\n                const positions = [\n                    { x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 },\n                    { x: 4, y: 4 }, { x: 5, y: 5 }, { x: 6, y: 7 }, { x: 7, y: 7 }\n                ];\n                const score = Score.getColorScore({ startRow: 0, endRow: 7 }, positions);\n                assert.equal(score.preWinnersPoints, 15, 'preWinnersPoints');\n                assert.equal(score.winners, 2, 'winners');\n                assert.notOk(score.won, 'did NOT won');\n            });\n            it('return 8', () => {\n                const positions = [\n                    { x: 0, y: 7 }, { x: 1, y: 7 }, { x: 2, y: 7 }, { x: 3, y: 7 },\n                    { x: 4, y: 7 }, { x: 5, y: 7 }, { x: 6, y: 7 }, { x: 7, y: 7 }\n                ];\n                const score = Score.getColorScore({ startRow: 0, endRow: 7 }, positions);\n                assert.equal(score.preWinnersPoints, 0, 'preWinnersPoints');\n                assert.equal(score.winners, 8, 'winners');\n                assert.ok(score.won, 'won');\n            });\n        });\n        describe('for White', () => {\n            it('return 0', () => {\n                const positions = [\n                    { x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }, { x: 3, y: 0 },\n                    { x: 4, y: 0 }, { x: 5, y: 0 }, { x: 6, y: 0 }, { x: 7, y: 0 }\n                ];\n                const score = Score.getColorScore({ startRow: 0, endRow: 7 }, positions);\n                assert.equal(score.preWinnersPoints, 0, 'preWinnersPoints');\n                assert.equal(score.winners, 0, 'winners');\n                assert.notOk(score.won, 'did NOT won');\n            });\n            it('return 1', () => {\n                const positions = [\n                    { x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 },\n                    { x: 4, y: 4 }, { x: 5, y: 5 }, { x: 6, y: 6 }, { x: 7, y: 7 }\n                ];\n                const score = Score.getColorScore({ startRow: 0, endRow: 7 }, positions);\n                assert.equal(score.preWinnersPoints, 21, 'preWinnersPoints');\n                assert.equal(score.winners, 1, 'winners');\n                assert.notOk(score.won, 'did NOT won');\n            });\n            it('return 2', () => {\n                const positions = [\n                    { x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 },\n                    { x: 4, y: 4 }, { x: 5, y: 5 }, { x: 6, y: 7 }, { x: 7, y: 7 }\n                ];\n                const score = Score.getColorScore({ startRow: 0, endRow: 7 }, positions);\n                assert.equal(score.preWinnersPoints, 15, 'preWinnersPoints');\n                assert.equal(score.winners, 2, 'winners');\n                assert.notOk(score.won, 'did NOT won');\n            });\n            it('return 8', () => {\n                const positions = [\n                    { x: 0, y: 7 }, { x: 1, y: 7 }, { x: 2, y: 7 }, { x: 3, y: 7 },\n                    { x: 4, y: 7 }, { x: 5, y: 7 }, { x: 6, y: 7 }, { x: 7, y: 7 }\n                ];\n                const score = Score.getColorScore({ startRow: 0, endRow: 7 }, positions);\n                assert.equal(score.preWinnersPoints, 0, 'preWinnersPoints');\n                assert.equal(score.winners, 8, 'winners');\n                assert.ok(score.won, 'won');\n            });\n        });\n    });\n});\n//# sourceMappingURL=Score.test.js.map"]}