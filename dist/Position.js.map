{"version":3,"sources":["../dist-esnext/Position.js"],"names":["getPositionFromArray","position","x","y","getPositionWhereCanIGoFromArray","isBlack","positions","head","whereCanIGo","tail","map","getPositionsWhereCanIGoFromArray","p","getPositionFromPositions","find","hasSameXY","getXAndY","hasBlackPiece","hasWhitePiece","hasPiece","anyPass","hasNoPiece","compose","not","setPiece","Object","assign","setPieceCurried","curry","setPieceToBlack","setPieceToWhite","setICanGoHere","positionsWhereCanIGo","iCanGoHere","containsXY","p1","p2","isBackGroundBlack","getToSearchOrder","boardSize","getToSearchOrderCurried","getY0Start","boardSizeY","getY0StartCurried","getY0End","getY0EndCurried","printXAndYPosition","printUnicodeBackgroundBlack","printUnicodeBackgroundWhite","printUnicodePosition","some","notContainsXY","getOrderedPositions","getYAs","reduce","ordered","concat","getOrderedPositionsCurried","getOrderedPositionsY0Start","getOrderedPositionsY0StartCurried","getOrderedPositionsY0End","getOrderedPositionsY0EndCurried"],"mappings":"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","file":"Position.js","sourcesContent":["import R from 'ramda';\n/**\n * Get [x,y] and returns {x, y}\n *\n * const position = [5, 7];\n */\nfunction getPositionFromArray(position) {\n    return {\n        x: position[0],\n        y: position[1]\n    };\n}\n/**\n * Gets an array like [[0, 7], [0, 6], [1, 6]],\n * where [[positionX, positionY], ...[[whereCanIGoX, whereCanIGoY]]]\n * then returns IPiece.\n *\n * Used to create clean test data.\n */\nfunction getPositionWhereCanIGoFromArray(isBlack, positions) {\n    const { x, y } = getPositionFromArray(R.head(positions));\n    return {\n        x, y, isBlack,\n        whereCanIGo: R.tail(positions).map(getPositionFromArray)\n    };\n}\n/**\n * Gets an array like [[[0, 7], [0, 6], [1, 6]]],\n * where [[[positionX, positionY], ...[[whereCanIGoX, whereCanIGoY]]]]\n * then returns IPiece[].\n *\n * Used to create clean test data.\n */\nconst getPositionsWhereCanIGoFromArray = (isBlack, positions) => positions.map(p => getPositionWhereCanIGoFromArray(isBlack, p));\n/**\n * Returns a position from an array of positions with equal X an Y.\n */\nconst getPositionFromPositions = (positions, position) => positions.find(p => hasSameXY(p, position));\n/**\n * Takes a position and return only {x, y}.\n */\nfunction getXAndY({ x, y }) {\n    return { x, y };\n}\n/**\n * .isBlack equal true.\n */\nconst hasBlackPiece = (p) => p.isBlack === true;\n/**\n * .isBlack equal false.\n */\nconst hasWhitePiece = (p) => p.isBlack === false;\n/**\n * .isBlack is true or false.\n */\nconst hasPiece = R.anyPass([hasBlackPiece, hasWhitePiece]);\n/**\n * .isBlack is undefined or null.\n */\nconst hasNoPiece = R.compose(R.not, hasPiece);\nconst setPiece = (isBlack, position) => Object.assign({}, position, { isBlack });\nconst setPieceCurried = R.curry(setPiece);\nconst setPieceToBlack = setPieceCurried(true);\nconst setPieceToWhite = setPieceCurried(false);\n/**\n * Takes a position and return a new position with iCanGoHere checked.\n */\nconst setICanGoHere = (positionsWhereCanIGo, position) => Object.assign({\n    iCanGoHere: containsXY(positionsWhereCanIGo, position)\n}, position);\n/**\n * Takes 2 positions and return true when same x and y.\n */\nconst hasSameXY = (p1, p2) => p1.x === p2.x && p1.y === p2.y;\n/**\n * Get the board background color of a position.\n */\nconst isBackGroundBlack = (x, y) => (x % 2 === 0) ? (y % 2 === 0) : (y % 2 !== 0);\n/**\n * Returns the index to store the position in orderedPositions.\n *\n * The order to search is 0, 7, 1, 6, 2, 5, 3, 1.\n *\n * The goal is to fill the corners first.\n */\nfunction getToSearchOrder(boardSize, x) {\n    switch (x) {\n        case 0:\n            return 0;\n        case 1:\n            return 2;\n        case 2:\n            return 4;\n        case 3:\n            return 6;\n        case 4:\n            return 7;\n        case 5:\n            return 5;\n        case 6:\n            return 3;\n        case 7:\n            return 1;\n        default:\n            return null;\n    }\n}\nconst getToSearchOrderCurried = R.curry(getToSearchOrder);\n/**\n * It Inverts white Y position.\n *\n * For 8x8 board Get Y starting from 0 and ending on 7 for both black and white positions.\n */\nconst getY0Start = (boardSizeY, y, isBlack) => isBlack ? y : (boardSizeY - 1) - y;\nconst getY0StartCurried = R.curry(getY0Start);\n/**\n * It Inverts black Y position.\n *\n * For 8x8 board Get Y starting from 7 and ending on 0 for both black and white positions.\n */\nconst getY0End = (boardSizeY, y, isBlack) => isBlack ? (boardSizeY - 1) - y : y;\nconst getY0EndCurried = R.curry(getY0End);\nconst printXAndYPosition = (p) => ` ${p.x},${p.y} |`;\n/**\n * Print unicode position for black background.\n * @param p position\n */\nconst printUnicodeBackgroundBlack = (p) => {\n    if (hasWhitePiece(p))\n        return '\\u{25CF}';\n    else if (hasBlackPiece(p))\n        return '\\u{25CB}';\n    else\n        return ' ';\n};\n/**\n * Print unicode position for white background.\n * @param p position\n */\nconst printUnicodeBackgroundWhite = (p) => {\n    if (hasWhitePiece(p))\n        return '\\u{25D9}';\n    else if (hasBlackPiece(p))\n        return '\\u{25D8}';\n    else\n        return '\\u{2588}';\n};\n/**\n * Print unicode position to print the board in console.\n * @param p position\n */\nconst printUnicodePosition = (p) => isBackGroundBlack(p.x, p.y)\n    ? printUnicodeBackgroundBlack(p)\n    : printUnicodeBackgroundWhite(p);\n/**\n * Checks if an array of positions contains a position.\n */\nconst containsXY = (positions, position) => positions ? positions.some(p => hasSameXY(p, position)) : false;\n/**\n * Checks if an array of positions NOT contains a position.\n */\nconst notContainsXY = R.compose(R.not, containsXY);\n/**\n * Get ordered positions IPosition[Y][positions]\n */\nconst getOrderedPositions = (getYAs, boardSizeY, isBlack, positions) => positions.reduce((ordered, position) => {\n    const y = getYAs(boardSizeY, position.y, isBlack);\n    ordered[y] = (ordered[y] || []).concat(position);\n    return ordered;\n}, []);\nconst getOrderedPositionsCurried = R.curry(getOrderedPositions);\n/**\n * Get ordered positions as black IPosition[Y = 0 -> endRow][positions]\n */\nconst getOrderedPositionsY0Start = getOrderedPositionsCurried(getY0Start);\n/**\n * Get ordered positions as black IPosition[Y = 0 -> endRow][positions]\n */\nconst getOrderedPositionsY0StartCurried = R.curry(getOrderedPositionsY0Start);\n/**\n * Get ordered positions as white IPosition[Y = endRow -> 0][positions]\n */\nconst getOrderedPositionsY0End = getOrderedPositionsCurried(getY0End);\n/**\n * Get ordered positions as white IPosition[Y = endRow -> 0][positions]\n */\nconst getOrderedPositionsY0EndCurried = R.curry(getOrderedPositionsY0End);\nexport { containsXY, isBackGroundBlack, getPositionFromArray, getPositionFromPositions, getPositionWhereCanIGoFromArray, getPositionsWhereCanIGoFromArray, getToSearchOrder, getToSearchOrderCurried, getOrderedPositions, getOrderedPositionsY0Start, getOrderedPositionsY0StartCurried, getOrderedPositionsY0End, getOrderedPositionsY0EndCurried, getOrderedPositionsCurried, getXAndY, getY0Start, getY0StartCurried, getY0End, getY0EndCurried, hasSameXY, hasBlackPiece, hasPiece, hasNoPiece, hasWhitePiece, notContainsXY, printXAndYPosition, printUnicodePosition, setICanGoHere, setPiece, setPieceCurried, setPieceToBlack, setPieceToWhite };\n//# sourceMappingURL=Position.js.map"]}