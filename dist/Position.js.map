{"version":3,"sources":["../dist-esnext/Position.js"],"names":["getPositionFromArray","position","x","y","getXAndY","hasBlackPiece","p","isBlack","hasWhitePiece","hasPiece","anyPass","hasNoPiece","compose","not","hasSameXY","p1","p2","setPiece","Object","assign","setPieceCurried","curry","setPieceToBlack","setPieceToWhite","removePiece","isBackGroundBlack","getToSearchOrder","boardSize","getToSearchOrderCurried","getY0Start","boardSizeY","getY0StartCurried","getY0End","getY0EndCurried","printXAndYPosition","printUnicodePosition","setICanGoHere","positionsWhereCanIGo","iCanGoHere","containsXY","positions","some","notContainsXY","getOrderedPositions","getYAs","reduce","ordered","concat","getOrderedPositionsCurried","getOrderedPositionsY0Start","getOrderedPositionsY0StartCurried","getOrderedPositionsY0End","getOrderedPositionsY0EndCurried"],"mappings":"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","file":"Position.js","sourcesContent":["import R from 'ramda';\n/**\n * Get [x,y] and returns {x, y}\n *\n * const position = [5, 7];\n */\nfunction getPositionFromArray(position) {\n    return {\n        x: position[0],\n        y: position[1]\n    };\n}\n/**\n * Takes a position and return only {x, y}.\n */\nfunction getXAndY({ x, y }) {\n    return { x, y };\n}\nconst hasBlackPiece = (p) => p.isBlack === true;\nconst hasWhitePiece = (p) => p.isBlack === false;\nconst hasPiece = R.anyPass([hasBlackPiece, hasWhitePiece]);\nconst hasNoPiece = R.compose(R.not, hasPiece);\nconst hasSameXY = (p1, p2) => p1.x === p2.x && p1.y === p2.y;\nconst setPiece = (isBlack, position) => Object.assign({}, position, { isBlack });\nconst setPieceCurried = R.curry(setPiece);\nconst setPieceToBlack = setPieceCurried(true);\nconst setPieceToWhite = setPieceCurried(false);\n/**\n * Deletes .isBlack prop from position\n */\nfunction removePiece(position) {\n    position = Object.assign({}, position);\n    delete position.isBlack;\n    return position;\n}\n/**\n * Get the board background color of a position\n */\nconst isBackGroundBlack = (x, y) => (x % 2 === 0) ? (y % 2 === 0) : (y % 2 !== 0);\n/**\n * Returns the index to store the position in orderedPositions\n *\n * The order to search is 0, 7, 1, 6, 2, 5, 3, 1\n *\n * The goal is to fill the corners first\n */\nfunction getToSearchOrder(boardSize, x) {\n    switch (x) {\n        case 0:\n            return 0;\n        case 1:\n            return 2;\n        case 2:\n            return 4;\n        case 3:\n            return 6;\n        case 4:\n            return 7;\n        case 5:\n            return 5;\n        case 6:\n            return 3;\n        case 7:\n            return 1;\n        default:\n            return null;\n    }\n}\nconst getToSearchOrderCurried = R.curry(getToSearchOrder);\n/**\n * It Inverts white Y position.\n *\n * For 8x8 board Get Y starting from 0 and ending on 7 for both black and white positions.\n */\nfunction getY0Start(boardSizeY, y, isBlack) {\n    return isBlack ? y : (boardSizeY - 1) - y;\n}\nconst getY0StartCurried = R.curry(getY0Start);\n/**\n * It Inverts black Y position.\n *\n * For 8x8 board Get Y starting from 7 and ending on 0 for both black and white positions.\n */\nfunction getY0End(boardSizeY, y, isBlack) {\n    return isBlack ? (boardSizeY - 1) - y : y;\n}\nconst getY0EndCurried = R.curry(getY0End);\nfunction printXAndYPosition(position) {\n    return ` ${position.x},${position.y} |`;\n}\nfunction printUnicodePosition(position) {\n    if (isBackGroundBlack(position.x, position.y)) {\n        if (hasWhitePiece(position))\n            return '\\u{25CF}';\n        else if (hasBlackPiece(position))\n            return '\\u{25CB}';\n        else\n            return ' ';\n    }\n    else {\n        if (hasWhitePiece(position))\n            return '\\u{25D9}';\n        else if (hasBlackPiece(position))\n            return '\\u{25D8}';\n        else\n            return '\\u{2588}';\n    }\n}\n/**\n * Takes a position and return a new position with iCanGoHere checked.\n */\nconst setICanGoHere = (positionsWhereCanIGo, position) => Object.assign({\n    iCanGoHere: containsXY(positionsWhereCanIGo, position)\n}, position);\n/**\n * Checks if an array of positions contains a position.\n */\nconst containsXY = (positions, position) => positions.some(p => hasSameXY(p, position));\n/**\n * Checks if an array of positions NOT contains a position.\n */\nconst notContainsXY = R.compose(R.not, containsXY);\n/**\n * Get ordered positions IPosition[Y][positions]\n */\nfunction getOrderedPositions(getYAs, boardSizeY, isBlack, positions) {\n    return positions.reduce((ordered, position) => {\n        const y = getYAs(boardSizeY, position.y, isBlack);\n        ordered[y] = (ordered[y] || []).concat(position);\n        return ordered;\n    }, []);\n}\nconst getOrderedPositionsCurried = R.curry(getOrderedPositions);\n/**\n * Get ordered positions as black IPosition[Y = 0 -> endRow][positions]\n */\nconst getOrderedPositionsY0Start = getOrderedPositionsCurried(getY0Start);\n/**\n * Get ordered positions as black IPosition[Y = 0 -> endRow][positions]\n */\nconst getOrderedPositionsY0StartCurried = R.curry(getOrderedPositionsY0Start);\n/**\n * Get ordered positions as white IPosition[Y = endRow -> 0][positions]\n */\nconst getOrderedPositionsY0End = getOrderedPositionsCurried(getY0End);\n/**\n * Get ordered positions as white IPosition[Y = endRow -> 0][positions]\n */\nconst getOrderedPositionsY0EndCurried = R.curry(getOrderedPositionsY0End);\nexport { containsXY, isBackGroundBlack, getPositionFromArray, getToSearchOrder, getToSearchOrderCurried, getOrderedPositions, getOrderedPositionsY0Start, getOrderedPositionsY0StartCurried, getOrderedPositionsY0End, getOrderedPositionsY0EndCurried, getOrderedPositionsCurried, getXAndY, getY0Start, getY0StartCurried, getY0End, getY0EndCurried, hasSameXY, hasBlackPiece, hasPiece, hasNoPiece, hasWhitePiece, notContainsXY, printXAndYPosition, printUnicodePosition, removePiece, setICanGoHere, setPiece, setPieceToBlack, setPieceToWhite };\n//# sourceMappingURL=Position.js.map"]}