{"version":3,"sources":["../dist-esnext/Position.js"],"names":["getCleanPosition","x","y","isBlack","getXAndY","hasBlackPiece","propEq","hasWhitePiece","hasPiece","anyPass","hasNoPiece","compose","not","hasSamePiece","p1","p2","hasSamePosition","hasSamePieceAndPosition","allPass","setPiece","position","setPieceCurried","curry","setPieceToBlack","setPieceToWhite","removePiece","isBackGroundBlack","getToSearchOrder","boardSize","getToSearchOrderCurried","getYAsBlack","boardSizeY","getYAsBlackCurried","getYAsWhite","getYAsWhiteCurried","printXAndYPosition","printUnicodePosition"],"mappings":"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","file":"Position.js","sourcesContent":["import R from 'ramda';\n/**\n * Takes a position and return only {x, y, isBlack}.\n *\n * Remove unnecessary props like lastMovement, lastPosition,\n * jumpingBlackPiece, jumps, iCanGoHere, lastMove, lastMoveJump, etc.\n */\nfunction getCleanPosition({ x, y, isBlack }) {\n    return { x, y, isBlack };\n}\n/**\n * Takes a position and return only {x, y}.\n */\nfunction getXAndY({ x, y }) {\n    return { x, y };\n}\nconst hasBlackPiece = R.propEq('isBlack', true);\nconst hasWhitePiece = R.propEq('isBlack', false);\nconst hasPiece = R.anyPass([hasBlackPiece, hasWhitePiece]);\nconst hasNoPiece = R.compose(R.not, hasPiece);\nfunction hasSamePiece(p1, p2) {\n    return p1.isBlack === p2.isBlack;\n}\nfunction hasSamePosition(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\nconst hasSamePieceAndPosition = R.allPass([hasSamePiece, hasSamePosition]);\nfunction setPiece(isBlack, position) {\n    position.isBlack = isBlack;\n    return position;\n}\nconst setPieceCurried = R.curry(setPiece);\nconst setPieceToBlack = setPieceCurried(true);\nconst setPieceToWhite = setPieceCurried(false);\n/**\n * Deletes .isBlack prop from position\n */\nfunction removePiece(position) {\n    delete position.isBlack;\n    return position;\n}\nfunction isBackGroundBlack(x, y) {\n    if (x % 2 === 0) {\n        if (y % 2 === 0)\n            return true;\n        else\n            return false;\n    }\n    else {\n        if (y % 2 === 0)\n            return false;\n        else\n            return true;\n    }\n}\n/**\n * Returns the index to store the position in orderedPositions\n *\n * The order to search is 0, 7, 1, 6, 2, 5, 3, 1\n *\n * The goal is to fill the corners first\n */\nfunction getToSearchOrder(boardSize, x) {\n    switch (x) {\n        case 0:\n            return 0;\n        case 1:\n            return 2;\n        case 2:\n            return 4;\n        case 3:\n            return 6;\n        case 4:\n            return 7;\n        case 5:\n            return 5;\n        case 6:\n            return 3;\n        case 7:\n            return 1;\n        default:\n            return null;\n    }\n}\nconst getToSearchOrderCurried = R.curry(getToSearchOrder);\n/**\n * It Inverts white Y position.\n *\n * For 8x8 board Get Y starting from 0 and ending on 7 for both black and white pieces.\n */\nfunction getYAsBlack(boardSizeY, y, isBlack) {\n    return isBlack ? y : (boardSizeY - 1) - y;\n}\nconst getYAsBlackCurried = R.curry(getYAsBlack);\n/**\n * It Inverts black Y position.\n *\n * For 8x8 board Get Y starting from 7 and ending on 0 for both black and white pieces.\n */\nfunction getYAsWhite(boardSizeY, y, isBlack) {\n    return isBlack ? (boardSizeY - 1) - y : y;\n}\nconst getYAsWhiteCurried = R.curry(getYAsWhite);\nfunction printXAndYPosition(position) {\n    return ` ${position.x},${position.y} |`;\n}\nfunction printUnicodePosition(position) {\n    if (isBackGroundBlack(position.x, position.y)) {\n        if (hasWhitePiece(position))\n            return '\\u{25CF}';\n        else if (hasBlackPiece(position))\n            return '\\u{25CB}';\n        else\n            return ' ';\n    }\n    else {\n        if (hasWhitePiece(position))\n            return '\\u{25D9}';\n        else if (hasBlackPiece(position))\n            return '\\u{25D8}';\n        else\n            return '\\u{2588}';\n    }\n}\nexport { isBackGroundBlack, getCleanPosition, getToSearchOrder, getToSearchOrderCurried, getXAndY, getYAsBlack, getYAsBlackCurried, getYAsWhite, getYAsWhiteCurried, hasSamePiece, hasSamePosition, hasSamePieceAndPosition, hasBlackPiece, hasPiece, hasNoPiece, hasWhitePiece, printXAndYPosition, printUnicodePosition, removePiece, setPiece, setPieceToBlack, setPieceToWhite };\n//# sourceMappingURL=Position.js.map"]}