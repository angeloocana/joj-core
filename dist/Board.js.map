{"version":3,"sources":["../dist-esnext/Board.js"],"names":["Position","Positions","defaultBoardSize","x","y","mapBoard","board","func","map","col","position","getColorStartEndRow","boardEndRow","isBlack","startRow","endRow","getBoardConf","boardSize","size","white","black","defaultBoardConf","isBackGroundBlack","getToSearchOrder","getY0Start7End","getY7Start0End","_getInitialBoard","memoize","boardConf","blackPieces","whitePieces","push","getInitialBoard","getPosition","e","Error","setPosition","setPieceOnBoard","setPiece","removePieceOnBoard","removePiece","clean","iCanGoHere","lastMove","lastMoveJump","getPositionsWhereCanIGo","from","allNearPositions","getNearPositions","undefined","positions","orderedPositions","i","length","nearPosition","hasNoPiece","jumpPosition","getJumpPosition","jumps","whereCanIJump","onlyEmpty","add","plusX","plusY","newPosition","hasPosition","toJumpPosition","hasPiece","jumpfrom","nearFilledPositions","forEach","nearFilledPosition","notContains","lastPosition","jumpingBlackPiece","setWhereCanIGo","blackPiece","contains","printUnicode","txt","hasWhitePiece","hasBlackPiece","getBoardAfterMove","move","to","isWhiteHome","isBlackHome"],"mappings":"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","file":"Board.js","sourcesContent":["import R from 'ramda';\nimport * as Position from './Position';\nimport * as Positions from './Positions';\nimport log from 'ptz-log';\nconst defaultBoardSize = {\n    x: 8,\n    y: 8\n};\nfunction mapBoard(board, func) {\n    return board.map(col => col.map(position => func(position)));\n}\nfunction getColorStartEndRow(boardEndRow, isBlack) {\n    return {\n        startRow: isBlack ? 0 : boardEndRow,\n        endRow: isBlack ? boardEndRow : 0\n    };\n}\nfunction getBoardConf(boardSize) {\n    const endRow = boardSize.y - 1;\n    return {\n        size: boardSize,\n        endRow,\n        white: getColorStartEndRow(endRow, false),\n        black: getColorStartEndRow(endRow, true)\n    };\n}\nconst defaultBoardConf = getBoardConf(defaultBoardSize);\nfunction isBackGroundBlack(x, y) {\n    if (x % 2 === 0) {\n        if (y % 2 === 0)\n            return true;\n        else\n            return false;\n    }\n    else {\n        if (y % 2 === 0)\n            return false;\n        else\n            return true;\n    }\n}\n/**\n * Returns the index to store the position in orderedPositions\n *\n * The order to search is 0, 7, 1, 6, 2, 5, 3, 1\n *\n * The goal is to fill the corners first\n */\nfunction getToSearchOrder(x) {\n    switch (x) {\n        case 0:\n            return 0;\n        case 1:\n            return 2;\n        case 2:\n            return 4;\n        case 3:\n            return 6;\n        case 4:\n            return 7;\n        case 5:\n            return 5;\n        case 6:\n            return 3;\n        case 7:\n            return 1;\n        default:\n            return null;\n    }\n}\n/**\n * Get Y starting from 0 and ending on 7 for black and white pieces\n */\nfunction getY0Start7End(y, isBlack) {\n    if (isBlack)\n        return y;\n    switch (y) {\n        case 0:\n            return 7;\n        case 1:\n            return 6;\n        case 2:\n            return 5;\n        case 3:\n            return 4;\n        case 4:\n            return 3;\n        case 5:\n            return 2;\n        case 6:\n            return 1;\n        case 7:\n            return 0;\n        default:\n            return null;\n    }\n}\n/**\n * Get Y starting from 7 and ending on 0 for black and white pieces\n */\nfunction getY7Start0End(y, isBlack) {\n    if (!isBlack)\n        return y;\n    switch (y) {\n        case 0:\n            return 7;\n        case 1:\n            return 6;\n        case 2:\n            return 5;\n        case 3:\n            return 4;\n        case 4:\n            return 3;\n        case 5:\n            return 2;\n        case 6:\n            return 1;\n        case 7:\n            return 0;\n        default:\n            return null;\n    }\n}\n// tslint:disable-next-line:variable-name\nconst _getInitialBoard = R.memoize((boardConf) => {\n    log('_getInitialBoard for', boardConf);\n    const board = [], blackPieces = [], whitePieces = [];\n    for (let x = 0; x < boardConf.size.x; x++) {\n        for (let y = 0; y < boardConf.size.y; y++) {\n            if (!board[x])\n                board[x] = [];\n            const position = { x, y };\n            if (y === 0) {\n                position.isBlack = true;\n                blackPieces.push({ position });\n            }\n            if (y === boardConf.endRow) {\n                position.isBlack = false;\n                whitePieces.push({ position });\n            }\n            board[x][y] = position;\n        }\n    }\n    return {\n        board,\n        blackPieces,\n        whitePieces\n    };\n});\nfunction getInitialBoard(boardConf) {\n    return _getInitialBoard(boardConf);\n}\nfunction getPosition(board, position) {\n    try {\n        return board[position.x][position.y];\n    }\n    catch (e) {\n        log('Error getting position:', position, ' \\n board:', board);\n        throw new Error('Error getting position');\n    }\n}\nfunction setPosition(board, position) {\n    try {\n        board[position.x][position.y] = position;\n        return board;\n    }\n    catch (e) {\n        log('Error getting position: ', position);\n        throw new Error('Error getting position');\n    }\n}\nfunction setPieceOnBoard(board, position, isBlack) {\n    return setPosition(board, Position.setPiece(position, isBlack));\n}\nfunction removePieceOnBoard(board, position) {\n    return setPosition(board, Position.removePiece(position));\n}\nfunction clean(board) {\n    return mapBoard(board, position => {\n        position.iCanGoHere = false;\n        position.lastMove = false;\n        position.lastMoveJump = false;\n        return position;\n    });\n}\nfunction getPositionsWhereCanIGo(board, from, isBlack) {\n    if (!from)\n        return null;\n    const allNearPositions = getNearPositions(board, from, undefined);\n    const positions = [];\n    const orderedPositions = [];\n    for (let i = 0; i < allNearPositions.length; i++) {\n        const nearPosition = allNearPositions[i];\n        if (Position.hasNoPiece(nearPosition)) {\n            positions.push(nearPosition);\n            const y = getY0Start7End(nearPosition.y, isBlack);\n            if (!orderedPositions[y])\n                orderedPositions[y] = [];\n            orderedPositions[y][getToSearchOrder(nearPosition.x)] = nearPosition;\n        }\n        else {\n            const jumpPosition = getJumpPosition(board, from, nearPosition);\n            if (jumpPosition) {\n                jumpPosition.jumps = 1;\n                positions.push(jumpPosition);\n                const y = getY0Start7End(jumpPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][getToSearchOrder(jumpPosition.x)] = jumpPosition;\n                whereCanIJump(board, jumpPosition, positions, orderedPositions, isBlack);\n            }\n        }\n    }\n    return {\n        positions,\n        orderedPositions\n    };\n}\nfunction getNearPositions(board, position, onlyEmpty) {\n    const positions = [];\n    function add(plusX, plusY) {\n        var newPosition = {\n            x: position.x + plusX,\n            y: position.y + plusY\n        };\n        if (!hasPosition(board, newPosition))\n            return;\n        newPosition = getPosition(board, newPosition);\n        if (typeof onlyEmpty !== 'undefined') {\n            if (onlyEmpty === Position.hasNoPiece(newPosition))\n                positions.push(newPosition);\n        }\n        else\n            positions.push(newPosition);\n    }\n    add(-1, -1);\n    add(0, -1);\n    add(+1, -1);\n    add(-1, 0);\n    add(+1, 0);\n    add(-1, +1);\n    add(0, +1);\n    add(+1, +1);\n    return positions;\n}\nfunction getJumpPosition(board, from, toJumpPosition) {\n    var jumpPosition = { x: 0, y: 0 };\n    if (from.x < toJumpPosition.x)\n        jumpPosition.x = toJumpPosition.x + 1;\n    else if (from.x > toJumpPosition.x)\n        jumpPosition.x = toJumpPosition.x - 1;\n    else\n        jumpPosition.x = toJumpPosition.x;\n    if (from.y < toJumpPosition.y)\n        jumpPosition.y = toJumpPosition.y + 1;\n    else if (from.y > toJumpPosition.y)\n        jumpPosition.y = toJumpPosition.y - 1;\n    else\n        jumpPosition.y = toJumpPosition.y;\n    if (!hasPosition(board, jumpPosition)) {\n        return;\n    }\n    jumpPosition = getPosition(board, jumpPosition);\n    if (Position.hasPiece(jumpPosition)) {\n        return;\n    }\n    return jumpPosition;\n}\n// tslint:disable-next-line:max-line-length\nfunction whereCanIJump(board, jumpfrom, positions, orderedPositions, isBlack) {\n    const nearFilledPositions = getNearPositions(board, jumpfrom, false);\n    nearFilledPositions.forEach(nearFilledPosition => {\n        const jumpPosition = getJumpPosition(board, jumpfrom, nearFilledPosition);\n        if (jumpPosition) {\n            if (Positions.notContains(positions, jumpPosition)) {\n                jumpPosition.lastPosition = jumpfrom;\n                jumpPosition.jumpingBlackPiece = nearFilledPosition.isBlack;\n                jumpPosition.jumps = jumpfrom.jumps ? jumpfrom.jumps++ : 2;\n                positions.push(jumpPosition);\n                const y = getY0Start7End(jumpPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][getToSearchOrder(jumpPosition.x)] = jumpPosition;\n                whereCanIJump(board, jumpPosition, positions, orderedPositions, isBlack);\n            }\n        }\n    });\n}\nfunction setWhereCanIGo(board, from, blackPiece) {\n    const positions = getPositionsWhereCanIGo(board, from, blackPiece).positions;\n    return mapBoard(board, position => {\n        position.iCanGoHere = Positions.contains(positions, position);\n        return position;\n    });\n}\nfunction printUnicode(board) {\n    var txt = '';\n    for (var y = 0; y < board.length; y++) {\n        for (var x = 0; x < board[y].length; x++) {\n            const position = board[x][y];\n            if (isBackGroundBlack(x, y)) {\n                if (Position.hasWhitePiece(position))\n                    txt += '\\u{25CF}';\n                else if (Position.hasBlackPiece(position))\n                    txt += '\\u{25CB}';\n                else\n                    txt += ' ';\n            }\n            else {\n                if (Position.hasWhitePiece(position))\n                    txt += '\\u{25D9}';\n                else if (Position.hasBlackPiece(position))\n                    txt += '\\u{25D8}';\n                else\n                    txt += '\\u{2588}';\n            }\n        }\n        txt += '\\n';\n    }\n    return txt;\n}\nfunction getBoardAfterMove(board, move) {\n    move.to.lastMove = true;\n    move.from.lastMove = true;\n    board = setPieceOnBoard(board, move.to, Position.hasBlackPiece(move.from));\n    board = removePieceOnBoard(board, move.from);\n    let jumpPosition = move.to.lastPosition;\n    while (jumpPosition) {\n        getPosition(board, jumpPosition).lastMoveJump = true;\n        jumpPosition = jumpPosition.lastPosition;\n    }\n    return board;\n}\nfunction hasPosition(board, position) {\n    if (!position || position.x < 0 || position.y < 0)\n        return false;\n    return board.length > position.x && board[position.x].length > position.y;\n}\nfunction isWhiteHome(position, boardConf) {\n    if (position.y === boardConf.size.y - 1)\n        return true;\n}\nfunction isBlackHome(position) {\n    if (position.y === 0)\n        return true;\n}\nexport { defaultBoardSize, defaultBoardConf, getBoardAfterMove, clean, getInitialBoard, getToSearchOrder, getBoardConf, getColorStartEndRow, getJumpPosition, getNearPositions, getPosition, getPositionsWhereCanIGo, getY0Start7End, getY7Start0End, isBackGroundBlack, isBlackHome, isWhiteHome, printUnicode, whereCanIJump, setPosition, setWhereCanIGo, hasPosition };\n//# sourceMappingURL=Board.js.map"]}