{"version":3,"sources":["../dist-esnext/Board.js"],"names":["Position","defaultBoardSize","x","y","hasPositionByBoardSize","boardSize","position","hasPosition","board","getBoardSize","mapBoard","func","map","col","p","getStartEndRow","boardEndRow","isBlack","startRow","endRow","getStartEndRowsFromBoardSize","white","black","getStartEndRows","compose","_getInitialBoard","memoize","getInitialBoard","getPosition","e","Error","setPosition","hasSameXY","setPieceOnBoard","setPiece","removePieceOnBoard","removePiece","getCleanBoard","getCleanPosition","getBoardSizeX","length","getBoardSizeY","printBoard","printPosition","reduce","txtRow","txt","printBoardCurried","curry","printUnicodeBoard","printUnicodePosition","printXAndYBoard","printXAndYPosition","getPositionsWhereCanIGo","from","allNearPositions","getNearPositions","positions","orderedPositions","i","nearPosition","hasNoPiece","push","getY0Start","getToSearchOrder","jumpPosition","getJumpPosition","jumps","whereCanIJump","getAllNearPositions","toAdd","_getNearPositions","xy","filter","getXAndY","getEmptyNearPositions","getNotEmptyNearPositions","hasPiece","toJumpPosition","jumpFrom","nearFilledPositions","forEach","nearFilledPosition","notContainsXY","lastPosition","jumpingBlackPiece","getBoardWhereCanIGo","setICanGoHere","getPiecesFromBoard","initialPieces","piecesRow","row","pieces","hasBlackPiece","concat","hasWhitePiece"],"mappings":"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","file":"Board.js","sourcesContent":["import R from 'ramda';\nimport * as Position from './Position';\nimport log from 'ptz-log';\n/**\n * Default 8x8 board size\n */\nconst defaultBoardSize = { x: 8, y: 8 };\n/**\n * Checks if position exists in this board size\n */\nconst hasPositionByBoardSize = (boardSize, position) => position\n    && position.x >= 0 && position.y >= 0\n    && boardSize.y > position.y && boardSize.x > position.x;\n/**\n * Check if position exists on board\n */\nconst hasPosition = (board, position) => hasPositionByBoardSize(getBoardSize(board), position);\n/**\n * Map some function in all board positions and return a new board\n */\nconst mapBoard = (board, func) => board.map(col => col.map(p => func(p)));\n/**\n * Get START and END rows\n *\n * returns { startRow, endRow }\n */\nfunction getStartEndRow(boardEndRow, isBlack) {\n    return {\n        startRow: isBlack ? 0 : boardEndRow,\n        endRow: isBlack ? boardEndRow : 0\n    };\n}\n/**\n * Takes a boardSize and return START and END rows for WHITE and BLACK.\n *\n * returns { white:{startRow, endRow}, black:{startRow, endRow} }\n */\nfunction getStartEndRowsFromBoardSize(boardSize) {\n    const endRow = boardSize.y - 1;\n    return {\n        white: getStartEndRow(endRow, false),\n        black: getStartEndRow(endRow, true)\n    };\n}\n/**\n * Takes a board and return START and END rows for WHITE and BLACK.\n *\n * returns { white:{startRow, endRow}, black:{startRow, endRow} }\n */\nconst getStartEndRows = R.compose(getStartEndRowsFromBoardSize, getBoardSize);\n/**\n * Get cached initial board, using memoize from ramda\n *\n * The _getInitialBoard returns :Function Type,\n * that's why we created getInitialBoard witch returns :IGetInitialBoardResult\n * in order to reduce type errors.\n */\n// tslint:disable-next-line:variable-name\nconst _getInitialBoard = R.memoize((boardSize) => {\n    // Do NOT remove the log below. We use it to check if cache works and this code run once.\n    log('--> You MUST see this msg only once, otherwise memoize is not working <-- \\n _getInitialBoard for', boardSize);\n    const endRow = boardSize.y - 1;\n    const board = [];\n    for (let x = 0; x < boardSize.x; x++) {\n        for (let y = 0; y < boardSize.y; y++) {\n            if (!board[y])\n                board[y] = [];\n            const position = { x, y };\n            if (y === 0)\n                position.isBlack = true;\n            if (y === endRow)\n                position.isBlack = false;\n            board[y][x] = position;\n        }\n    }\n    return board;\n});\n/**\n * Get cached initial board, using memoize from ramda\n */\nfunction getInitialBoard(boardSize) {\n    return _getInitialBoard(boardSize);\n}\nfunction getPosition(board, position) {\n    try {\n        return board[position.y][position.x];\n    }\n    catch (e) {\n        throw new Error('Error getting position');\n    }\n}\nconst setPosition = (board, position) => mapBoard(board, p => Position.hasSameXY(p, position) ? position : p);\nconst setPieceOnBoard = (board, position, isBlack) => setPosition(board, Position.setPiece(isBlack, position));\nconst removePieceOnBoard = (board, position) => setPosition(board, Position.removePiece(position));\nconst getCleanBoard = (board) => mapBoard(board, Position.getCleanPosition);\n/**\n * Take a board: I.IPosition[][] an return the number of rows(X)\n */\nconst getBoardSizeX = (board) => board[0].length;\n/**\n * Take a board: I.IPosition[][] an return the number of rows(Y)\n */\nconst getBoardSizeY = (board) => board.length;\n/**\n * Take a board: I.IPosition[][] an return the number of columns and rows {x, y}\n */\nfunction getBoardSize(board) {\n    return {\n        x: getBoardSizeX(board),\n        y: getBoardSizeY(board)\n    };\n}\n/**\n * Takes a function to printPosition and print board.\n */\nfunction printBoard(printPosition, board) {\n    return board.reduce((txtRow, col) => {\n        return col.reduce((txt, position) => {\n            return txt + printPosition(position);\n        }, txtRow) + '\\n';\n    }, '');\n}\nconst printBoardCurried = R.curry(printBoard);\n/**\n * Get board in a nice format to print it on console\n */\nconst printUnicodeBoard = printBoardCurried(Position.printUnicodePosition);\n/**\n * Prints only X and Y positions of a board.\n */\nconst printXAndYBoard = printBoardCurried(Position.printXAndYPosition);\nfunction getPositionsWhereCanIGo(board, from, isBlack) {\n    if (!from)\n        return null;\n    const allNearPositions = getNearPositions(board, from);\n    const positions = [];\n    const orderedPositions = [];\n    for (let i = 0; i < allNearPositions.length; i++) {\n        const nearPosition = allNearPositions[i];\n        if (Position.hasNoPiece(nearPosition)) {\n            positions.push(nearPosition);\n            const y = Position.getY0Start(getBoardSizeY(board), nearPosition.y, isBlack);\n            if (!orderedPositions[y])\n                orderedPositions[y] = [];\n            orderedPositions[y][Position.getToSearchOrder(getBoardSize(board), nearPosition.x)] = nearPosition;\n        }\n        else {\n            const jumpPosition = getJumpPosition(board, from, nearPosition);\n            if (jumpPosition) {\n                jumpPosition.jumps = 1;\n                positions.push(jumpPosition);\n                const y = Position.getY0Start(getBoardSizeY(board), jumpPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][Position.getToSearchOrder(getBoardSize(board), jumpPosition.x)] = jumpPosition;\n                whereCanIJump(board, jumpPosition, positions, orderedPositions, isBlack);\n            }\n        }\n    }\n    return {\n        positions,\n        orderedPositions\n    };\n}\n/**\n * Get all valid and invalid near positions.\n */\nfunction getAllNearPositions(position) {\n    return [\n        [-1, -1],\n        [0, -1],\n        [1, -1],\n        [-1, 0],\n        [1, 0],\n        [-1, 1],\n        [0, 1],\n        [1, 1]\n    ].map(toAdd => {\n        return {\n            x: position.x + toAdd[0],\n            y: position.y + toAdd[1]\n        };\n    });\n}\n/**\n * Get near positions and CACHES it for each boardSize\n */\n// tslint:disable-next-line:variable-name\nconst _getNearPositions = R.memoize((boardSize, xy) => getAllNearPositions(xy)\n    .filter(p => hasPositionByBoardSize(boardSize, p)));\n/**\n * Get near positions from the given board instance.\n */\nfunction getNearPositions(board, position) {\n    return _getNearPositions(getBoardSize(board), Position.getXAndY(position))\n        .map(p => getPosition(board, p));\n}\n/**\n * Get empty near positions\n */\nconst getEmptyNearPositions = (board, position) => getNearPositions(board, position)\n    .filter(p => Position.hasNoPiece(p));\n/**\n * Get not empty near positions\n */\nconst getNotEmptyNearPositions = (board, position) => getNearPositions(board, position)\n    .filter(p => Position.hasPiece(p));\nfunction getJumpPosition(board, from, toJumpPosition) {\n    var jumpPosition = { x: 0, y: 0 };\n    if (from.x < toJumpPosition.x)\n        jumpPosition.x = toJumpPosition.x + 1;\n    else if (from.x > toJumpPosition.x)\n        jumpPosition.x = toJumpPosition.x - 1;\n    else\n        jumpPosition.x = toJumpPosition.x;\n    if (from.y < toJumpPosition.y)\n        jumpPosition.y = toJumpPosition.y + 1;\n    else if (from.y > toJumpPosition.y)\n        jumpPosition.y = toJumpPosition.y - 1;\n    else\n        jumpPosition.y = toJumpPosition.y;\n    if (!hasPosition(board, jumpPosition)) {\n        return;\n    }\n    jumpPosition = getPosition(board, jumpPosition);\n    if (Position.hasPiece(jumpPosition)) {\n        return;\n    }\n    return jumpPosition;\n}\n// tslint:disable-next-line:max-line-length\nfunction whereCanIJump(board, jumpFrom, positions, orderedPositions, isBlack) {\n    const nearFilledPositions = getNotEmptyNearPositions(board, jumpFrom);\n    nearFilledPositions.forEach(nearFilledPosition => {\n        const jumpPosition = getJumpPosition(board, jumpFrom, nearFilledPosition);\n        if (jumpPosition) {\n            if (Position.notContainsXY(positions, jumpPosition)) {\n                jumpPosition.lastPosition = jumpFrom;\n                jumpPosition.jumpingBlackPiece = nearFilledPosition.isBlack;\n                jumpPosition.jumps = jumpFrom.jumps ? jumpFrom.jumps++ : 2;\n                positions.push(jumpPosition);\n                const y = Position.getY0Start(getBoardSizeY(board), jumpPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][Position.getToSearchOrder(getBoardSize(board), jumpPosition.x)] = jumpPosition;\n                whereCanIJump(board, jumpPosition, positions, orderedPositions, isBlack);\n            }\n        }\n    });\n}\n/**\n * Get board with checked where can I go positions\n */\nfunction getBoardWhereCanIGo(board, from, isBlack) {\n    const { positions } = getPositionsWhereCanIGo(board, from, isBlack);\n    return mapBoard(board, position => Position.setICanGoHere(positions, position));\n}\n/**\n * Get Pieces from board\n *\n * returns { white: [{x,y}], black: [{x,y}] }\n */\nfunction getPiecesFromBoard(board) {\n    const initialPieces = {\n        white: [],\n        black: []\n    };\n    return board.reduce((piecesRow, row) => {\n        return row.reduce((pieces, position) => {\n            if (Position.hasBlackPiece(position))\n                pieces.black = pieces.black.concat(position);\n            else if (Position.hasWhitePiece(position))\n                pieces.white = pieces.white.concat(position);\n            return pieces;\n        }, piecesRow);\n    }, initialPieces);\n}\nexport { _getInitialBoard, _getNearPositions, defaultBoardSize, getCleanBoard, getInitialBoard, getBoardWhereCanIGo, getStartEndRow, getStartEndRows, getEmptyNearPositions, getJumpPosition, getNearPositions, getNotEmptyNearPositions, getPosition, getPositionsWhereCanIGo, getPiecesFromBoard, printBoard, printBoardCurried, printUnicodeBoard, printXAndYBoard, whereCanIJump, setPieceOnBoard, setPosition, removePieceOnBoard, hasPosition, hasPositionByBoardSize };\n//# sourceMappingURL=Board.js.map"]}