{"version":3,"sources":["../dist-esnext/Board.js"],"names":["Position","defaultBoardSize","x","y","hasPositionByBoardSize","boardSize","p","hasPosition","board","position","getBoardSize","mapBoard","func","map","col","getStartEndRow","boardEndRow","isBlack","startRow","endRow","getStartEndRowsFromBoardSize","white","black","getStartEndRows","compose","createCols","cols","concat","createRows","rows","_getCleanBoard","memoize","getCleanBoard","getBoardWithPieces","pieces","piece","getPositionFromPositions","getStartWhiteBlack","whiteY","addStartPieces","positions","getStartPieces","_getInitialBoard","getInitialBoard","getPosition","e","Error","getBoardSizeX","length","getBoardSizeY","printBoard","curry","printPosition","reduce","txtRow","txt","printUnicodeBoard","printUnicodePosition","printXAndYBoard","printXAndYPosition","whereCanIJump","from","nearPieces","getNotEmptyNearPositions","accPositions","nearPiece","jumpTo","getJumpPosition","containsXY","jumpingBlackPiece","jumps","getPositionsWhereCanIGo","allNearPositions","getNearPositions","nearPosition","hasNoPiece","getPiecesWhereCanIGo","whereCanIGo","getAllNearPositions","toAdd","_getNearPositions","xy","filter","getXAndY","getEmptyNearPositions","hasPiece","getJump","toJump","getJumpXY","jumpXY","jumpPosition","getBoardWhereCanIGo","setICanGoHere","getPiecesFromBoard","initialPieces","piecesRow","row","hasBlackPiece","hasWhitePiece"],"mappings":"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","file":"Board.js","sourcesContent":["import R from 'ramda';\nimport * as Position from './Position';\n/**\n * Default 8x8 board size\n */\nconst defaultBoardSize = { x: 8, y: 8 };\n/**\n * Checks if position exists in this board size\n */\nconst hasPositionByBoardSize = (boardSize, p) => p\n    && p.x >= 0 && p.y >= 0\n    && boardSize.y > p.y && boardSize.x > p.x;\n/**\n * Check if position exists on board\n */\nconst hasPosition = (board, position) => hasPositionByBoardSize(getBoardSize(board), position);\n/**\n * Map some function in all board positions and return a new board\n */\nconst mapBoard = (board, func) => board.map(col => col.map(p => func(p)));\n/**\n * Get START and END rows\n *\n * returns { startRow, endRow }\n */\nfunction getStartEndRow(boardEndRow, isBlack) {\n    return {\n        startRow: isBlack ? 0 : boardEndRow,\n        endRow: isBlack ? boardEndRow : 0\n    };\n}\n/**\n * Takes a boardSize and return START and END rows for WHITE and BLACK.\n *\n * returns { white:{startRow, endRow}, black:{startRow, endRow} }\n */\nfunction getStartEndRowsFromBoardSize(boardSize) {\n    const endRow = boardSize.y - 1;\n    return {\n        white: getStartEndRow(endRow, false),\n        black: getStartEndRow(endRow, true)\n    };\n}\n/**\n * Takes a board and return START and END rows for WHITE and BLACK.\n *\n * returns { white:{startRow, endRow}, black:{startRow, endRow} }\n */\nconst getStartEndRows = R.compose(getStartEndRowsFromBoardSize, getBoardSize);\n/**\n * Create cols recursively\n */\nconst createCols = (x, y, cols) => x < 0 ? cols : createCols(x - 1, y, R.concat([{ x, y }], cols || []));\n/**\n * Create rows recursively\n */\nconst createRows = (x, y, rows) => y < 0 ? rows : createRows(x, y - 1, R.concat([createCols(x, y)], rows || []));\n/**\n * Get cached clean board, using memoize from ramda\n *\n * The _getCleanBoard returns :Function Type,\n * that's why we created getCleanBoard witch returns :IPosition[y][x]\n * in order to reduce type errors.\n */\n// tslint:disable-next-line:variable-name\nconst _getCleanBoard = R.memoize((boardSize) => createRows(boardSize.x - 1, boardSize.y - 1));\n/**\n * Get cached clean board, using memoize from ramda.\n */\nfunction getCleanBoard(boardSize) {\n    return _getCleanBoard(boardSize);\n}\n/**\n * Takes a board and return a new board with pieces.\n */\nconst getBoardWithPieces = (board, pieces) => mapBoard(board, p => {\n    const { x, y } = p;\n    const piece = Position.getPositionFromPositions(pieces, p);\n    if (piece)\n        return { x, y, isBlack: piece.isBlack };\n    else\n        return { x, y };\n});\n/**\n * Get start white and black pieces.\n */\nconst getStartWhiteBlack = (x, whiteY) => [\n    { x, y: 0, isBlack: true },\n    { x, y: whiteY, isBlack: false }\n];\n/**\n * Add start pieces recursively\n */\nconst addStartPieces = (x, whiteY, positions) => x < 0\n    ? positions\n    : addStartPieces(x - 1, whiteY, positions.concat(getStartWhiteBlack(x, whiteY)));\n/**\n * Get start white and black pieces\n */\nfunction getStartPieces(boardSize) {\n    return addStartPieces(boardSize.x - 1, boardSize.y - 1, []);\n}\n/**\n * Get cached initial board, using memoize from ramda\n *\n * The _getInitialBoard returns :Function Type,\n * that's why we created getInitialBoard witch returns :IPosition[y][x]\n * in order to reduce type errors.\n */\n// tslint:disable-next-line:variable-name\nconst _getInitialBoard = R.memoize((boardSize) => getBoardWithPieces(getCleanBoard(boardSize), getStartPieces(boardSize)));\n/**\n * Get cached initial board, using memoize from ramda\n */\nfunction getInitialBoard(boardSize) {\n    return _getInitialBoard(boardSize);\n}\nfunction getPosition(board, position) {\n    try {\n        return board[position.y][position.x];\n    }\n    catch (e) {\n        throw new Error('Error getting position');\n    }\n}\n/**\n * Take a board: I.IPosition[][] an return the number of rows(X)\n */\nconst getBoardSizeX = (board) => board[0].length;\n/**\n * Take a board: I.IPosition[][] an return the number of rows(Y)\n */\nconst getBoardSizeY = (board) => board.length;\n/**\n * Take a board: I.IPosition[][] an return the number of columns and rows {x, y}\n */\nfunction getBoardSize(board) {\n    return {\n        x: getBoardSizeX(board),\n        y: getBoardSizeY(board)\n    };\n}\n/**\n * Takes a function to printPosition and print board.\n */\nconst printBoard = R.curry((printPosition, board) => board.reduce((txtRow, col) => {\n    return col.reduce((txt, position) => {\n        return txt + printPosition(position);\n    }, txtRow) + '\\n';\n}, ''));\n/**\n * Get board in a nice format to print it on console\n */\nconst printUnicodeBoard = printBoard(Position.printUnicodePosition);\n/**\n * Prints only X and Y positions of a board.\n */\nconst printXAndYBoard = printBoard(Position.printXAndYPosition);\n/**\n * Gets all positions where can I jump recursively.\n * 1. Get not empty near positions from board.\n * 2. Foreach not empty near position:\n *  - Get jump position.\n *  - If jump position do NOT exists or accumulated positions\n *      contains jump position then return accumulated positions.\n *  - Set Jumping black piece to true if is black piece.\n *  - Set Jumps to from + from.jumps.\n *  - Call and return this method again recursively to get next jump positions.\n */\nfunction whereCanIJump(board, from, positions) {\n    const nearPieces = getNotEmptyNearPositions(board, from);\n    return nearPieces.reduce((accPositions, nearPiece) => {\n        const jumpTo = getJumpPosition(from, nearPiece, board);\n        if (!jumpTo || Position.containsXY(accPositions, jumpTo))\n            return accPositions;\n        jumpTo.jumpingBlackPiece = nearPiece.isBlack;\n        jumpTo.jumps = (from.jumps || []).concat(from);\n        return whereCanIJump(board, jumpTo, accPositions.concat(jumpTo));\n    }, positions || []);\n}\n/**\n * Gets all near positions and reduce. Foreach near position checks:\n *  - Has no piece: concat positions and return.\n *  - Has piece:\n *      1. Get jump position, if jump position do not exists return prev positions.\n *      2. Concat jump to positions then call whereCanIJump() and return it.\n */\nfunction getPositionsWhereCanIGo(board, from) {\n    if (!from)\n        return null;\n    const allNearPositions = getNearPositions(board, from);\n    return allNearPositions.reduce((positions, nearPosition) => {\n        if (Position.hasNoPiece(nearPosition))\n            return positions.concat(nearPosition);\n        const jumpTo = getJumpPosition(from, nearPosition, board);\n        if (!jumpTo)\n            return positions;\n        return whereCanIJump(board, jumpTo, positions.concat(jumpTo));\n    }, []);\n}\n/**\n * Gets all pieces with whereCanIGo positions.\n */\nfunction getPiecesWhereCanIGo(board, positions) {\n    return positions.map(position => {\n        const { x, y, isBlack } = position;\n        return {\n            x, y, isBlack,\n            whereCanIGo: getPositionsWhereCanIGo(board, position)\n        };\n    });\n}\n/**\n * Get all valid and invalid near positions.\n */\nconst getAllNearPositions = (position) => [\n    [-1, -1],\n    [0, -1],\n    [1, -1],\n    [-1, 0],\n    [1, 0],\n    [-1, 1],\n    [0, 1],\n    [1, 1]\n].map(toAdd => {\n    return {\n        x: position.x + toAdd[0],\n        y: position.y + toAdd[1]\n    };\n});\n/**\n * Get near positions and CACHES it for each boardSize\n */\n// tslint:disable-next-line:variable-name\nconst _getNearPositions = R.memoize((boardSize, xy) => getAllNearPositions(xy)\n    .filter(p => hasPositionByBoardSize(boardSize, p)));\n/**\n * Get all near positions from the given board instance.\n */\nfunction getNearPositions(board, position) {\n    return _getNearPositions(getBoardSize(board), Position.getXAndY(position))\n        .map(p => getPosition(board, p));\n}\n/**\n * Get empty near positions\n */\nconst getEmptyNearPositions = (board, position) => getNearPositions(board, position)\n    .filter(p => Position.hasNoPiece(p));\n/**\n * Get not empty near positions\n */\nconst getNotEmptyNearPositions = (board, position) => getNearPositions(board, position)\n    .filter(p => Position.hasPiece(p));\n/**\n * Takes from position (x or y) and to jump position (x or y) then returns the x or y of the target position.\n */\nfunction getJump(from, toJump) {\n    if (from < toJump)\n        return toJump + 1;\n    else if (from > toJump)\n        return toJump - 1;\n    else\n        return toJump;\n}\n/**\n * Returns the target position from a jump.\n */\nfunction getJumpXY(from, toJump) {\n    return {\n        x: getJump(from.x, toJump.x),\n        y: getJump(from.y, toJump.y)\n    };\n}\n/**\n * Returns the target board position from a jump if this position exists and is empty.\n */\nfunction getJumpPosition(from, toJump, board) {\n    const jumpXY = getJumpXY(from, toJump);\n    if (!hasPosition(board, jumpXY))\n        return;\n    const jumpPosition = getPosition(board, jumpXY);\n    if (Position.hasPiece(jumpPosition))\n        return;\n    return jumpPosition;\n}\n/**\n * Get board with checked where can I go positions\n */\nfunction getBoardWhereCanIGo(board, from) {\n    const positions = getPositionsWhereCanIGo(board, from);\n    return mapBoard(board, position => Position.setICanGoHere(positions, position));\n}\n/**\n * Takes a board and return white and black pieces.\n * Used to calculate score from a board.\n *\n * returns { white: [{x,y}], black: [{x,y}] }\n */\nfunction getPiecesFromBoard(board) {\n    const initialPieces = {\n        white: [],\n        black: []\n    };\n    return board.reduce((piecesRow, row) => {\n        return row.reduce((pieces, position) => {\n            if (Position.hasBlackPiece(position))\n                pieces.black = pieces.black.concat(position);\n            else if (Position.hasWhitePiece(position))\n                pieces.white = pieces.white.concat(position);\n            return pieces;\n        }, piecesRow);\n    }, initialPieces);\n}\nexport { _getCleanBoard, _getInitialBoard, _getNearPositions, defaultBoardSize, getInitialBoard, getBoardWithPieces, getBoardWhereCanIGo, getCleanBoard, getStartEndRow, getStartEndRows, getStartPieces, getEmptyNearPositions, getJumpPosition, getNearPositions, getNotEmptyNearPositions, getPiecesFromBoard, getPiecesWhereCanIGo, getPosition, getPositionsWhereCanIGo, mapBoard, printBoard, printUnicodeBoard, printXAndYBoard, whereCanIJump, hasPosition, hasPositionByBoardSize };\n//# sourceMappingURL=Board.js.map"]}