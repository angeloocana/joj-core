{"version":3,"sources":["../dist-esnext/Board.js"],"names":["Position","Positions","defaultBoardSize","x","y","hasPosition","board","position","length","mapBoard","func","map","col","getColorStartEndRow","boardEndRow","isBlack","startRow","endRow","getBoardConf","boardSize","size","white","black","defaultBoardConf","_getInitialBoard","memoize","boardConf","blackPieces","whitePieces","push","getInitialBoard","getPosition","e","Error","setPosition","setPieceOnBoard","setPiece","removePieceOnBoard","removePiece","getCleanBoard","getCleanPosition","getBoardSizeX","getBoardSizeY","getBoardSize","getPositionsWhereCanIGo","from","allNearPositions","getNearPositions","undefined","positions","orderedPositions","i","nearPosition","hasNoPiece","getYAsBlack","getToSearchOrder","jumpPosition","getJumpPosition","jumps","whereCanIJump","onlyEmpty","add","plusX","plusY","newPosition","toJumpPosition","hasPiece","jumpfrom","nearFilledPositions","forEach","nearFilledPosition","notContains","lastPosition","jumpingBlackPiece","setWhereCanIGo","blackPiece","iCanGoHere","contains","printUnicode","txt","isBackGroundBlack","hasWhitePiece","hasBlackPiece"],"mappings":"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","file":"Board.js","sourcesContent":["import R from 'ramda';\nimport * as Position from './Position';\nimport * as Positions from './Positions';\nimport log from 'ptz-log';\n/**\n * Default 8x8 board size\n */\nconst defaultBoardSize = {\n    x: 8,\n    y: 8\n};\n/**\n * Check if position exists on board\n */\nfunction hasPosition(board, position) {\n    if (!position)\n        return false;\n    if (position.x < 0 || board.length <= position.x)\n        return false;\n    if (position.y < 0 || board[position.x].length <= position.y)\n        return false;\n    return true;\n}\n/**\n * Map some function in all board positions and return a new board\n */\nfunction mapBoard(board, func) {\n    return board.map(col => col.map(position => func(position)));\n}\nfunction getColorStartEndRow(boardEndRow, isBlack) {\n    return {\n        startRow: isBlack ? 0 : boardEndRow,\n        endRow: isBlack ? boardEndRow : 0\n    };\n}\nfunction getBoardConf(boardSize) {\n    const endRow = boardSize.y - 1;\n    return {\n        size: boardSize,\n        endRow,\n        white: getColorStartEndRow(endRow, false),\n        black: getColorStartEndRow(endRow, true)\n    };\n}\nconst defaultBoardConf = getBoardConf(defaultBoardSize);\n// tslint:disable-next-line:variable-name\nconst _getInitialBoard = R.memoize((boardConf) => {\n    // Do NOT remove the log below. We use it to check if cache works and this code run once.\n    log('_getInitialBoard for', boardConf);\n    const board = [], blackPieces = [], whitePieces = [];\n    for (let x = 0; x < boardConf.size.x; x++) {\n        for (let y = 0; y < boardConf.size.y; y++) {\n            if (!board[x])\n                board[x] = [];\n            const position = { x, y };\n            if (y === 0) {\n                position.isBlack = true;\n                blackPieces.push({ position });\n            }\n            if (y === boardConf.endRow) {\n                position.isBlack = false;\n                whitePieces.push({ position });\n            }\n            board[x][y] = position;\n        }\n    }\n    return {\n        board,\n        blackPieces,\n        whitePieces\n    };\n});\nfunction getInitialBoard(boardConf) {\n    return _getInitialBoard(boardConf);\n}\nfunction getPosition(board, position) {\n    try {\n        return board[position.x][position.y];\n    }\n    catch (e) {\n        log('Error getting position:', position, ' \\n board:', board);\n        throw new Error('Error getting position');\n    }\n}\nfunction setPosition(board, position) {\n    try {\n        board[position.x][position.y] = position;\n        return board;\n    }\n    catch (e) {\n        log('Error getting position: ', position);\n        throw new Error('Error getting position');\n    }\n}\nfunction setPieceOnBoard(board, position, isBlack) {\n    return setPosition(board, Position.setPiece(position, isBlack));\n}\nfunction removePieceOnBoard(board, position) {\n    return setPosition(board, Position.removePiece(position));\n}\nfunction getCleanBoard(board) {\n    return mapBoard(board, Position.getCleanPosition);\n}\n/**\n * Take a board: IPosition[][] an return the number of rows(X)\n */\nfunction getBoardSizeX(board) {\n    return board.length;\n}\n/**\n * Take a board: IPosition[][] an return the number of rows(Y)\n */\nfunction getBoardSizeY(board) {\n    return board[0].length;\n}\n/**\n * Take a board: IPosition[][] an return the number of columns and rows {x, y}\n */\nfunction getBoardSize(board) {\n    return {\n        x: getBoardSizeX(board),\n        y: getBoardSizeY(board)\n    };\n}\nfunction getPositionsWhereCanIGo(board, from, isBlack) {\n    if (!from)\n        return null;\n    const allNearPositions = getNearPositions(board, from, undefined);\n    const positions = [];\n    const orderedPositions = [];\n    for (let i = 0; i < allNearPositions.length; i++) {\n        const nearPosition = allNearPositions[i];\n        if (Position.hasNoPiece(nearPosition)) {\n            positions.push(nearPosition);\n            const y = Position.getYAsBlack(getBoardSizeY(board), nearPosition.y, isBlack);\n            if (!orderedPositions[y])\n                orderedPositions[y] = [];\n            orderedPositions[y][Position.getToSearchOrder(getBoardSize(board), nearPosition.x)] = nearPosition;\n        }\n        else {\n            const jumpPosition = getJumpPosition(board, from, nearPosition);\n            if (jumpPosition) {\n                jumpPosition.jumps = 1;\n                positions.push(jumpPosition);\n                const y = Position.getYAsBlack(getBoardSizeY(board), jumpPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][Position.getToSearchOrder(getBoardSize(board), jumpPosition.x)] = jumpPosition;\n                whereCanIJump(board, jumpPosition, positions, orderedPositions, isBlack);\n            }\n        }\n    }\n    return {\n        positions,\n        orderedPositions\n    };\n}\nfunction getNearPositions(board, position, onlyEmpty) {\n    const positions = [];\n    function add(plusX, plusY) {\n        var newPosition = {\n            x: position.x + plusX,\n            y: position.y + plusY\n        };\n        if (!hasPosition(board, newPosition))\n            return;\n        newPosition = getPosition(board, newPosition);\n        if (typeof onlyEmpty !== 'undefined') {\n            if (onlyEmpty === Position.hasNoPiece(newPosition))\n                positions.push(newPosition);\n        }\n        else\n            positions.push(newPosition);\n    }\n    add(-1, -1);\n    add(0, -1);\n    add(+1, -1);\n    add(-1, 0);\n    add(+1, 0);\n    add(-1, +1);\n    add(0, +1);\n    add(+1, +1);\n    return positions;\n}\nfunction getJumpPosition(board, from, toJumpPosition) {\n    var jumpPosition = { x: 0, y: 0 };\n    if (from.x < toJumpPosition.x)\n        jumpPosition.x = toJumpPosition.x + 1;\n    else if (from.x > toJumpPosition.x)\n        jumpPosition.x = toJumpPosition.x - 1;\n    else\n        jumpPosition.x = toJumpPosition.x;\n    if (from.y < toJumpPosition.y)\n        jumpPosition.y = toJumpPosition.y + 1;\n    else if (from.y > toJumpPosition.y)\n        jumpPosition.y = toJumpPosition.y - 1;\n    else\n        jumpPosition.y = toJumpPosition.y;\n    if (!hasPosition(board, jumpPosition)) {\n        return;\n    }\n    jumpPosition = getPosition(board, jumpPosition);\n    if (Position.hasPiece(jumpPosition)) {\n        return;\n    }\n    return jumpPosition;\n}\n// tslint:disable-next-line:max-line-length\nfunction whereCanIJump(board, jumpfrom, positions, orderedPositions, isBlack) {\n    const nearFilledPositions = getNearPositions(board, jumpfrom, false);\n    nearFilledPositions.forEach(nearFilledPosition => {\n        const jumpPosition = getJumpPosition(board, jumpfrom, nearFilledPosition);\n        if (jumpPosition) {\n            if (Positions.notContains(positions, jumpPosition)) {\n                jumpPosition.lastPosition = jumpfrom;\n                jumpPosition.jumpingBlackPiece = nearFilledPosition.isBlack;\n                jumpPosition.jumps = jumpfrom.jumps ? jumpfrom.jumps++ : 2;\n                positions.push(jumpPosition);\n                const y = Position.getYAsBlack(getBoardSizeY(board), jumpPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][Position.getToSearchOrder(getBoardSize(board), jumpPosition.x)] = jumpPosition;\n                whereCanIJump(board, jumpPosition, positions, orderedPositions, isBlack);\n            }\n        }\n    });\n}\nfunction setWhereCanIGo(board, from, blackPiece) {\n    const positions = getPositionsWhereCanIGo(board, from, blackPiece).positions;\n    return mapBoard(board, position => {\n        position.iCanGoHere = Positions.contains(positions, position);\n        return position;\n    });\n}\nfunction printUnicode(board) {\n    var txt = '';\n    for (var y = 0; y < board.length; y++) {\n        for (var x = 0; x < board[y].length; x++) {\n            const position = board[x][y];\n            if (Position.isBackGroundBlack(x, y)) {\n                if (Position.hasWhitePiece(position))\n                    txt += '\\u{25CF}';\n                else if (Position.hasBlackPiece(position))\n                    txt += '\\u{25CB}';\n                else\n                    txt += ' ';\n            }\n            else {\n                if (Position.hasWhitePiece(position))\n                    txt += '\\u{25D9}';\n                else if (Position.hasBlackPiece(position))\n                    txt += '\\u{25D8}';\n                else\n                    txt += '\\u{2588}';\n            }\n        }\n        txt += '\\n';\n    }\n    return txt;\n}\nexport { defaultBoardSize, defaultBoardConf, getCleanBoard, getInitialBoard, getBoardConf, getColorStartEndRow, getJumpPosition, getNearPositions, getPosition, getPositionsWhereCanIGo, printUnicode, whereCanIJump, setPieceOnBoard, setPosition, setWhereCanIGo, removePieceOnBoard, hasPosition };\n//# sourceMappingURL=Board.js.map"]}