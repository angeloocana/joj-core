{"version":3,"sources":["../dist-esnext/Board.js"],"names":["Position","defaultBoardSize","x","y","hasPositionByBoardSize","boardSize","position","hasPosition","board","getBoardSize","mapBoard","func","map","col","p","getStartEndRow","boardEndRow","isBlack","startRow","endRow","getStartEndRowsFromBoardSize","white","black","getStartEndRows","compose","createCols","cols","concat","createRows","rows","_getCleanBoard","memoize","getCleanBoard","getBoardWithPieces","pieces","piece","getPositionFromPositions","getStartWhiteBlack","whiteY","addStartPieces","positions","getStartPieces","_getInitialBoard","getInitialBoard","getPosition","e","Error","getBoardSizeX","length","getBoardSizeY","printBoard","printPosition","reduce","txtRow","txt","printBoardCurried","curry","printUnicodeBoard","printUnicodePosition","printXAndYBoard","printXAndYPosition","whereCanIJump","from","nearPieces","getNotEmptyNearPositions","accPositions","nearPiece","jumpTo","getJumpPosition","containsXY","jumpingBlackPiece","jumps","getPositionsWhereCanIGo","allNearPositions","getNearPositions","nearPosition","hasNoPiece","getPiecesWhereCanIGo","whereCanIGo","getAllNearPositions","toAdd","_getNearPositions","xy","filter","getXAndY","getEmptyNearPositions","hasPiece","getJump","toJump","getJumpXY","jumpXY","jumpPosition","getBoardWhereCanIGo","setICanGoHere","getPiecesFromBoard","initialPieces","piecesRow","row","hasBlackPiece","hasWhitePiece"],"mappings":"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","file":"Board.js","sourcesContent":["import R from 'ramda';\nimport * as Position from './Position';\n/**\n * Default 8x8 board size\n */\nconst defaultBoardSize = { x: 8, y: 8 };\n/**\n * Checks if position exists in this board size\n */\nconst hasPositionByBoardSize = (boardSize, position) => position\n    && position.x >= 0 && position.y >= 0\n    && boardSize.y > position.y && boardSize.x > position.x;\n/**\n * Check if position exists on board\n */\nconst hasPosition = (board, position) => hasPositionByBoardSize(getBoardSize(board), position);\n/**\n * Map some function in all board positions and return a new board\n */\nconst mapBoard = (board, func) => board.map(col => col.map(p => func(p)));\n/**\n * Get START and END rows\n *\n * returns { startRow, endRow }\n */\nfunction getStartEndRow(boardEndRow, isBlack) {\n    return {\n        startRow: isBlack ? 0 : boardEndRow,\n        endRow: isBlack ? boardEndRow : 0\n    };\n}\n/**\n * Takes a boardSize and return START and END rows for WHITE and BLACK.\n *\n * returns { white:{startRow, endRow}, black:{startRow, endRow} }\n */\nfunction getStartEndRowsFromBoardSize(boardSize) {\n    const endRow = boardSize.y - 1;\n    return {\n        white: getStartEndRow(endRow, false),\n        black: getStartEndRow(endRow, true)\n    };\n}\n/**\n * Takes a board and return START and END rows for WHITE and BLACK.\n *\n * returns { white:{startRow, endRow}, black:{startRow, endRow} }\n */\nconst getStartEndRows = R.compose(getStartEndRowsFromBoardSize, getBoardSize);\n/**\n * Create cols recursively\n */\nconst createCols = (x, y, cols) => x < 0 ? cols : createCols(x - 1, y, R.concat([{ x, y }], cols || []));\n/**\n * Create rows recursively\n */\nconst createRows = (x, y, rows) => y < 0 ? rows : createRows(x, y - 1, R.concat([createCols(x, y)], rows || []));\n/**\n * Get cached clean board, using memoize from ramda\n *\n * The _getCleanBoard returns :Function Type,\n * that's why we created getCleanBoard witch returns :IPosition[y][x]\n * in order to reduce type errors.\n */\n// tslint:disable-next-line:variable-name\nconst _getCleanBoard = R.memoize((boardSize) => createRows(boardSize.x - 1, boardSize.y - 1));\n/**\n * Get cached clean board, using memoize from ramda.\n */\nfunction getCleanBoard(boardSize) {\n    return _getCleanBoard(boardSize);\n}\n/**\n * Takes a board and return a new board with pieces.\n */\nconst getBoardWithPieces = (board, pieces) => mapBoard(board, p => {\n    const { x, y } = p;\n    const piece = Position.getPositionFromPositions(pieces, p);\n    if (piece)\n        return { x, y, isBlack: piece.isBlack };\n    else\n        return { x, y };\n});\n/**\n * Get start white and black pieces.\n */\nconst getStartWhiteBlack = (x, whiteY) => [\n    { x, y: 0, isBlack: true },\n    { x, y: whiteY, isBlack: false }\n];\n/**\n * Add start pieces recursively\n */\nconst addStartPieces = (x, whiteY, positions) => x < 0\n    ? positions\n    : addStartPieces(x - 1, whiteY, positions.concat(getStartWhiteBlack(x, whiteY)));\n/**\n * Get start white and black pieces\n */\nfunction getStartPieces(boardSize) {\n    return addStartPieces(boardSize.x - 1, boardSize.y - 1, []);\n}\n/**\n * Get cached initial board, using memoize from ramda\n *\n * The _getInitialBoard returns :Function Type,\n * that's why we created getInitialBoard witch returns :IPosition[y][x]\n * in order to reduce type errors.\n */\n// tslint:disable-next-line:variable-name\nconst _getInitialBoard = R.memoize((boardSize) => getBoardWithPieces(getCleanBoard(boardSize), getStartPieces(boardSize)));\n/**\n * Get cached initial board, using memoize from ramda\n */\nfunction getInitialBoard(boardSize) {\n    return _getInitialBoard(boardSize);\n}\nfunction getPosition(board, position) {\n    try {\n        return board[position.y][position.x];\n    }\n    catch (e) {\n        throw new Error('Error getting position');\n    }\n}\n/**\n * Take a board: I.IPosition[][] an return the number of rows(X)\n */\nconst getBoardSizeX = (board) => board[0].length;\n/**\n * Take a board: I.IPosition[][] an return the number of rows(Y)\n */\nconst getBoardSizeY = (board) => board.length;\n/**\n * Take a board: I.IPosition[][] an return the number of columns and rows {x, y}\n */\nfunction getBoardSize(board) {\n    return {\n        x: getBoardSizeX(board),\n        y: getBoardSizeY(board)\n    };\n}\n/**\n * Takes a function to printPosition and print board.\n */\nconst printBoard = (printPosition, board) => board.reduce((txtRow, col) => {\n    return col.reduce((txt, position) => {\n        return txt + printPosition(position);\n    }, txtRow) + '\\n';\n}, '');\nconst printBoardCurried = R.curry(printBoard);\n/**\n * Get board in a nice format to print it on console\n */\nconst printUnicodeBoard = printBoardCurried(Position.printUnicodePosition);\n/**\n * Prints only X and Y positions of a board.\n */\nconst printXAndYBoard = printBoardCurried(Position.printXAndYPosition);\n/**\n * Gets all positions where can I jump recursively.\n * 1. Get not empty near positions from board.\n * 2. Foreach not empty near position:\n *  - Get jump position.\n *  - If jump position do NOT exists or accumulated positions\n *      contains jump position then return accumulated positions.\n *  - Set Jumping black piece to true if is black piece.\n *  - Set Jumps to from + from.jumps.\n *  - Call and return this method again recursively to get next jump positions.\n */\nfunction whereCanIJump(board, from, isBlack, positions) {\n    const nearPieces = getNotEmptyNearPositions(board, from);\n    return nearPieces.reduce((accPositions, nearPiece) => {\n        const jumpTo = getJumpPosition(from, nearPiece, board);\n        if (!jumpTo || Position.containsXY(accPositions, jumpTo))\n            return accPositions;\n        jumpTo.jumpingBlackPiece = nearPiece.isBlack;\n        jumpTo.jumps = (from.jumps || []).concat(from);\n        return whereCanIJump(board, jumpTo, isBlack, accPositions.concat(jumpTo));\n    }, positions || []);\n}\n/**\n * Gets all near positions and reduce. Foreach near position checks:\n *  - Has no piece: concat positions and return.\n *  - Has piece:\n *      1. Get jump position, if jump position do not exists return prev positions.\n *      2. Concat jump to positions then call whereCanIJump() and return it.\n */\nfunction getPositionsWhereCanIGo(board, from, isBlack) {\n    if (!from)\n        return null;\n    const allNearPositions = getNearPositions(board, from);\n    return allNearPositions.reduce((positions, nearPosition) => {\n        if (Position.hasNoPiece(nearPosition))\n            return positions.concat(nearPosition);\n        const jumpTo = getJumpPosition(from, nearPosition, board);\n        if (!jumpTo)\n            return positions;\n        return whereCanIJump(board, jumpTo, isBlack, positions.concat(jumpTo));\n    }, []);\n}\n/**\n * Gets all pieces with whereCanIGo positions.\n */\nfunction getPiecesWhereCanIGo(isBlack, board, positions) {\n    return positions.map(position => {\n        const { x, y } = position;\n        return {\n            x, y, isBlack,\n            whereCanIGo: getPositionsWhereCanIGo(board, position, isBlack)\n        };\n    });\n}\n/**\n * Get all valid and invalid near positions.\n */\nconst getAllNearPositions = (position) => [\n    [-1, -1],\n    [0, -1],\n    [1, -1],\n    [-1, 0],\n    [1, 0],\n    [-1, 1],\n    [0, 1],\n    [1, 1]\n].map(toAdd => {\n    return {\n        x: position.x + toAdd[0],\n        y: position.y + toAdd[1]\n    };\n});\n/**\n * Get near positions and CACHES it for each boardSize\n */\n// tslint:disable-next-line:variable-name\nconst _getNearPositions = R.memoize((boardSize, xy) => getAllNearPositions(xy)\n    .filter(p => hasPositionByBoardSize(boardSize, p)));\n/**\n * Get all near positions from the given board instance.\n */\nfunction getNearPositions(board, position) {\n    return _getNearPositions(getBoardSize(board), Position.getXAndY(position))\n        .map(p => getPosition(board, p));\n}\n/**\n * Get empty near positions\n */\nconst getEmptyNearPositions = (board, position) => getNearPositions(board, position)\n    .filter(p => Position.hasNoPiece(p));\n/**\n * Get not empty near positions\n */\nconst getNotEmptyNearPositions = (board, position) => getNearPositions(board, position)\n    .filter(p => Position.hasPiece(p));\n/**\n * Takes from position (x or y) and to jump position (x or y) then returns the x or y of the target position.\n */\nfunction getJump(from, toJump) {\n    if (from < toJump)\n        return toJump + 1;\n    else if (from > toJump)\n        return toJump - 1;\n    else\n        return toJump;\n}\n/**\n * Returns the target position from a jump.\n */\nfunction getJumpXY(from, toJump) {\n    return {\n        x: getJump(from.x, toJump.x),\n        y: getJump(from.y, toJump.y)\n    };\n}\n/**\n * Returns the target board position from a jump if this position exists and is empty.\n */\nfunction getJumpPosition(from, toJump, board) {\n    const jumpXY = getJumpXY(from, toJump);\n    if (!hasPosition(board, jumpXY))\n        return;\n    const jumpPosition = getPosition(board, jumpXY);\n    if (Position.hasPiece(jumpPosition))\n        return;\n    return jumpPosition;\n}\n/**\n * Get board with checked where can I go positions\n */\nfunction getBoardWhereCanIGo(board, from, isBlack) {\n    const positions = getPositionsWhereCanIGo(board, from, isBlack);\n    return mapBoard(board, position => Position.setICanGoHere(positions, position));\n}\n/**\n * Takes a board and return white and black pieces.\n * Used to calculate score from a board.\n *\n * returns { white: [{x,y}], black: [{x,y}] }\n */\nfunction getPiecesFromBoard(board) {\n    const initialPieces = {\n        white: [],\n        black: []\n    };\n    return board.reduce((piecesRow, row) => {\n        return row.reduce((pieces, position) => {\n            if (Position.hasBlackPiece(position))\n                pieces.black = pieces.black.concat(position);\n            else if (Position.hasWhitePiece(position))\n                pieces.white = pieces.white.concat(position);\n            return pieces;\n        }, piecesRow);\n    }, initialPieces);\n}\nexport { _getCleanBoard, _getInitialBoard, _getNearPositions, defaultBoardSize, getInitialBoard, getBoardWithPieces, getBoardWhereCanIGo, getCleanBoard, getStartEndRow, getStartEndRows, getStartPieces, getEmptyNearPositions, getJumpPosition, getNearPositions, getNotEmptyNearPositions, getPiecesFromBoard, getPiecesWhereCanIGo, getPosition, getPositionsWhereCanIGo, mapBoard, printBoard, printBoardCurried, printUnicodeBoard, printXAndYBoard, whereCanIJump, hasPosition, hasPositionByBoardSize };\n//# sourceMappingURL=Board.js.map"]}