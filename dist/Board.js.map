{"version":3,"sources":["../dist-esnext/Board.js"],"names":["defaultBoardSize","x","y","mapBoard","board","func","map","col","position","getColorStartEndRow","boardEndRow","isBlack","startRow","endRow","getBoardConf","boardSize","size","white","black","defaultBoardConf","getStartRow","boardConf","color","isBackGroundBlack","positionsContains","positions","some","p","positionsNotContains","getToSearchOrder","getY0Start7End","getY7Start0End","_getInitialBoard","blackPieces","whitePieces","push","getInitialBoard","getPosition","e","Error","setPosition","setPieceOnBoard","removePieceOnBoard","fillPieceOnBoard","piece","fillPiecesOnBoard","pieces","forEach","getCleanBoardWhereCanIGo","iCanGoHere","lastMove","lastMoveJump","getPositionsWhereCanIGo","from","allNearPositions","getNearPositions","undefined","orderedPositions","i","length","nearPosition","jumpPosition","getJumpPosition","jumps","whereCanIJump","onlyEmpty","add","plusX","plusY","newPosition","boardHasThisPosition","toJumpPosition","jumpfrom","nearFilledPositions","nearFilledPosition","lastPosition","jumpingBlackPiece","setWhereCanIGo","blackPiece","printUnicode","txt","getBoardAfterMove","move","to","isWhiteHome","isBlackHome"],"mappings":"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","file":"Board.js","sourcesContent":["import { compose, memoize, not } from 'ramda';\nimport { hasBlackPiece, hasNoPiece, hasPiece, hasWhitePiece, removePiece, setPiece } from './Position';\nimport log from 'ptz-log';\nconst defaultBoardSize = {\n    x: 8,\n    y: 8\n};\nfunction mapBoard(board, func) {\n    return board.map(col => col.map(position => func(position)));\n}\nfunction getColorStartEndRow(boardEndRow, isBlack) {\n    return {\n        startRow: isBlack ? 0 : boardEndRow,\n        endRow: isBlack ? boardEndRow : 0\n    };\n}\nfunction getBoardConf(boardSize) {\n    const endRow = boardSize.y - 1;\n    return {\n        size: boardSize,\n        endRow,\n        white: getColorStartEndRow(endRow, false),\n        black: getColorStartEndRow(endRow, true)\n    };\n}\nconst defaultBoardConf = getBoardConf(defaultBoardSize);\nfunction getStartRow(boardConf, isBlack) {\n    const color = isBlack ? boardConf.black : boardConf.white;\n    return color.startRow;\n}\nfunction isBackGroundBlack(x, y) {\n    if (x % 2 === 0) {\n        if (y % 2 === 0)\n            return true;\n        else\n            return false;\n    }\n    else {\n        if (y % 2 === 0)\n            return false;\n        else\n            return true;\n    }\n}\nfunction positionsContains(positions, position) {\n    return positions.some(p => p.x === position.x && p.y === position.y);\n}\nconst positionsNotContains = compose(not, positionsContains);\nfunction getToSearchOrder(x) {\n    switch (x) {\n        case 0:\n            return 0;\n        case 1:\n            return 2;\n        case 2:\n            return 4;\n        case 3:\n            return 6;\n        case 4:\n            return 7;\n        case 5:\n            return 5;\n        case 6:\n            return 3;\n        case 7:\n            return 1;\n        default:\n            return null;\n    }\n}\nfunction getY0Start7End(y, isBlack) {\n    if (isBlack)\n        return y;\n    switch (y) {\n        case 0:\n            return 7;\n        case 1:\n            return 6;\n        case 2:\n            return 5;\n        case 3:\n            return 4;\n        case 4:\n            return 3;\n        case 5:\n            return 2;\n        case 6:\n            return 1;\n        case 7:\n            return 0;\n        default:\n            return null;\n    }\n}\nfunction getY7Start0End(y, isBlack) {\n    if (!isBlack)\n        return y;\n    switch (y) {\n        case 0:\n            return 7;\n        case 1:\n            return 6;\n        case 2:\n            return 5;\n        case 3:\n            return 4;\n        case 4:\n            return 3;\n        case 5:\n            return 2;\n        case 6:\n            return 1;\n        case 7:\n            return 0;\n        default:\n            return null;\n    }\n}\n// tslint:disable-next-line:variable-name\nconst _getInitialBoard = memoize((boardConf) => {\n    log('_getInitialBoard for', boardConf);\n    const board = [], blackPieces = [], whitePieces = [];\n    for (let x = 0; x < boardConf.size.x; x++) {\n        for (let y = 0; y < boardConf.size.y; y++) {\n            if (!board[x])\n                board[x] = [];\n            const position = { x, y };\n            if (y === 0) {\n                position.isBlack = true;\n                blackPieces.push({ position });\n            }\n            if (y === boardConf.endRow) {\n                position.isBlack = false;\n                whitePieces.push({ position });\n            }\n            board[x][y] = position;\n        }\n    }\n    return {\n        board,\n        blackPieces,\n        whitePieces\n    };\n});\nfunction getInitialBoard(boardConf) {\n    return _getInitialBoard(boardConf);\n}\nfunction getPosition(board, position) {\n    try {\n        return board[position.x][position.y];\n    }\n    catch (e) {\n        log('Error getting position:', position, ' \\n board:', board);\n        throw new Error('Error getting position');\n    }\n}\nfunction setPosition(board, position) {\n    try {\n        board[position.x][position.y] = position;\n        return board;\n    }\n    catch (e) {\n        log('Error getting position: ', position);\n        throw new Error('Error getting position');\n    }\n}\nfunction setPieceOnBoard(board, position, isBlack) {\n    return setPosition(board, setPiece(position, isBlack));\n}\nfunction removePieceOnBoard(board, position) {\n    return setPosition(board, removePiece(position));\n}\nfunction fillPieceOnBoard(board, piece) {\n    board = setPosition(board, piece.position);\n    return board;\n}\nfunction fillPiecesOnBoard(board, pieces) {\n    pieces.forEach(piece => board = fillPieceOnBoard(board, piece));\n    return board;\n}\nfunction getCleanBoardWhereCanIGo(board) {\n    return mapBoard(board, position => {\n        position.iCanGoHere = false;\n        position.lastMove = false;\n        position.lastMoveJump = false;\n        return position;\n    });\n}\nfunction getPositionsWhereCanIGo(board, from, isBlack) {\n    if (!from)\n        return null;\n    const allNearPositions = getNearPositions(board, from, undefined);\n    const positions = [];\n    const orderedPositions = [];\n    for (let i = 0; i < allNearPositions.length; i++) {\n        const nearPosition = allNearPositions[i];\n        if (hasNoPiece(nearPosition)) {\n            positions.push(nearPosition);\n            const y = getY0Start7End(nearPosition.y, isBlack);\n            if (!orderedPositions[y])\n                orderedPositions[y] = [];\n            orderedPositions[y][getToSearchOrder(nearPosition.x)] = nearPosition;\n        }\n        else {\n            const jumpPosition = getJumpPosition(board, from, nearPosition);\n            if (jumpPosition) {\n                jumpPosition.jumps = 1;\n                positions.push(jumpPosition);\n                const y = getY0Start7End(jumpPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][getToSearchOrder(jumpPosition.x)] = jumpPosition;\n                whereCanIJump(board, jumpPosition, positions, orderedPositions, isBlack);\n            }\n        }\n    }\n    return {\n        positions,\n        orderedPositions\n    };\n}\nfunction getNearPositions(board, position, onlyEmpty) {\n    const positions = [];\n    function add(plusX, plusY) {\n        var newPosition = {\n            x: position.x + plusX,\n            y: position.y + plusY\n        };\n        if (!boardHasThisPosition(board, newPosition))\n            return;\n        newPosition = getPosition(board, newPosition);\n        if (typeof onlyEmpty !== 'undefined') {\n            if (onlyEmpty === hasNoPiece(newPosition))\n                positions.push(newPosition);\n        }\n        else\n            positions.push(newPosition);\n    }\n    add(-1, -1);\n    add(0, -1);\n    add(+1, -1);\n    add(-1, 0);\n    add(+1, 0);\n    add(-1, +1);\n    add(0, +1);\n    add(+1, +1);\n    return positions;\n}\nfunction getJumpPosition(board, from, toJumpPosition) {\n    var jumpPosition = { x: 0, y: 0 };\n    if (from.x < toJumpPosition.x)\n        jumpPosition.x = toJumpPosition.x + 1;\n    else if (from.x > toJumpPosition.x)\n        jumpPosition.x = toJumpPosition.x - 1;\n    else\n        jumpPosition.x = toJumpPosition.x;\n    if (from.y < toJumpPosition.y)\n        jumpPosition.y = toJumpPosition.y + 1;\n    else if (from.y > toJumpPosition.y)\n        jumpPosition.y = toJumpPosition.y - 1;\n    else\n        jumpPosition.y = toJumpPosition.y;\n    if (!boardHasThisPosition(board, jumpPosition)) {\n        return;\n    }\n    jumpPosition = getPosition(board, jumpPosition);\n    if (hasPiece(jumpPosition)) {\n        return;\n    }\n    return jumpPosition;\n}\n// tslint:disable-next-line:max-line-length\nfunction whereCanIJump(board, jumpfrom, positions, orderedPositions, isBlack) {\n    const nearFilledPositions = getNearPositions(board, jumpfrom, false);\n    nearFilledPositions.forEach(nearFilledPosition => {\n        const jumpPosition = getJumpPosition(board, jumpfrom, nearFilledPosition);\n        if (jumpPosition) {\n            if (positionsNotContains(positions, jumpPosition)) {\n                jumpPosition.lastPosition = jumpfrom;\n                jumpPosition.jumpingBlackPiece = nearFilledPosition.isBlack;\n                jumpPosition.jumps = jumpfrom.jumps ? jumpfrom.jumps++ : 2;\n                positions.push(jumpPosition);\n                const y = getY0Start7End(jumpPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][getToSearchOrder(jumpPosition.x)] = jumpPosition;\n                whereCanIJump(board, jumpPosition, positions, orderedPositions, isBlack);\n            }\n        }\n    });\n}\nfunction setWhereCanIGo(board, from, blackPiece) {\n    const positions = getPositionsWhereCanIGo(board, from, blackPiece).positions;\n    return mapBoard(board, position => {\n        position.iCanGoHere = positionsContains(positions, position);\n        return position;\n    });\n}\nfunction printUnicode(board) {\n    var txt = '';\n    for (var y = 0; y < board.length; y++) {\n        for (var x = 0; x < board[y].length; x++) {\n            const position = board[x][y];\n            if (isBackGroundBlack(x, y)) {\n                if (hasWhitePiece(position))\n                    txt += '\\u{25CF}';\n                else if (hasBlackPiece(position))\n                    txt += '\\u{25CB}';\n                else\n                    txt += ' ';\n            }\n            else {\n                if (hasWhitePiece(position))\n                    txt += '\\u{25D9}';\n                else if (hasBlackPiece(position))\n                    txt += '\\u{25D8}';\n                else\n                    txt += '\\u{2588}';\n            }\n        }\n        txt += '\\n';\n    }\n    return txt;\n}\nfunction getBoardAfterMove(board, move) {\n    move.to.lastMove = true;\n    move.from.lastMove = true;\n    board = setPieceOnBoard(board, move.to, hasBlackPiece(move.from));\n    board = removePieceOnBoard(board, move.from);\n    let jumpPosition = move.to.lastPosition;\n    while (jumpPosition) {\n        getPosition(board, jumpPosition).lastMoveJump = true;\n        jumpPosition = jumpPosition.lastPosition;\n    }\n    return board;\n}\nfunction boardHasThisPosition(board, position) {\n    if (!position || position.x < 0 || position.y < 0)\n        return false;\n    return board.length > position.x && board[position.x].length > position.y;\n}\nfunction isWhiteHome(position, boardConf) {\n    if (position.y === boardConf.size.y - 1)\n        return true;\n}\nfunction isBlackHome(position) {\n    if (position.y === 0)\n        return true;\n}\nexport { defaultBoardSize, defaultBoardConf, fillPieceOnBoard, fillPiecesOnBoard, getBoardAfterMove, getCleanBoardWhereCanIGo, getInitialBoard, getToSearchOrder, getBoardConf, getColorStartEndRow, getJumpPosition, getNearPositions, getPosition, getPositionsWhereCanIGo, getStartRow, getY0Start7End, getY7Start0End, isBackGroundBlack, isBlackHome, positionsContains, positionsNotContains, isWhiteHome, printUnicode, whereCanIJump, setPosition, setWhereCanIGo, boardHasThisPosition };\n//# sourceMappingURL=Board.js.map"]}