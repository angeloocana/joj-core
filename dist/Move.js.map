{"version":3,"sources":["../dist-esnext/Move.js"],"names":["Board","Game","GameColor","Player","Position","getBackMove","move","from","to","getMoveXAndY","getXAndY","canMove","game","isMyTurn","positionsWhereCanIGo","getPositionsWhereCanIGo","board","isBlackTurn","positions","findIndex","position","x","y","getBoardAfterMove","lastMove","setPieceOnBoard","hasBlackPiece","removePieceOnBoard","jumpPosition","lastPosition","getPosition","lastMoveJump","getGameAfterMove","backMove","Object","assign","getCleanBoard","Error","black","getColorAfterMove","white","movements","concat","ended","score","won","getGameBeforeLastMove","pop","isComputer","getPlayerTurn"],"mappings":"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","file":"Move.js","sourcesContent":["import * as Board from './Board';\nimport * as Game from './Game';\nimport * as GameColor from './GameColor';\nimport * as Player from './Player';\nimport * as Position from './Position';\n/**\n * Returns reverse move: from = to, to = from\n */\nfunction getBackMove(move) {\n    return {\n        from: move.to,\n        to: move.from\n    };\n}\n/**\n * Takes a move and returns it with clean positions {from: {x,y}, to: {x,y}}.\n */\nfunction getMoveXAndY(move) {\n    return {\n        from: Position.getXAndY(move.from),\n        to: Position.getXAndY(move.to)\n    };\n}\nfunction canMove(game, move) {\n    if (!Game.isMyTurn(game, move.from))\n        return false;\n    const positionsWhereCanIGo = Board.getPositionsWhereCanIGo(game.board, move.from, Game.isBlackTurn(game)).positions;\n    return positionsWhereCanIGo.findIndex(position => position.x === move.to.x\n        && position.y === move.to.y) >= 0;\n}\nfunction getBoardAfterMove(board, move) {\n    move.to.lastMove = true;\n    move.from.lastMove = true;\n    board = Board.setPieceOnBoard(board, move.to, Position.hasBlackPiece(move.from));\n    board = Board.removePieceOnBoard(board, move.from);\n    let jumpPosition = move.to.lastPosition;\n    while (jumpPosition) {\n        Board.getPosition(board, jumpPosition).lastMoveJump = true;\n        jumpPosition = jumpPosition.lastPosition;\n    }\n    return board;\n}\n/**\n * Takes game and move and returns new game after move.\n *\n * Updates:\n *  - .board (Cleans board, set positions and move breadcrumb)\n *  - .black (Calculate score)\n *  - .white (Calculate score)\n *  - .movements (add new move)\n */\nfunction getGameAfterMove(game, move, backMove = false) {\n    // Fix to be immutable\n    // I dont know if it is the best way\n    game = Object.assign({}, game);\n    game.board = Board.getCleanBoard(game.board);\n    if (!backMove && !canMove(game, move))\n        throw new Error('ERROR_CANT_MOVE_TO_POSITION');\n    game.board = getBoardAfterMove(game.board, move);\n    game.black = GameColor.getColorAfterMove(game.black, move);\n    game.white = GameColor.getColorAfterMove(game.white, move);\n    if (!backMove) {\n        game.movements = game.movements.concat(getMoveXAndY(move));\n        game.ended = game.black.score.won || game.white.score.won;\n    }\n    return game;\n}\nfunction getGameBeforeLastMove(game) {\n    let lastMove = game.movements.pop();\n    if (lastMove)\n        game = getGameAfterMove(game, getBackMove(lastMove), true);\n    if (Player.isComputer(Game.getPlayerTurn(game))) {\n        lastMove = game.movements.pop();\n        if (lastMove) {\n            game = getGameAfterMove(game, getBackMove(lastMove), true);\n        }\n    }\n    return game;\n}\nexport { canMove, getBackMove, getGameAfterMove, getGameBeforeLastMove, getMoveXAndY };\n//# sourceMappingURL=Move.js.map"]}