{"version":3,"sources":["../dist-esnext/Move.js"],"names":["Board","Game","Player","Position","Score","getBackMove","move","from","to","getMoveXAndY","getXAndY","canMove","game","isMyTurn","positionsWhereCanIGo","getPositionsWhereCanIGo","board","isBlackTurn","positions","some","hasSameXY","position","canNotMove","compose","not","getBoardAfterMove","lastMove","setPieceOnBoard","hasBlackPiece","removePieceOnBoard","jumpPosition","lastPosition","getPosition","lastMoveJump","getGameAfterMove","backMove","Error","players","score","getScore","moves","concat","getGameBeforeLastMove","pop","isComputer","getPlayerTurn","getMoveFromArray","getPositionFromArray","getMovesFromArray","map","getGameAfterMoves","reduce","lastGame"],"mappings":"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","file":"Move.js","sourcesContent":["import R from 'ramda';\nimport * as Board from './Board';\nimport * as Game from './Game';\nimport * as Player from './Player';\nimport * as Position from './Position';\nimport * as Score from './Score';\n/**\n * Returns reverse move: from = to, to = from\n */\nfunction getBackMove(move) {\n    return {\n        from: move.to,\n        to: move.from\n    };\n}\n/**\n * Takes a move and returns it with clean positions {from: {x,y}, to: {x,y}}.\n */\nfunction getMoveXAndY(move) {\n    return {\n        from: Position.getXAndY(move.from),\n        to: Position.getXAndY(move.to)\n    };\n}\n/**\n * Takes game and move then:\n *  - Checks if it is my turn to play otherwise returns false.\n *  - Get positions where can i go.\n *  - Returns true if move.to is in the positions where can i go.\n */\nfunction canMove(game, move) {\n    if (!Game.isMyTurn(game, move.from))\n        return false;\n    const positionsWhereCanIGo = Board.getPositionsWhereCanIGo(game.board, move.from, Game.isBlackTurn(game)).positions;\n    return positionsWhereCanIGo.some(position => Position.hasSameXY(position, move.to));\n}\n/**\n * Can not move\n */\nconst canNotMove = R.compose(R.not, canMove);\nfunction getBoardAfterMove(board, move) {\n    move.to.lastMove = true;\n    move.from.lastMove = true;\n    board = Board.setPieceOnBoard(board, move.to, Position.hasBlackPiece(move.from));\n    board = Board.removePieceOnBoard(board, move.from);\n    let jumpPosition = move.to.lastPosition;\n    while (jumpPosition) {\n        Board.getPosition(board, jumpPosition).lastMoveJump = true;\n        jumpPosition = jumpPosition.lastPosition;\n    }\n    return board;\n}\n/**\n * Takes game and move and returns new game after move.\n *\n * Updates:\n *  - .board (It cleans board, set new positions and move breadcrumb)\n *  - .score\n *  - .moves (add new move if valid)\n */\nfunction getGameAfterMove(game, move, backMove = false) {\n    if (!backMove && canNotMove(game, move))\n        throw new Error('ERROR_CANT_MOVE_TO_POSITION');\n    const board = getBoardAfterMove(game.board, move);\n    return {\n        players: game.players,\n        board,\n        score: Score.getScore(game.board),\n        moves: backMove ? game.moves : game.moves.concat(getMoveXAndY(move))\n    };\n}\nfunction getGameBeforeLastMove(game) {\n    let lastMove = game.moves.pop();\n    if (lastMove)\n        game = getGameAfterMove(game, getBackMove(lastMove), true);\n    if (Player.isComputer(Game.getPlayerTurn(game))) {\n        lastMove = game.moves.pop();\n        if (lastMove) {\n            game = getGameAfterMove(game, getBackMove(lastMove), true);\n        }\n    }\n    return game;\n}\n/**\n * Get IMove from an array like\n * [[fromX,fromY], [toX, toY]]\n *\n * const move = [[5, 7], [5, 6]];\n */\nfunction getMoveFromArray(move) {\n    return {\n        from: Position.getPositionFromArray(move[0]),\n        to: Position.getPositionFromArray(move[1])\n    };\n}\n/**\n * Get IMove[] from an array like\n * [[fromX,fromY], [toX, toY]]\n *\n * const moves = [\n *      [[5, 7], [5, 6]],\n *      [[2, 0], [2, 1]],\n *      [[7, 7], [5, 5]]\n * ];\n */\nconst getMovesFromArray = (moves) => moves.map(move => getMoveFromArray(move));\n/**\n * Get game after n moves.\n */\nfunction getGameAfterMoves(game, moves) {\n    return moves.reduce((lastGame, move) => {\n        return getGameAfterMove(lastGame, move);\n    }, game);\n}\nexport { canMove, getBackMove, getGameAfterMove, getGameAfterMoves, getGameBeforeLastMove, getMoveFromArray, getMovesFromArray, getMoveXAndY };\n//# sourceMappingURL=Move.js.map"]}