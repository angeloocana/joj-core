{"version":3,"sources":["../dist-esnext/Move.js"],"names":["Board","Game","Position","Score","getBackMove","move","from","to","getMoveXAndY","getXAndY","canMove","game","isMyTurn","positionsWhereCanIGo","getPositionsWhereCanIGo","board","isBlackTurn","some","hasSameXY","position","canNotMove","compose","not","getBoardAfterMove","getPosition","mapBoard","x","p","y","isBlack","lastMove","hasPiece","containsXY","jumps","lastMoveJump","getGameAfterMove","backMove","Error","players","score","getScore","moves","concat","getGameBeforeLastMove","pop","getPlayerTurn","isAi","getMoveFromArray","getPositionFromArray","getMovesFromArray","map","getGameAfterMoves","reduce","lastGame"],"mappings":"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","file":"Move.js","sourcesContent":["import R from 'ramda';\nimport * as Board from './Board';\nimport * as Game from './Game';\nimport * as Position from './Position';\nimport * as Score from './Score';\n/**\n * Returns reverse move: from = to, to = from\n */\nfunction getBackMove(move) {\n    return {\n        from: move.to,\n        to: move.from\n    };\n}\n/**\n * Takes a move and returns it with clean positions {from: {x,y}, to: {x,y}}.\n */\nfunction getMoveXAndY(move) {\n    return {\n        from: Position.getXAndY(move.from),\n        to: Position.getXAndY(move.to)\n    };\n}\n/**\n * Takes game and move then:\n *  - Checks if it is my turn to play otherwise returns false.\n *  - Get positions where can i go.\n *  - Returns true if move.to is in the positions where can i go.\n */\nfunction canMove(game, move) {\n    if (!Game.isMyTurn(game, move.from))\n        return false;\n    const positionsWhereCanIGo = Board.getPositionsWhereCanIGo(game.board, move.from, Game.isBlackTurn(game));\n    return positionsWhereCanIGo.some(position => Position.hasSameXY(position, move.to));\n}\n/**\n * Can not move\n */\nconst canNotMove = R.compose(R.not, canMove);\n/**\n * Get board after move, return a new board with:\n *  - From: Remove piece and add .lastMove: true\n *  - To: Set piece from move.from and add .lastMove: true\n *  - Jumps: Create jump breadcrumb by setting .lastMoveJump: true\n */\nfunction getBoardAfterMove(board, move) {\n    const from = Board.getPosition(board, move.from);\n    return Board.mapBoard(board, p => {\n        const { x, y, isBlack } = p;\n        if (Position.hasSameXY(from, p))\n            return { x, y, lastMove: true };\n        if (Position.hasSameXY(move.to, p))\n            return { x, y, isBlack: from.isBlack, lastMove: true };\n        if (Position.hasPiece(p))\n            return { x, y, isBlack };\n        if (Position.containsXY(move.to.jumps, p))\n            return { x, y, lastMoveJump: true };\n        return { x, y };\n    });\n}\n/**\n * Takes game and move and returns new game after move.\n *\n * Updates:\n *  - .board (It cleans board, set new positions and move breadcrumb)\n *  - .score\n *  - .moves (add new move if valid)\n */\nfunction getGameAfterMove(game, move, backMove = false) {\n    if (!backMove && canNotMove(game, move))\n        throw new Error('ERROR_CANT_MOVE_TO_POSITION');\n    const board = getBoardAfterMove(game.board, move);\n    return {\n        players: game.players,\n        board,\n        score: Score.getScore(game.board),\n        moves: backMove ? game.moves : game.moves.concat(getMoveXAndY(move))\n    };\n}\nfunction getGameBeforeLastMove(game) {\n    let lastMove = game.moves.pop();\n    if (lastMove)\n        game = getGameAfterMove(game, getBackMove(lastMove), true);\n    if (Game.getPlayerTurn(game).isAi) {\n        lastMove = game.moves.pop();\n        if (lastMove) {\n            game = getGameAfterMove(game, getBackMove(lastMove), true);\n        }\n    }\n    return game;\n}\n/**\n * Get IMove from an array like\n * [[fromX,fromY], [toX, toY]]\n *\n * const move = [[5, 7], [5, 6]];\n */\nfunction getMoveFromArray(move) {\n    return {\n        from: Position.getPositionFromArray(move[0]),\n        to: Position.getPositionFromArray(move[1])\n    };\n}\n/**\n * Get IMove[] from an array like\n * [[fromX,fromY], [toX, toY]]\n *\n * const moves = [\n *      [[5, 7], [5, 6]],\n *      [[2, 0], [2, 1]],\n *      [[7, 7], [5, 5]]\n * ];\n */\nconst getMovesFromArray = (moves) => moves.map(move => getMoveFromArray(move));\n/**\n * Get game after n moves.\n */\nfunction getGameAfterMoves(game, moves) {\n    return moves.reduce((lastGame, move) => {\n        return getGameAfterMove(lastGame, move);\n    }, game);\n}\nexport { canMove, getBackMove, getBoardAfterMove, getGameAfterMove, getGameAfterMoves, getGameBeforeLastMove, getMoveFromArray, getMovesFromArray, getMoveXAndY };\n//# sourceMappingURL=Move.js.map"]}