{"version":3,"sources":["../dist-esnext/GameBoard.js"],"names":["defaultBoardOptions","size","x","y","GameBoard","args","logMove","boardOptions","generateBoard","fillAllPiecesOnBoard","whitePieces","blackPieces","pieces","forEach","getPosition","piece","position","setPiece","isBlackPiece","fillPiecesOnBoard","board","isWhiteHome","isBlackHome","e","console","log","Error","onlyEmpty","positions","add","plusX","plusY","newPosition","boardHasThisPosition","isEmpty","push","startPosition","toJumpPosition","jumpPosition","jumpStartPosition","orderedPositions","isBlack","nearFilledPositions","getNearPositions","getJumpPosition","nearFilledPosition","isPositionNotAdded","lastPosition","jumpingBlackPiece","jumps","getY0Start7End","getIndexToSearchOrder","whereCanIJump","allNearPositions","undefined","i","length","nearPosition","blackPiece","getPositionsWhereCanIGo","iCanGoHere","lastMove","lastMoveJump","isBackGroundBlack","isWhitePiece","nextPosition","backMove","whiteTurn","removePiece","move","printUnicode"],"mappings":"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","file":"GameBoard.js","sourcesContent":["import { BoardPosition } from './BoardPosition';\nimport { boardHelper } from './helpers/BoardHelper';\nexport const defaultBoardOptions = {\n    size: {\n        x: 8,\n        y: 8\n    }\n};\nexport class GameBoard {\n    /**\n     * Game Board\n     */\n    constructor(args) {\n        if (!args)\n            args = {};\n        this.logMove = args.logMove || false;\n        this.boardOptions = args.boardOptions || { size: { x: 8, y: 8 } };\n        this.generateBoard();\n        this.fillAllPiecesOnBoard(args.whitePieces, args.blackPieces);\n    }\n    fillPiecesOnBoard(pieces) {\n        if (!pieces)\n            return;\n        pieces.forEach(piece => this.getPosition(piece.position).setPiece(piece.position.isBlackPiece()));\n    }\n    fillAllPiecesOnBoard(whitePieces, blackPieces) {\n        this.fillPiecesOnBoard(whitePieces);\n        this.fillPiecesOnBoard(blackPieces);\n    }\n    generateBoard() {\n        this.board = [];\n        for (let x = 0; x < this.boardOptions.size.x; x++) {\n            for (let y = 0; y < this.boardOptions.size.y; y++) {\n                if (!this.board[x])\n                    this.board[x] = [];\n                const position = new BoardPosition({ x, y });\n                if (y === this.boardOptions.size.y - 1)\n                    position.isWhiteHome = true;\n                if (y === 0)\n                    position.isBlackHome = true;\n                this.board[x][y] = position;\n            }\n        }\n    }\n    boardHasThisPosition(position) {\n        return (position.x < 0\n            || position.y < 0\n            || position.x >= this.boardOptions.size.x\n            || position.y >= this.boardOptions.size.y)\n            ? false : true;\n    }\n    getPosition(position) {\n        try {\n            return this.board[position.x][position.y];\n        }\n        catch (e) {\n            console.log('Error getting position: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.');\n            console.log(position);\n            console.log('Error getting position: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.');\n            throw new Error('Error getting position');\n        }\n    }\n    getNearPositions(position, onlyEmpty) {\n        const positions = [];\n        const board = this;\n        function add(plusX, plusY) {\n            var newPosition = new BoardPosition({\n                x: position.x + plusX,\n                y: position.y + plusY\n            });\n            if (!board.boardHasThisPosition(newPosition))\n                return;\n            newPosition = board.getPosition(newPosition);\n            if (typeof onlyEmpty !== 'undefined') {\n                if (onlyEmpty === newPosition.isEmpty())\n                    positions.push(newPosition);\n            }\n            else\n                positions.push(newPosition);\n        }\n        add(-1, -1);\n        add(0, -1);\n        add(+1, -1);\n        add(-1, 0);\n        add(+1, 0);\n        add(-1, +1);\n        add(0, +1);\n        add(+1, +1);\n        return positions;\n    }\n    getJumpPosition(startPosition, toJumpPosition) {\n        var jumpPosition = new BoardPosition({ x: 0, y: 0 });\n        if (startPosition.x < toJumpPosition.x)\n            jumpPosition.x = toJumpPosition.x + 1;\n        else if (startPosition.x > toJumpPosition.x)\n            jumpPosition.x = toJumpPosition.x - 1;\n        else\n            jumpPosition.x = toJumpPosition.x;\n        if (startPosition.y < toJumpPosition.y)\n            jumpPosition.y = toJumpPosition.y + 1;\n        else if (startPosition.y > toJumpPosition.y)\n            jumpPosition.y = toJumpPosition.y - 1;\n        else\n            jumpPosition.y = toJumpPosition.y;\n        if (!this.boardHasThisPosition(jumpPosition)) {\n            // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n            // console.log(\"getJumpPosition boardHasThisPosition = false\");\n            // console.log(\"startPosition\");\n            // console.log(startPosition);\n            // console.log(\"toJumpPosition\");\n            // console.log(toJumpPosition);\n            // console.log(\"jumpPosition\");\n            // console.log(jumpPosition);\n            // console.log(\"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\");\n            return;\n        }\n        jumpPosition = this.getPosition(jumpPosition);\n        if (!jumpPosition.isEmpty()) {\n            // console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\");\n            // console.log(\"getJumpPosition isEmpty = false\");\n            // console.log(\"startPosition\");\n            // console.log(startPosition);\n            // console.log(\"toJumpPosition\");\n            // console.log(toJumpPosition);\n            // console.log(\"jumpPosition\");\n            // console.log(jumpPosition);\n            // console.log(\"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\");\n            return;\n        }\n        return jumpPosition;\n    }\n    // tslint:disable-next-line:max-line-length\n    whereCanIJump(jumpStartPosition, positions, orderedPositions, isBlack) {\n        const nearFilledPositions = this.getNearPositions(jumpStartPosition, false);\n        nearFilledPositions.forEach(nearFilledPosition => {\n            const jumpPosition = this.getJumpPosition(jumpStartPosition, nearFilledPosition);\n            if (jumpPosition) {\n                if (boardHelper.isPositionNotAdded(jumpPosition, positions)) {\n                    jumpPosition.lastPosition = jumpStartPosition;\n                    jumpPosition.jumpingBlackPiece = nearFilledPosition.isBlackPiece();\n                    jumpPosition.jumps = jumpStartPosition.jumps ? jumpStartPosition.jumps++ : 2;\n                    positions.push(jumpPosition);\n                    const y = boardHelper.getY0Start7End(jumpPosition.y, isBlack);\n                    if (!orderedPositions[y])\n                        orderedPositions[y] = [];\n                    orderedPositions[y][boardHelper.getIndexToSearchOrder(jumpPosition.x)] = jumpPosition;\n                    this.whereCanIJump(jumpPosition, positions, orderedPositions, isBlack);\n                }\n            }\n        });\n    }\n    getPositionsWhereCanIGo(startPosition, isBlack) {\n        if (!startPosition)\n            return null;\n        const allNearPositions = this.getNearPositions(startPosition, undefined);\n        const positions = [];\n        const orderedPositions = [];\n        for (let i = 0; i < allNearPositions.length; i++) {\n            const nearPosition = allNearPositions[i];\n            if (nearPosition.isEmpty()) {\n                positions.push(nearPosition);\n                const y = boardHelper.getY0Start7End(nearPosition.y, isBlack);\n                if (!orderedPositions[y])\n                    orderedPositions[y] = [];\n                orderedPositions[y][boardHelper.getIndexToSearchOrder(nearPosition.x)] = nearPosition;\n            }\n            else {\n                const jumpPosition = this.getJumpPosition(startPosition, nearPosition);\n                if (jumpPosition) {\n                    jumpPosition.jumps = 1;\n                    positions.push(jumpPosition);\n                    const y = boardHelper.getY0Start7End(jumpPosition.y, isBlack);\n                    if (!orderedPositions[y])\n                        orderedPositions[y] = [];\n                    orderedPositions[y][boardHelper.getIndexToSearchOrder(jumpPosition.x)] = jumpPosition;\n                    this.whereCanIJump(jumpPosition, positions, orderedPositions, isBlack);\n                }\n            }\n        }\n        return {\n            positions,\n            orderedPositions\n        };\n    }\n    setWhereCanIGo(startPosition, blackPiece) {\n        const positions = this.getPositionsWhereCanIGo(startPosition, blackPiece).positions;\n        positions.forEach(position => {\n            this.getPosition(position).iCanGoHere = true;\n        });\n    }\n    cleanBoardWhereCanIGo() {\n        for (var x = 0; x < this.board.length; x++) {\n            for (var y = 0; y < this.board[x].length; y++) {\n                this.board[x][y].iCanGoHere = false;\n                this.board[x][y].lastMove = false;\n                this.board[x][y].lastMoveJump = false;\n            }\n        }\n    }\n    printUnicode() {\n        var board = '';\n        for (var y = 0; y < this.board.length; y++) {\n            for (var x = 0; x < this.board[y].length; x++) {\n                const position = this.board[x][y];\n                if (boardHelper.isBackGroundBlack(x, y)) {\n                    if (position.isWhitePiece())\n                        board += '\\u{25CF}';\n                    else if (position.isBlackPiece())\n                        board += '\\u{25CB}';\n                    else\n                        board += ' ';\n                }\n                else {\n                    if (position.isWhitePiece())\n                        board += '\\u{25D9}';\n                    else if (position.isBlackPiece())\n                        board += '\\u{25D8}';\n                    else\n                        board += '\\u{2588}';\n                }\n            }\n            board += '\\n';\n        }\n        return board;\n    }\n    move(startPosition, nextPosition, backMove, whiteTurn) {\n        if (backMove) {\n            this.getPosition(nextPosition).setPiece(!whiteTurn);\n            this.getPosition(startPosition).removePiece();\n        }\n        else\n            this.getPosition(startPosition).move(this.getPosition(nextPosition));\n        let jumpPosition = nextPosition.lastPosition;\n        while (jumpPosition) {\n            this.getPosition(jumpPosition).lastMoveJump = true;\n            jumpPosition = jumpPosition.lastPosition;\n        }\n        this.getPosition(nextPosition).lastMove = true;\n        this.getPosition(startPosition).lastMove = true;\n        if (this.logMove)\n            console.log(this.printUnicode());\n    }\n}\n//# sourceMappingURL=GameBoard.js.map"]}