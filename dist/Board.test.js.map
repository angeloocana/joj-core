{"version":3,"sources":["../dist-esnext/Board.test.js"],"names":["assert","TestData","assertPosition","actualPosition","expectedPosition","samePositionAs","hasSamePosition","ok","equal","isBlack","describe","it","getInitialBoard","defaultBoardConf","board","deepEqual","initialBoardExpected","board1","board2","notOk","hasPosition","defaultInitialBoard","undefined","position","x","y","actual","getPosition","expected","throws","setPosition","getNotEmptyNearPositions","getEmptyNearPositions","getNearPositions","from","toJumpPosition","getJumpPosition","printUnicodeTest","printUnicodeBoard","unicodeStartBoard","printXAndYBoard","xAndYStartBoard","getColorStartEndRow","endRow","startRow","positions","getPositionsWhereCanIGo"],"mappings":"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","file":"Board.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Board, Position } from './index';\nimport log from 'ptz-log';\nimport * as TestData from './__tests__/board.data.test';\nfunction assertPosition(actualPosition, expectedPosition) {\n    const samePositionAs = Position.hasSamePosition(actualPosition, expectedPosition);\n    if (!samePositionAs)\n        log('actualPosition: ', actualPosition, ' \\n expectedPosition: ', expectedPosition);\n    assert.ok(samePositionAs, 'samePositionAs');\n    assert.equal(actualPosition.isBlack, expectedPosition.isBlack, 'Is same piece');\n}\ndescribe('Board', () => {\n    describe('getInitialBoard', () => {\n        it('8x8', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            assert.deepEqual(board, TestData.initialBoardExpected);\n        });\n        it('memoize', () => {\n            const board1 = Board.getInitialBoard(Board.defaultBoardConf);\n            const board2 = Board.getInitialBoard(Board.defaultBoardConf);\n            assert.equal(board1, board2);\n        });\n    });\n    describe('hasPosition', () => {\n        it('return false for null position', () => {\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, null));\n        });\n        it('return false for undefined position', () => {\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, undefined));\n        });\n        it('return false for negative x', () => {\n            const position = { x: -1, y: 0 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for negative y', () => {\n            const position = { x: 1, y: -1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for negative x and y', () => {\n            const position = { x: -1, y: -1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for x > 7', () => {\n            const position = { x: 8, y: 1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for y > 7', () => {\n            const position = { x: 7, y: 8 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 0, y: 0', () => {\n            const position = { x: 0, y: 0 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 1, y: 1', () => {\n            const position = { x: 0, y: 0 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 7, y: 7', () => {\n            const position = { x: 7, y: 7 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n    });\n    describe('getPosition', () => {\n        it('valid position', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 2, y: 3 };\n            const actual = Board.getPosition(board, position);\n            const expected = { x: 2, y: 3 };\n            assertPosition(actual, expected);\n        });\n        it('invalid position', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: -2, y: -3 };\n            assert.throws(() => Board.getPosition(board, position));\n        });\n    });\n    describe('setPosition', () => {\n        it('valid position', () => {\n            let { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 2, y: 3 };\n            board = Board.setPosition(board, position);\n            assert.equal(board[position.y][position.x], position);\n        });\n        it('invalid position', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: -2, y: -3 };\n            assert.throws(() => Board.setPosition(board, position));\n        });\n    });\n    describe('getNotEmptyNearPositions', () => {\n        it('return only filled near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [{ x: 6, y: 7, isBlack: false }];\n            const actual = Board.getNotEmptyNearPositions(TestData.defaultInitialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getEmptyNearPositions', () => {\n        it('return all empty near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [{ x: 6, y: 6 }, { x: 7, y: 6 }];\n            const actual = Board.getEmptyNearPositions(TestData.defaultInitialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getNearPositions', () => {\n        it('return all near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [\n                { x: 6, y: 6 },\n                { x: 7, y: 6 },\n                { x: 6, y: 7, isBlack: false }\n            ];\n            const actual = Board.getNearPositions(TestData.defaultInitialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getJumpPosition', () => {\n        it('jumping up and right', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping up and left', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 2, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 0, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping up', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and right', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 2, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and left', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 2, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 0, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 1, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 1, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('should return undefined because position is not empty', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 3, y: 0 };\n            const toJumpPosition = { x: 4, y: 0 };\n            assert.notOk(Board.getJumpPosition(board, from, toJumpPosition));\n        });\n    });\n    describe('print', () => {\n        it('printUnicode', function printUnicodeTest() {\n            const actual = Board.printUnicodeBoard(TestData.defaultInitialBoard);\n            assert.equal(actual, TestData.unicodeStartBoard);\n        });\n        it('printXAndY', function printUnicodeTest() {\n            const actual = Board.printXAndYBoard(TestData.defaultInitialBoard);\n            assert.equal(actual, TestData.xAndYStartBoard);\n        });\n    });\n    describe('getColorStartEndRow', () => {\n        it('return {startRow: 0, endRow } for black', () => {\n            const actual = Board.getColorStartEndRow(Board.defaultBoardConf.endRow, true);\n            assert.equal(actual.startRow, 0);\n            assert.equal(actual.endRow, 7);\n        });\n        it('return {startRow: endRow, endRow: 0} for white', () => {\n            const actual = Board.getColorStartEndRow(Board.defaultBoardConf.endRow, false);\n            assert.equal(actual.startRow, 7);\n            assert.equal(actual.endRow, 0);\n        });\n    });\n    describe('getPositionsWhereCanIGo', () => {\n        it('return null for invalid from', () => {\n            const positions = Board.getPositionsWhereCanIGo(TestData.defaultInitialBoard, null, true);\n            assert.notOk(positions);\n        });\n    });\n});\n//# sourceMappingURL=Board.test.js.map"]}