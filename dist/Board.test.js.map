{"version":3,"sources":["../dist-esnext/Board.test.js"],"names":["assert","TestData","assertPosition","actualPosition","expectedPosition","samePositionAs","hasSameXY","ok","equal","isBlack","describe","it","board","getInitialBoard","defaultBoardSize","deepEqual","initialBoardExpected","notOk","hasPosition","initialBoard","undefined","position","x","y","actual","getPosition","expected","throws","firstCall","_getNearPositions","secondCall","getNotEmptyNearPositions","getEmptyNearPositions","getNearPositions","from","toJumpPosition","getJumpPosition","printUnicodeTest","printUnicodeBoard","unicodeStartBoard","printXAndYBoard","xAndYStartBoard","getStartEndRow","startRow","endRow","positions","getPositionsWhereCanIGo","getCleanBoard","board2","cleanBoardExpected","pieces","getBoardWithPieces","cleanBoard","p55","lastPosition","jumpingBlackPiece","jumps","p53","p51","whereCanIJump","getBoardWhereCanIGo","iCanGoHere","getStartPieces","startPiecesExpected","getPiecesFromBoard","expectedPieces","white","black"],"mappings":"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","file":"Board.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Board, Position } from './index';\nimport log from 'ptz-log';\nimport * as TestData from './__testdata__/board.data.test';\nfunction assertPosition(actualPosition, expectedPosition) {\n    const samePositionAs = Position.hasSameXY(actualPosition, expectedPosition);\n    if (!samePositionAs)\n        log('actualPosition: ', actualPosition, ' \\n expectedPosition: ', expectedPosition);\n    assert.ok(samePositionAs, 'samePositionAs');\n    assert.equal(actualPosition.isBlack, expectedPosition.isBlack, 'Is same piece');\n}\ndescribe('Board', () => {\n    describe('getInitialBoard', () => {\n        it('8x8', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            assert.deepEqual(board, TestData.initialBoardExpected);\n        });\n        it('memoize', () => {\n            // $FIX\n            // const board1 = Board.getInitialBoard(Board.getBoardConf Board.defaultBoardSize);\n            // const board2 = Board.getInitialBoard(Board.defaultBoardSize);\n            // assert.equal(board1, board2);\n        });\n    });\n    describe('hasPosition', () => {\n        it('return false for null position', () => {\n            assert.notOk(Board.hasPosition(TestData.initialBoard, null));\n        });\n        it('return false for undefined position', () => {\n            assert.notOk(Board.hasPosition(TestData.initialBoard, undefined));\n        });\n        it('return false for negative x', () => {\n            const position = { x: -1, y: 0 };\n            assert.notOk(Board.hasPosition(TestData.initialBoard, position));\n        });\n        it('return false for negative y', () => {\n            const position = { x: 1, y: -1 };\n            assert.notOk(Board.hasPosition(TestData.initialBoard, position));\n        });\n        it('return false for negative x and y', () => {\n            const position = { x: -1, y: -1 };\n            assert.notOk(Board.hasPosition(TestData.initialBoard, position));\n        });\n        it('return false for x > 7', () => {\n            const position = { x: 8, y: 1 };\n            assert.notOk(Board.hasPosition(TestData.initialBoard, position));\n        });\n        it('return false for y > 7', () => {\n            const position = { x: 7, y: 8 };\n            assert.notOk(Board.hasPosition(TestData.initialBoard, position));\n        });\n        it('return true for x: 0, y: 0', () => {\n            const position = { x: 0, y: 0 };\n            assert.ok(Board.hasPosition(TestData.initialBoard, position));\n        });\n        it('return true for x: 1, y: 1', () => {\n            const position = { x: 0, y: 0 };\n            assert.ok(Board.hasPosition(TestData.initialBoard, position));\n        });\n        it('return true for x: 7, y: 7', () => {\n            const position = { x: 7, y: 7 };\n            assert.ok(Board.hasPosition(TestData.initialBoard, position));\n        });\n    });\n    describe('getPosition', () => {\n        it('valid position', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const position = { x: 2, y: 3 };\n            const actual = Board.getPosition(board, position);\n            const expected = { x: 2, y: 3 };\n            assertPosition(actual, expected);\n        });\n        it('invalid position', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const position = { x: -2, y: -3 };\n            assert.throws(() => Board.getPosition(board, position));\n        });\n    });\n    describe('_getNearPositions', () => {\n        it('caches nearPositions', () => {\n            // Repeat params to get different instances.\n            const firstCall = Board._getNearPositions({ x: 8, y: 8 }, { x: 0, y: 0 });\n            const secondCall = Board._getNearPositions({ x: 8, y: 8 }, { x: 0, y: 0 });\n            assert.equal(firstCall, secondCall, 'Not same instance');\n        });\n    });\n    describe('getNotEmptyNearPositions', () => {\n        it('return only filled near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [{ x: 6, y: 7, isBlack: false }];\n            const actual = Board.getNotEmptyNearPositions(TestData.initialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getEmptyNearPositions', () => {\n        it('return all empty near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [{ x: 6, y: 6 }, { x: 7, y: 6 }];\n            const actual = Board.getEmptyNearPositions(TestData.initialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getNearPositions', () => {\n        it('return all near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [\n                { x: 6, y: 6 },\n                { x: 7, y: 6 },\n                { x: 6, y: 7, isBlack: false }\n            ];\n            const actual = Board.getNearPositions(TestData.initialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getJumpPosition', () => {\n        it('jumping up and right', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping up and left', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 2, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 0, y: 2 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping up', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and right', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 0, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 2, y: 5 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and left', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 2, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 0, y: 5 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping down', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 1, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 1, y: 5 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('return undefined if position is NOT empty', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 3, y: 0 };\n            const toJumpPosition = { x: 4, y: 0 };\n            assert.notOk(Board.getJumpPosition(from, toJumpPosition, board));\n        });\n        it('return undefined if position do NOT exists', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 0, y: 1 };\n            const toJumpPosition = { x: 0, y: 0 };\n            assert.notOk(Board.getJumpPosition(from, toJumpPosition, board));\n        });\n    });\n    describe('print', () => {\n        it('printUnicode', function printUnicodeTest() {\n            const actual = Board.printUnicodeBoard(TestData.initialBoard);\n            assert.equal(actual, TestData.unicodeStartBoard);\n        });\n        it('printXAndY', function printUnicodeTest() {\n            const actual = Board.printXAndYBoard(TestData.initialBoard);\n            assert.equal(actual, TestData.xAndYStartBoard);\n        });\n    });\n    describe('getStartEndRow', () => {\n        it('return {startRow: 0, endRow } for black', () => {\n            const actual = Board.getStartEndRow(7, true);\n            assert.equal(actual.startRow, 0);\n            assert.equal(actual.endRow, 7);\n        });\n        it('return {startRow: endRow, endRow: 0} for white', () => {\n            const actual = Board.getStartEndRow(7, false);\n            assert.equal(actual.startRow, 7);\n            assert.equal(actual.endRow, 0);\n        });\n    });\n    describe('getPositionsWhereCanIGo', () => {\n        it('return null for invalid from', () => {\n            const positions = Board.getPositionsWhereCanIGo(TestData.initialBoard, null, true);\n            assert.notOk(positions);\n        });\n    });\n    describe('getCleanBoard', () => {\n        it('8x8', () => {\n            const board = Board.getCleanBoard({ x: 8, y: 8 });\n            const board2 = Board.getCleanBoard({ x: 8, y: 8 });\n            assert.deepEqual(board, TestData.cleanBoardExpected);\n            assert.equal(board, board2, 'Cache did not worked');\n        });\n    });\n    describe('whereCanIJump', () => {\n        it('jump up 5,7 => 5,5 5,3 5,1', () => {\n            const pieces = [\n                { x: 5, y: 7, isBlack: true },\n                { x: 5, y: 6, isBlack: false },\n                { x: 5, y: 4, isBlack: false },\n                { x: 5, y: 2, isBlack: false },\n            ];\n            const board = Board.getBoardWithPieces(TestData.cleanBoard, pieces);\n            const from = { x: 5, y: 7 };\n            const p55 = {\n                x: 5, y: 5,\n                lastPosition: from,\n                jumpingBlackPiece: false,\n                jumps: 2\n            };\n            const p53 = {\n                x: 5, y: 3,\n                lastPosition: p55,\n                jumpingBlackPiece: false,\n                jumps: 3\n            };\n            const p51 = {\n                x: 5, y: 1,\n                lastPosition: p53,\n                jumpingBlackPiece: false,\n                jumps: 4\n            };\n            const whereCanIJump = Board.whereCanIJump(board, from, true);\n            assert.deepEqual(whereCanIJump, [p55, p53, p51]);\n        });\n    });\n    describe('getBoardWhereCanIGo', () => {\n        it('jump up 7,7 => 5,7 5,5 3,3 3,5 5,3', () => {\n            const pieces = [\n                { x: 7, y: 7, isBlack: true },\n                { x: 6, y: 7, isBlack: true },\n                { x: 5, y: 7, isBlack: true },\n                { x: 5, y: 6, isBlack: true },\n                { x: 4, y: 4, isBlack: false },\n                { x: 3, y: 4, isBlack: false },\n            ];\n            const board = Board.getBoardWithPieces(TestData.cleanBoard, pieces);\n            const from = { x: 7, y: 7 };\n            const actual = Board.getBoardWhereCanIGo(board, from, true);\n            // tslint:disable:max-line-length\n            const expected = [\n                [{ iCanGoHere: false, x: 0, y: 0 }, { iCanGoHere: false, x: 1, y: 0 }, { iCanGoHere: false, x: 2, y: 0 }, { iCanGoHere: false, x: 3, y: 0 }, { iCanGoHere: false, x: 4, y: 0 }, { iCanGoHere: false, x: 5, y: 0 }, { iCanGoHere: false, x: 6, y: 0 }, { iCanGoHere: false, x: 7, y: 0 }],\n                [{ iCanGoHere: false, x: 0, y: 1 }, { iCanGoHere: false, x: 1, y: 1 }, { iCanGoHere: false, x: 2, y: 1 }, { iCanGoHere: false, x: 3, y: 1 }, { iCanGoHere: false, x: 4, y: 1 }, { iCanGoHere: false, x: 5, y: 1 }, { iCanGoHere: false, x: 6, y: 1 }, { iCanGoHere: false, x: 7, y: 1 }],\n                [{ iCanGoHere: false, x: 0, y: 2 }, { iCanGoHere: false, x: 1, y: 2 }, { iCanGoHere: false, x: 2, y: 2 }, { iCanGoHere: false, x: 3, y: 2 }, { iCanGoHere: false, x: 4, y: 2 }, { iCanGoHere: false, x: 5, y: 2 }, { iCanGoHere: false, x: 6, y: 2 }, { iCanGoHere: false, x: 7, y: 2 }],\n                [{ iCanGoHere: false, x: 0, y: 3 }, { iCanGoHere: false, x: 1, y: 3 }, { iCanGoHere: false, x: 2, y: 3 }, { iCanGoHere: false, x: 3, y: 3 }, { iCanGoHere: false, x: 4, y: 3 }, { iCanGoHere: false, x: 5, y: 3 }, { iCanGoHere: false, x: 6, y: 3 }, { iCanGoHere: false, x: 7, y: 3 }],\n                [{ iCanGoHere: false, x: 0, y: 4 }, { iCanGoHere: false, x: 1, y: 4 }, { iCanGoHere: false, x: 2, y: 4 }, { iCanGoHere: false, x: 3, y: 4, isBlack: false }, { iCanGoHere: false, x: 4, y: 4, isBlack: false }, { iCanGoHere: false, x: 5, y: 4 }, { iCanGoHere: false, x: 6, y: 4 }, { iCanGoHere: false, x: 7, y: 4 }],\n                [{ iCanGoHere: false, x: 0, y: 5 }, { iCanGoHere: false, x: 1, y: 5 }, { iCanGoHere: false, x: 2, y: 5 }, { iCanGoHere: false, x: 3, y: 5 }, { iCanGoHere: false, x: 4, y: 5 }, { iCanGoHere: false, x: 5, y: 5 }, { iCanGoHere: false, x: 6, y: 5 }, { iCanGoHere: false, x: 7, y: 5 }],\n                [{ iCanGoHere: false, x: 0, y: 6 }, { iCanGoHere: false, x: 1, y: 6 }, { iCanGoHere: false, x: 2, y: 6 }, { iCanGoHere: false, x: 3, y: 6 }, { iCanGoHere: false, x: 4, y: 6 }, { iCanGoHere: false, x: 5, y: 6, isBlack: true }, { iCanGoHere: true, x: 6, y: 6 }, { iCanGoHere: true, x: 7, y: 6 }],\n                [{ iCanGoHere: false, x: 0, y: 7 }, { iCanGoHere: false, x: 1, y: 7 }, { iCanGoHere: false, x: 2, y: 7 }, { iCanGoHere: false, x: 3, y: 7 }, { iCanGoHere: false, x: 4, y: 7 }, { iCanGoHere: false, x: 5, y: 7, isBlack: true }, { iCanGoHere: false, x: 6, y: 7, isBlack: true }, { iCanGoHere: false, x: 7, y: 7, isBlack: true }]\n            ];\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getStartPieces', () => {\n        it('8x8', () => {\n            const pieces = Board.getStartPieces({ x: 8, y: 8 });\n            assert.deepEqual(pieces, TestData.startPiecesExpected);\n        });\n    });\n    describe('getPiecesFromBoard', () => {\n        it('get initial pieces', () => {\n            const pieces = Board.getPiecesFromBoard(TestData.initialBoard);\n            const expectedPieces = {\n                white: [\n                    { x: 0, y: 7, isBlack: false },\n                    { x: 1, y: 7, isBlack: false },\n                    { x: 2, y: 7, isBlack: false },\n                    { x: 3, y: 7, isBlack: false },\n                    { x: 4, y: 7, isBlack: false },\n                    { x: 5, y: 7, isBlack: false },\n                    { x: 6, y: 7, isBlack: false },\n                    { x: 7, y: 7, isBlack: false }\n                ],\n                black: [\n                    { x: 0, y: 0, isBlack: true },\n                    { x: 1, y: 0, isBlack: true },\n                    { x: 2, y: 0, isBlack: true },\n                    { x: 3, y: 0, isBlack: true },\n                    { x: 4, y: 0, isBlack: true },\n                    { x: 5, y: 0, isBlack: true },\n                    { x: 6, y: 0, isBlack: true },\n                    { x: 7, y: 0, isBlack: true }\n                ]\n            };\n            assert.deepEqual(pieces, expectedPieces);\n        });\n    });\n});\n//# sourceMappingURL=Board.test.js.map"]}