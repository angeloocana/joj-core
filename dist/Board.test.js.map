{"version":3,"sources":["../dist-esnext/Board.test.js"],"names":["assertPosition","actualPosition","expectedPosition","samePositionAs","isBlack","assertPositions","actual","expected","length","i","describe","it","position","x","y","positions","board","board1","board2","onlyEmpty","undefined","from","toJumpPosition","printUnicodeTest","endRow","startRow"],"mappings":"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","file":"Board.test.js","sourcesContent":["import { deepEqual, equal, notOk, ok } from 'ptz-assert';\nimport { boardHasThisPosition, defaultBoardConf, getColorStartEndRow, getInitialBoard, getJumpPosition, getNearPositions, getPosition, getY0Start7End, getY7Start0End, isBackGroundBlack, isSamePositionAs, positionsContains, positionsNotContains, printUnicode } from './index';\nimport log from 'ptz-log';\nimport { initialBoard, unicodeStartBoard } from './testData/board.data.test';\nfunction assertPosition(actualPosition, expectedPosition) {\n    const samePositionAs = isSamePositionAs(actualPosition, expectedPosition);\n    if (!samePositionAs)\n        log('actualPosition: ', actualPosition, ' \\n expectedPosition: ', expectedPosition);\n    ok(samePositionAs, 'samePositionAs');\n    equal(actualPosition.isBlack, expectedPosition.isBlack, 'Is same piece');\n}\nfunction assertPositions(actual, expected) {\n    equal(actual.length, expected.length, 'diferent length of actual and expected positions');\n    for (let i = 0; i < actual.length; i++) {\n        assertPosition(actual[i], expected[i]);\n    }\n}\ndescribe('Board', () => {\n    it('generateBoard'\n    // , () => {\n    //     let board = new Board();\n    //     board.generateBoard();\n    //     deepEqual(board.board, initialBoard);\n    // }\n    );\n    describe('isBackGroundBlack', () => {\n        it('0,0 => true', () => {\n            ok(isBackGroundBlack(0, 0));\n        });\n        it('0,1 => false', () => {\n            ok(!isBackGroundBlack(0, 1));\n        });\n    });\n    describe('positionsContains', () => {\n        it('not contains', () => {\n            const position = { x: 5, y: 2 };\n            const positions = [{ x: 4, y: 0 }, { x: 3, y: 0 }];\n            notOk(positionsContains(positions, position));\n        });\n        it('contains', () => {\n            const position = { x: 3, y: 0 };\n            const positions = [{ x: 4, y: 0 }, { x: 3, y: 0 }];\n            ok(positionsContains(positions, position));\n        });\n    });\n    describe('positionsNotContains', () => {\n        it('not contains', () => {\n            const position = { x: 5, y: 2 };\n            const positions = [{ x: 4, y: 0 }, { x: 3, y: 0 }];\n            ok(positionsNotContains(positions, position));\n        });\n        it('contains', () => {\n            const position = { x: 3, y: 0 };\n            const positions = [{ x: 4, y: 0 }, { x: 3, y: 0 }];\n            notOk(positionsNotContains(positions, position));\n        });\n    });\n    describe('getY0Start7End', () => {\n        it('for white y2 should return 5', () => {\n            const y = 2;\n            const isBlack = false;\n            equal(getY0Start7End(y, isBlack), 5);\n        });\n        it('for black y2 should return 2', () => {\n            const y = 2;\n            const isBlack = true;\n            equal(getY0Start7End(y, isBlack), 2);\n        });\n    });\n    describe('getY7Start0End', () => {\n        it('for white y2 should return 2', () => {\n            const y = 2;\n            const isBlack = false;\n            equal(getY7Start0End(y, isBlack), 2);\n        });\n        it('for black y2 should return 5', () => {\n            const y = 2;\n            const isBlack = true;\n            equal(getY7Start0End(y, isBlack), 5);\n        });\n    });\n    describe('getInitialBoard', () => {\n        it('8x8', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            log('board', board);\n            log('initialBoard', initialBoard);\n            deepEqual(board, initialBoard);\n        });\n        it('memoize', () => {\n            const board1 = getInitialBoard(defaultBoardConf);\n            const board2 = getInitialBoard(defaultBoardConf);\n            equal(board1, board2);\n        });\n    });\n    describe('boardHasThisPosition', () => {\n        const { board } = getInitialBoard(defaultBoardConf);\n        it('x1 y1 should return true', () => {\n            const position = { x: 1, y: 1 };\n            ok(boardHasThisPosition(board, position));\n        });\n        it('x-1 y0 should return false', () => {\n            const position = { x: -1, y: 0 };\n            notOk(boardHasThisPosition(board, position));\n        });\n        it('x0 y-1 should return false', () => {\n            const position = { x: 0, y: -1 };\n            notOk(boardHasThisPosition(board, position));\n        });\n        it('x-1 y-1 should return false', () => {\n            const position = { x: -1, y: -1 };\n            notOk(boardHasThisPosition(board, position));\n        });\n        it('x8 y1 should return false', () => {\n            const position = { x: 8, y: 1 };\n            notOk(boardHasThisPosition(board, position));\n        });\n        it('x1 y-8 should return false', () => {\n            const position = { x: 1, y: 8 };\n            notOk(boardHasThisPosition(board, position));\n        });\n        it('x8 y8 should return false', () => {\n            const position = { x: 8, y: 8 };\n            notOk(boardHasThisPosition(board, position));\n        });\n    });\n    describe('getPosition', () => {\n        it('getPosition', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const position = { x: 2, y: 3 };\n            const actual = getPosition(board, position);\n            const expected = { x: 2, y: 3 };\n            assertPosition(actual, expected);\n        });\n    });\n    describe('getNearPositions', () => {\n        it('onlyEmpty=false should return only filled near positions', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = false;\n            const expected = [{ x: 6, y: 7, isBlack: false }];\n            const actual = getNearPositions(board, position, onlyEmpty);\n            assertPositions(actual, expected);\n        });\n        it('onlyEmpty=true should return all empty near positions', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = true;\n            const expected = [{ x: 6, y: 6 }, { x: 7, y: 6 }];\n            const actual = getNearPositions(board, position, onlyEmpty);\n            log('actual', actual);\n            assertPositions(actual, expected);\n        });\n        it('onlyEmpty=undefined should return all near positions', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = undefined;\n            const expected = [\n                { x: 6, y: 6 },\n                { x: 7, y: 6 },\n                { x: 6, y: 7, isBlack: false }\n            ];\n            const actual = getNearPositions(board, position, onlyEmpty);\n            assertPositions(actual, expected);\n        });\n    });\n    describe('getJumpPosition', () => {\n        it('jumping up and rigth', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping up and left', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const from = { x: 2, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 0, y: 2 };\n            const actual = getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping up', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and rigth', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const from = { x: 0, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 2, y: 5 };\n            const actual = getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and left', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const from = { x: 2, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 0, y: 5 };\n            const actual = getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const from = { x: 1, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 1, y: 5 };\n            const actual = getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('should return undefined because position is not empty', () => {\n            const { board } = getInitialBoard(defaultBoardConf);\n            const from = { x: 3, y: 0 };\n            const toJumpPosition = { x: 4, y: 0 };\n            notOk(getJumpPosition(board, from, toJumpPosition));\n        });\n    });\n    it('printUnicode', function printUnicodeTest() {\n        const { board } = getInitialBoard(defaultBoardConf);\n        const actual = printUnicode(board);\n        equal(actual, unicodeStartBoard);\n    });\n    describe('getColorStartEndRow', () => {\n        it('return {startRow: 0, endRow } for black', () => {\n            const actual = getColorStartEndRow(defaultBoardConf.endRow, true);\n            equal(actual.startRow, 0);\n            equal(actual.endRow, 7);\n        });\n        it('return {startRow: endRow, endRow: 0} for white', () => {\n            const actual = getColorStartEndRow(defaultBoardConf.endRow, false);\n            equal(actual.startRow, 7);\n            equal(actual.endRow, 0);\n        });\n    });\n});\n//# sourceMappingURL=Board.test.js.map"]}