{"version":3,"sources":["../dist-esnext/Board.test.js"],"names":["assert","TestData","assertPosition","actualPosition","expectedPosition","samePositionAs","hasSamePosition","ok","equal","isBlack","assertPositions","actual","expected","length","i","describe","it","getInitialBoard","defaultBoardConf","board","deepEqual","initialBoardExpected","board1","board2","notOk","hasPosition","defaultInitialBoard","undefined","position","x","y","getPosition","throws","setPosition","onlyEmpty","getNearPositions","from","toJumpPosition","getJumpPosition","printUnicodeTest","printUnicodeBoard","unicodeStartBoard","printXAndYBoard","xAndYStartBoard","getColorStartEndRow","endRow","startRow","positions","getPositionsWhereCanIGo"],"mappings":"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","file":"Board.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Board, Position } from './index';\nimport log from 'ptz-log';\nimport * as TestData from './__tests__/board.data.test';\nfunction assertPosition(actualPosition, expectedPosition) {\n    const samePositionAs = Position.hasSamePosition(actualPosition, expectedPosition);\n    if (!samePositionAs)\n        log('actualPosition: ', actualPosition, ' \\n expectedPosition: ', expectedPosition);\n    assert.ok(samePositionAs, 'samePositionAs');\n    assert.equal(actualPosition.isBlack, expectedPosition.isBlack, 'Is same piece');\n}\nfunction assertPositions(actual, expected) {\n    assert.equal(actual.length, expected.length, 'different length of actual and expected positions');\n    for (let i = 0; i < actual.length; i++) {\n        assertPosition(actual[i], expected[i]);\n    }\n}\ndescribe('Board', () => {\n    describe('getInitialBoard', () => {\n        it('8x8', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            assert.deepEqual(board, TestData.initialBoardExpected);\n        });\n        it('memoize', () => {\n            const board1 = Board.getInitialBoard(Board.defaultBoardConf);\n            const board2 = Board.getInitialBoard(Board.defaultBoardConf);\n            assert.equal(board1, board2);\n        });\n    });\n    describe('hasPosition', () => {\n        it('return false for null position', () => {\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, null));\n        });\n        it('return false for undefined position', () => {\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, undefined));\n        });\n        it('return false for negative x', () => {\n            const position = { x: -1, y: 0 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for negative y', () => {\n            const position = { x: 1, y: -1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for negative x and y', () => {\n            const position = { x: -1, y: -1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for x > 7', () => {\n            const position = { x: 8, y: 1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for y > 7', () => {\n            const position = { x: 7, y: 8 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 0, y: 0', () => {\n            const position = { x: 0, y: 0 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 1, y: 1', () => {\n            const position = { x: 0, y: 0 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 7, y: 7', () => {\n            const position = { x: 7, y: 7 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n    });\n    describe('getPosition', () => {\n        it('valid position', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 2, y: 3 };\n            const actual = Board.getPosition(board, position);\n            const expected = { x: 2, y: 3 };\n            assertPosition(actual, expected);\n        });\n        it('invalid position', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: -2, y: -3 };\n            assert.throws(() => Board.getPosition(board, position));\n        });\n    });\n    describe('setPosition', () => {\n        it('valid position', () => {\n            let { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 2, y: 3 };\n            board = Board.setPosition(board, position);\n            assert.equal(board[position.y][position.x], position);\n        });\n        it('invalid position', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: -2, y: -3 };\n            assert.throws(() => Board.setPosition(board, position));\n        });\n    });\n    describe('getNearPositions', () => {\n        it('onlyEmpty=false should return only filled near positions', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = false;\n            const expected = [{ x: 6, y: 7, isBlack: false }];\n            const actual = Board.getNearPositions(board, position, onlyEmpty);\n            assertPositions(actual, expected);\n        });\n        it('onlyEmpty=true should return all empty near positions', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = true;\n            const expected = [{ x: 6, y: 6 }, { x: 7, y: 6 }];\n            const actual = Board.getNearPositions(board, position, onlyEmpty);\n            assertPositions(actual, expected);\n        });\n        it('onlyEmpty=undefined should return all near positions', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = undefined;\n            const expected = [\n                { x: 6, y: 6 },\n                { x: 7, y: 6 },\n                { x: 6, y: 7, isBlack: false }\n            ];\n            const actual = Board.getNearPositions(board, position, onlyEmpty);\n            assertPositions(actual, expected);\n        });\n    });\n    describe('getJumpPosition', () => {\n        it('jumping up and right', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping up and left', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 2, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 0, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping up', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and right', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 2, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and left', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 2, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 0, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 1, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 1, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('should return undefined because position is not empty', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 3, y: 0 };\n            const toJumpPosition = { x: 4, y: 0 };\n            assert.notOk(Board.getJumpPosition(board, from, toJumpPosition));\n        });\n    });\n    describe('print', () => {\n        it('printUnicode', function printUnicodeTest() {\n            const actual = Board.printUnicodeBoard(TestData.defaultInitialBoard);\n            assert.equal(actual, TestData.unicodeStartBoard);\n        });\n        it('printXAndY', function printUnicodeTest() {\n            const actual = Board.printXAndYBoard(TestData.defaultInitialBoard);\n            assert.equal(actual, TestData.xAndYStartBoard);\n        });\n    });\n    describe('getColorStartEndRow', () => {\n        it('return {startRow: 0, endRow } for black', () => {\n            const actual = Board.getColorStartEndRow(Board.defaultBoardConf.endRow, true);\n            assert.equal(actual.startRow, 0);\n            assert.equal(actual.endRow, 7);\n        });\n        it('return {startRow: endRow, endRow: 0} for white', () => {\n            const actual = Board.getColorStartEndRow(Board.defaultBoardConf.endRow, false);\n            assert.equal(actual.startRow, 7);\n            assert.equal(actual.endRow, 0);\n        });\n    });\n    describe('getPositionsWhereCanIGo', () => {\n        it('return null for invalid from', () => {\n            const positions = Board.getPositionsWhereCanIGo(TestData.defaultInitialBoard, null, true);\n            assert.notOk(positions);\n        });\n    });\n});\n//# sourceMappingURL=Board.test.js.map"]}