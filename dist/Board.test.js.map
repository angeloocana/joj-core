{"version":3,"sources":["../dist-esnext/Board.test.js"],"names":["assert","assertPosition","actualPosition","expectedPosition","samePositionAs","hasSamePosition","ok","equal","isBlack","assertPositions","actual","expected","length","i","describe","it","isBackGroundBlack","y","getY0Start7End","getY7Start0End","getInitialBoard","defaultBoardConf","board","deepEqual","board1","board2","position","x","hasPosition","notOk","getPosition","onlyEmpty","getNearPositions","undefined","from","toJumpPosition","getJumpPosition","printUnicodeTest","printUnicode","getColorStartEndRow","endRow","startRow"],"mappings":"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","file":"Board.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Board, Position } from './index';\nimport log from 'ptz-log';\nimport { initialBoard, unicodeStartBoard } from './testData/board.data.test';\nfunction assertPosition(actualPosition, expectedPosition) {\n    const samePositionAs = Position.hasSamePosition(actualPosition, expectedPosition);\n    if (!samePositionAs)\n        log('actualPosition: ', actualPosition, ' \\n expectedPosition: ', expectedPosition);\n    assert.ok(samePositionAs, 'samePositionAs');\n    assert.equal(actualPosition.isBlack, expectedPosition.isBlack, 'Is same piece');\n}\nfunction assertPositions(actual, expected) {\n    assert.equal(actual.length, expected.length, 'diferent length of actual and expected positions');\n    for (let i = 0; i < actual.length; i++) {\n        assertPosition(actual[i], expected[i]);\n    }\n}\ndescribe('Board', () => {\n    describe('isBackGroundBlack', () => {\n        it('0,0 => true', () => {\n            assert.ok(Board.isBackGroundBlack(0, 0));\n        });\n        it('0,1 => false', () => {\n            assert.ok(!Board.isBackGroundBlack(0, 1));\n        });\n    });\n    describe('getY0Start7End', () => {\n        it('for white y2 should return 5', () => {\n            const y = 2;\n            const isBlack = false;\n            assert.equal(Board.getY0Start7End(y, isBlack), 5);\n        });\n        it('for black y2 should return 2', () => {\n            const y = 2;\n            const isBlack = true;\n            assert.equal(Board.getY0Start7End(y, isBlack), 2);\n        });\n    });\n    describe('getY7Start0End', () => {\n        it('for white y2 should return 2', () => {\n            const y = 2;\n            const isBlack = false;\n            assert.equal(Board.getY7Start0End(y, isBlack), 2);\n        });\n        it('for black y2 should return 5', () => {\n            const y = 2;\n            const isBlack = true;\n            assert.equal(Board.getY7Start0End(y, isBlack), 5);\n        });\n    });\n    describe('getInitialBoard', () => {\n        it('8x8', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            assert.deepEqual(board, initialBoard);\n        });\n        it('memoize', () => {\n            const board1 = Board.getInitialBoard(Board.defaultBoardConf);\n            const board2 = Board.getInitialBoard(Board.defaultBoardConf);\n            assert.equal(board1, board2);\n        });\n    });\n    describe('hasPosition', () => {\n        const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n        it('x1 y1 should return true', () => {\n            const position = { x: 1, y: 1 };\n            assert.ok(Board.hasPosition(board, position));\n        });\n        it('x-1 y0 should return false', () => {\n            const position = { x: -1, y: 0 };\n            assert.notOk(Board.hasPosition(board, position));\n        });\n        it('x0 y-1 should return false', () => {\n            const position = { x: 0, y: -1 };\n            assert.notOk(Board.hasPosition(board, position));\n        });\n        it('x-1 y-1 should return false', () => {\n            const position = { x: -1, y: -1 };\n            assert.notOk(Board.hasPosition(board, position));\n        });\n        it('x8 y1 should return false', () => {\n            const position = { x: 8, y: 1 };\n            assert.notOk(Board.hasPosition(board, position));\n        });\n        it('x1 y-8 should return false', () => {\n            const position = { x: 1, y: 8 };\n            assert.notOk(Board.hasPosition(board, position));\n        });\n        it('x8 y8 should return false', () => {\n            const position = { x: 8, y: 8 };\n            assert.notOk(Board.hasPosition(board, position));\n        });\n    });\n    describe('getPosition', () => {\n        it('getPosition', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 2, y: 3 };\n            const actual = Board.getPosition(board, position);\n            const expected = { x: 2, y: 3 };\n            assertPosition(actual, expected);\n        });\n    });\n    describe('getNearPositions', () => {\n        it('onlyEmpty=false should return only filled near positions', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = false;\n            const expected = [{ x: 6, y: 7, isBlack: false }];\n            const actual = Board.getNearPositions(board, position, onlyEmpty);\n            assertPositions(actual, expected);\n        });\n        it('onlyEmpty=true should return all empty near positions', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = true;\n            const expected = [{ x: 6, y: 6 }, { x: 7, y: 6 }];\n            const actual = Board.getNearPositions(board, position, onlyEmpty);\n            log('actual', actual);\n            assertPositions(actual, expected);\n        });\n        it('onlyEmpty=undefined should return all near positions', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const position = { x: 7, y: 7 };\n            const onlyEmpty = undefined;\n            const expected = [\n                { x: 6, y: 6 },\n                { x: 7, y: 6 },\n                { x: 6, y: 7, isBlack: false }\n            ];\n            const actual = Board.getNearPositions(board, position, onlyEmpty);\n            assertPositions(actual, expected);\n        });\n    });\n    describe('getJumpPosition', () => {\n        it('jumping up and rigth', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping up and left', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 2, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 0, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping up', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and rigth', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 0, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 2, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and left', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 2, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 0, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('jumping down', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 1, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 1, y: 5 };\n            const actual = Board.getJumpPosition(board, from, toJumpPosition);\n            assertPosition(actual, expected);\n        });\n        it('should return undefined because position is not empty', () => {\n            const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n            const from = { x: 3, y: 0 };\n            const toJumpPosition = { x: 4, y: 0 };\n            assert.notOk(Board.getJumpPosition(board, from, toJumpPosition));\n        });\n    });\n    it('printUnicode', function printUnicodeTest() {\n        const { board } = Board.getInitialBoard(Board.defaultBoardConf);\n        const actual = Board.printUnicode(board);\n        assert.equal(actual, unicodeStartBoard);\n    });\n    describe('getColorStartEndRow', () => {\n        it('return {startRow: 0, endRow } for black', () => {\n            const actual = Board.getColorStartEndRow(Board.defaultBoardConf.endRow, true);\n            assert.equal(actual.startRow, 0);\n            assert.equal(actual.endRow, 7);\n        });\n        it('return {startRow: endRow, endRow: 0} for white', () => {\n            const actual = Board.getColorStartEndRow(Board.defaultBoardConf.endRow, false);\n            assert.equal(actual.startRow, 7);\n            assert.equal(actual.endRow, 0);\n        });\n    });\n});\n//# sourceMappingURL=Board.test.js.map"]}