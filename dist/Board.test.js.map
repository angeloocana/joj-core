{"version":3,"sources":["../dist-esnext/Board.test.js"],"names":["assert","TestData","assertPosition","actualPosition","expectedPosition","samePositionAs","hasSameXY","ok","equal","isBlack","describe","it","board","getInitialBoard","defaultBoardSize","deepEqual","initialBoardExpected","notOk","hasPosition","defaultInitialBoard","undefined","position","x","y","actual","getPosition","expected","throws","oldBoard","xy","newBoard","setPosition","notEqual","firstCall","_getNearPositions","secondCall","getNotEmptyNearPositions","getEmptyNearPositions","getNearPositions","from","toJumpPosition","getJumpPosition","printUnicodeTest","printUnicodeBoard","unicodeStartBoard","printXAndYBoard","xAndYStartBoard","getStartEndRow","startRow","endRow","positions","getPositionsWhereCanIGo"],"mappings":"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","file":"Board.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport { Board, Position } from './index';\nimport log from 'ptz-log';\nimport * as TestData from './__testdata__/board.data.test';\nfunction assertPosition(actualPosition, expectedPosition) {\n    const samePositionAs = Position.hasSameXY(actualPosition, expectedPosition);\n    if (!samePositionAs)\n        log('actualPosition: ', actualPosition, ' \\n expectedPosition: ', expectedPosition);\n    assert.ok(samePositionAs, 'samePositionAs');\n    assert.equal(actualPosition.isBlack, expectedPosition.isBlack, 'Is same piece');\n}\ndescribe('Board', () => {\n    describe('getInitialBoard', () => {\n        it('8x8', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            assert.deepEqual(board, TestData.initialBoardExpected);\n        });\n        it('memoize', () => {\n            // $FIX\n            // const board1 = Board.getInitialBoard(Board.getBoardConf Board.defaultBoardSize);\n            // const board2 = Board.getInitialBoard(Board.defaultBoardSize);\n            // assert.equal(board1, board2);\n        });\n    });\n    describe('hasPosition', () => {\n        it('return false for null position', () => {\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, null));\n        });\n        it('return false for undefined position', () => {\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, undefined));\n        });\n        it('return false for negative x', () => {\n            const position = { x: -1, y: 0 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for negative y', () => {\n            const position = { x: 1, y: -1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for negative x and y', () => {\n            const position = { x: -1, y: -1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for x > 7', () => {\n            const position = { x: 8, y: 1 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return false for y > 7', () => {\n            const position = { x: 7, y: 8 };\n            assert.notOk(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 0, y: 0', () => {\n            const position = { x: 0, y: 0 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 1, y: 1', () => {\n            const position = { x: 0, y: 0 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n        it('return true for x: 7, y: 7', () => {\n            const position = { x: 7, y: 7 };\n            assert.ok(Board.hasPosition(TestData.defaultInitialBoard, position));\n        });\n    });\n    describe('getPosition', () => {\n        it('valid position', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const position = { x: 2, y: 3 };\n            const actual = Board.getPosition(board, position);\n            const expected = { x: 2, y: 3 };\n            assertPosition(actual, expected);\n        });\n        it('invalid position', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const position = { x: -2, y: -3 };\n            assert.throws(() => Board.getPosition(board, position));\n        });\n    });\n    describe('setPosition', () => {\n        it('valid position', () => {\n            const oldBoard = Board.getInitialBoard(Board.defaultBoardSize);\n            const xy = { x: 2, y: 3 };\n            const newBoard = Board.setPosition(oldBoard, xy);\n            assert.equal(Board.getPosition(newBoard, xy), xy, 'different position');\n            assert.notEqual(newBoard, oldBoard, 'same instance');\n            assert.notEqual(Board.getPosition(newBoard, xy), Board.getPosition(oldBoard, xy), 'same instance');\n        });\n    });\n    describe('_getNearPositions', () => {\n        it('caches nearPositions', () => {\n            // Repeat params to get different instances.\n            const firstCall = Board._getNearPositions({ x: 8, y: 8 }, { x: 0, y: 0 });\n            const secondCall = Board._getNearPositions({ x: 8, y: 8 }, { x: 0, y: 0 });\n            assert.equal(firstCall, secondCall, 'Not same instance');\n        });\n    });\n    describe('getNotEmptyNearPositions', () => {\n        it('return only filled near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [{ x: 6, y: 7, isBlack: false }];\n            const actual = Board.getNotEmptyNearPositions(TestData.defaultInitialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getEmptyNearPositions', () => {\n        it('return all empty near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [{ x: 6, y: 6 }, { x: 7, y: 6 }];\n            const actual = Board.getEmptyNearPositions(TestData.defaultInitialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getNearPositions', () => {\n        it('return all near positions', () => {\n            const position = { x: 7, y: 7 };\n            const expected = [\n                { x: 6, y: 6 },\n                { x: 7, y: 6 },\n                { x: 6, y: 7, isBlack: false }\n            ];\n            const actual = Board.getNearPositions(TestData.defaultInitialBoard, position);\n            assert.deepEqual(actual, expected);\n        });\n    });\n    describe('getJumpPosition', () => {\n        it('jumping up and right', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping up and left', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 2, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 0, y: 2 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping up', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 0, y: 0 };\n            const toJumpPosition = { x: 1, y: 1 };\n            const expected = { x: 2, y: 2 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and right', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 0, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 2, y: 5 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping down and left', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 2, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 0, y: 5 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('jumping down', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 1, y: 7 };\n            const toJumpPosition = { x: 1, y: 6 };\n            const expected = { x: 1, y: 5 };\n            const actual = Board.getJumpPosition(from, toJumpPosition, board);\n            assertPosition(actual, expected);\n        });\n        it('should return undefined because position is not empty', () => {\n            const board = Board.getInitialBoard(Board.defaultBoardSize);\n            const from = { x: 3, y: 0 };\n            const toJumpPosition = { x: 4, y: 0 };\n            assert.notOk(Board.getJumpPosition(from, toJumpPosition, board));\n        });\n    });\n    describe('print', () => {\n        it('printUnicode', function printUnicodeTest() {\n            const actual = Board.printUnicodeBoard(TestData.defaultInitialBoard);\n            assert.equal(actual, TestData.unicodeStartBoard);\n        });\n        it('printXAndY', function printUnicodeTest() {\n            const actual = Board.printXAndYBoard(TestData.defaultInitialBoard);\n            assert.equal(actual, TestData.xAndYStartBoard);\n        });\n    });\n    describe('getStartEndRow', () => {\n        it('return {startRow: 0, endRow } for black', () => {\n            const actual = Board.getStartEndRow(7, true);\n            assert.equal(actual.startRow, 0);\n            assert.equal(actual.endRow, 7);\n        });\n        it('return {startRow: endRow, endRow: 0} for white', () => {\n            const actual = Board.getStartEndRow(7, false);\n            assert.equal(actual.startRow, 7);\n            assert.equal(actual.endRow, 0);\n        });\n    });\n    describe('getPositionsWhereCanIGo', () => {\n        it('return null for invalid from', () => {\n            const positions = Board.getPositionsWhereCanIGo(TestData.defaultInitialBoard, null, true);\n            assert.notOk(positions);\n        });\n    });\n});\n//# sourceMappingURL=Board.test.js.map"]}