{"version":3,"sources":["../dist-esnext/Game.js"],"names":["createGame","args","boardConf","board","blackPieces","whitePieces","game","ended","movements","players","white","black","getCleanGameToSaveOnServer","cleanGame","blackWin","map","from","x","move","y","to","getWinner","score","isMyTurn","isWhiteTurn","getGameWhereCanIGo","length","isBlackTurn","getColorTurn","getPlayerTurn","setPlayers","setMovements","needToValidateMovements","canMove","positionsWhereCanIGo","positions","findIndex","position","getGameAfterMove","backMove","Error","push","getBackMove","getGameBeforeLastMove","lastMove","pop"],"mappings":"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","file":"Game.js","sourcesContent":["import { compose, not } from 'ramda';\nimport { defaultBoardConf, getBoardAfterMove, getCleanBoardWhereCanIGo, getInitialBoard, getPositionsWhereCanIGo, setWhereCanIGo } from './Board';\nimport { colorWin, createGameColor, getColorAfterMove, getColorScore } from './GameColor';\nimport { isComputer } from './Player';\nimport { createPlayers } from './Players';\nimport { hasBlackPiece, hasWhitePiece, isSamePositionAs } from './Position';\nfunction createGame(args) {\n    const boardConf = args.boardConf || defaultBoardConf;\n    const { board, blackPieces, whitePieces } = getInitialBoard(boardConf);\n    const game = {\n        ended: false,\n        movements: args.movements || [],\n        players: createPlayers(args.players),\n        boardConf,\n        white: createGameColor(boardConf, false, whitePieces),\n        black: createGameColor(boardConf, true, blackPieces),\n        board\n    };\n    return game;\n}\nfunction getCleanGameToSaveOnServer(game) {\n    const cleanGame = {\n        ended: game.ended,\n        movements: [],\n        blackWin: game.blackWin\n    };\n    cleanGame.movements = game.movements.map(move => {\n        const from = { x: move.from.x, y: move.from.y };\n        const to = { x: move.to.x, y: move.to.y };\n        return { from, to };\n    });\n    return cleanGame;\n}\nfunction getWinner(game) {\n    game.white.score = getColorScore(game.white);\n    game.black.score = getColorScore(game.black);\n    if (colorWin(game.white))\n        game.blackWin = false;\n    else if (colorWin(game.black))\n        game.blackWin = true;\n    return game;\n}\nfunction isMyTurn(game, from) {\n    if (game.ended)\n        return false;\n    return isWhiteTurn(game) ? hasWhitePiece(from) : hasBlackPiece(from);\n}\nfunction getGameWhereCanIGo(game, from) {\n    game.board = getCleanBoardWhereCanIGo(game.board);\n    if (!isMyTurn(game, from))\n        return game;\n    game.board = setWhereCanIGo(game.board, from, hasBlackPiece(from));\n}\nfunction isWhiteTurn(game) {\n    return game.movements.length % 2 === 0;\n}\nconst isBlackTurn = compose(not, isWhiteTurn);\nfunction getColorTurn(game) {\n    return isWhiteTurn(game) ? game.white : game.black;\n}\nfunction getPlayerTurn(game) {\n    return isWhiteTurn(game) ? game.players.white : game.players.black;\n}\nfunction setPlayers(players) {\n    // Validate Players\n    this.players = players;\n}\nfunction setMovements(movements = [], needToValidateMovements = true) {\n    // Validate Movements\n    // if(needToValidateMovements)\n    this.movements = movements;\n    // This must be called in another place\n    // this.board.fillAllPiecesOnBoard(this.white.pieces, this.black.pieces);\n}\nfunction canMove(game, move) {\n    const positionsWhereCanIGo = getPositionsWhereCanIGo(game.board, move.from, isBlackTurn(game)).positions;\n    return positionsWhereCanIGo.findIndex(position => position.x === move.to.x\n        && position.y === move.to.y) >= 0;\n}\nfunction getGameAfterMove(game, move, backMove = false) {\n    if (isSamePositionAs(move.from, move.to))\n        throw new Error('ERROR_CANT_MOVE_TO_SAME_POSITION');\n    game.board = getCleanBoardWhereCanIGo(game.board);\n    if (!backMove)\n        if (!canMove(game, move))\n            throw new Error('ERROR_CANT_MOVE_TO_POSITION');\n    game.board = getBoardAfterMove(game.board, move);\n    game.black = getColorAfterMove(game.black, move);\n    game.white = getColorAfterMove(game.white, move);\n    if (!backMove) {\n        game.movements.push(move);\n        game = getWinner(game);\n    }\n    return game;\n}\nfunction getBackMove(move) {\n    return {\n        from: move.to,\n        to: move.from\n    };\n}\nfunction getGameBeforeLastMove(game) {\n    let lastMove = game.movements.pop();\n    if (lastMove)\n        game = getGameAfterMove(game, getBackMove(lastMove), true);\n    if (isComputer(getPlayerTurn(game))) {\n        lastMove = game.movements.pop();\n        if (lastMove) {\n            game = getGameAfterMove(game, getBackMove(lastMove), true);\n        }\n    }\n    return game;\n}\nexport { canMove, createGame, getBackMove, getColorTurn, getPlayerTurn, getWinner, getGameWhereCanIGo, getGameAfterMove, getGameBeforeLastMove, setPlayers, setMovements, getCleanGameToSaveOnServer };\n//# sourceMappingURL=Game.js.map"]}