{"version":3,"sources":["../dist-esnext/Game.js"],"names":["Board","GameColor","Players","Position","create","args","boardConf","defaultBoardConf","getInitialBoard","board","blackPieces","whitePieces","game","ended","movements","players","white","black","getCleanGameToSaveOnServer","blackWon","hasBlackWon","hasWon","isMyTurn","from","isWhiteTurn","hasWhitePiece","hasBlackPiece","getGameWhereCanIGo","getCleanBoard","setWhereCanIGo","length","isBlackTurn","getColorTurn","getPlayerTurn","setPlayers","setMovements","needToValidateMovements"],"mappings":"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","file":"Game.js","sourcesContent":["import { compose, not } from 'ramda';\nimport * as Board from './Board';\nimport * as GameColor from './GameColor';\nimport * as Players from './Players';\nimport * as Position from './Position';\nfunction create(args) {\n    const boardConf = args.boardConf || Board.defaultBoardConf;\n    const { board, blackPieces, whitePieces } = Board.getInitialBoard(boardConf);\n    const game = {\n        ended: false,\n        movements: args.movements || [],\n        players: Players.create(args.players),\n        boardConf,\n        white: GameColor.create(boardConf, false, whitePieces),\n        black: GameColor.create(boardConf, true, blackPieces),\n        board\n    };\n    return game;\n}\nfunction getCleanGameToSaveOnServer({ ended, blackWon, movements }) {\n    return {\n        ended,\n        movements,\n        blackWon\n    };\n}\n/**\n * Takes a game and checks:\n *  - black won return true.\n *  - white won return false.\n *  - nobody won return undefined.\n */\nfunction hasBlackWon(game) {\n    if (GameColor.hasWon(game.black))\n        return true;\n    else if (GameColor.hasWon(game.white))\n        return false;\n    return;\n}\nfunction isMyTurn(game, from) {\n    if (game.ended)\n        return false;\n    return isWhiteTurn(game) ? Position.hasWhitePiece(from) : Position.hasBlackPiece(from);\n}\nfunction getGameWhereCanIGo(game, from) {\n    game.board = Board.getCleanBoard(game.board);\n    if (!isMyTurn(game, from))\n        return game;\n    game.board = Board.setWhereCanIGo(game.board, from, Position.hasBlackPiece(from));\n}\nfunction isWhiteTurn(game) {\n    return game.movements.length % 2 === 0;\n}\nconst isBlackTurn = compose(not, isWhiteTurn);\nfunction getColorTurn(game) {\n    return isWhiteTurn(game) ? game.white : game.black;\n}\nfunction getPlayerTurn(game) {\n    return isWhiteTurn(game) ? game.players.white : game.players.black;\n}\nfunction setPlayers(players) {\n    // Validate Players\n    this.players = players;\n}\nfunction setMovements(movements = [], needToValidateMovements = true) {\n    // Validate Movements\n    // if(needToValidateMovements)\n    this.movements = movements;\n    // This must be called in another place\n    // this.board.fillAllPiecesOnBoard(this.white.pieces, this.black.pieces);\n}\nexport { create, getColorTurn, getPlayerTurn, hasBlackWon, getGameWhereCanIGo, isBlackTurn, isWhiteTurn, isMyTurn, setPlayers, setMovements, getCleanGameToSaveOnServer };\n//# sourceMappingURL=Game.js.map"]}