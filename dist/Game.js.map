{"version":3,"sources":["../dist-esnext/Game.js"],"names":["Board","GameColor","Players","Position","createGame","args","boardConf","defaultBoardConf","getInitialBoard","board","blackPieces","whitePieces","game","ended","movements","players","create","white","black","getCleanGameToSaveOnServer","isWhiteTurn","length","isBlackTurn","isMyTurn","from","getPosition","hasWhitePiece","hasBlackPiece","getColorTurn","getPlayerTurn"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;IAAYA,K;;AACZ;;IAAYC,S;;AACZ;;IAAYC,O;;AACZ;;IAAYC,Q;;;;;;AACZ,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,QAAMC,YAAYD,KAAKC,SAAL,IAAkBN,MAAMO,gBAA1C;;AADsB,gCAEsBP,MAAMQ,eAAN,CAAsBF,SAAtB,CAFtB;AAAA,QAEdG,KAFc,yBAEdA,KAFc;AAAA,QAEPC,WAFO,yBAEPA,WAFO;AAAA,QAEMC,WAFN,yBAEMA,WAFN;;AAGtB,QAAMC,OAAO;AACTC,eAAO,KADE;AAETC,mBAAWT,KAAKS,SAAL,IAAkB,EAFpB;AAGTC,iBAASb,QAAQc,MAAR,CAAeX,KAAKU,OAApB,CAHA;AAITT,4BAJS;AAKTW,eAAOhB,UAAUe,MAAV,CAAiBV,SAAjB,EAA4B,KAA5B,EAAmCK,WAAnC,CALE;AAMTO,eAAOjB,UAAUe,MAAV,CAAiBV,SAAjB,EAA4B,IAA5B,EAAkCI,WAAlC,CANE;AAOTD;AAPS,KAAb;AASA,WAAOG,IAAP;AACH;AACD,SAASO,0BAAT,OAA0D;AAAA,QAApBN,KAAoB,QAApBA,KAAoB;AAAA,QAAbC,SAAa,QAAbA,SAAa;;AACtD,WAAO;AACHD,oBADG;AAEHC;AAFG,KAAP;AAIH;AACD,IAAMM,cAAc,SAAdA,WAAc,CAACR,IAAD;AAAA,WAAUA,KAAKE,SAAL,CAAeO,MAAf,GAAwB,CAAxB,KAA8B,CAAxC;AAAA,CAApB;AACA,IAAMC,cAAc,gCAAaF,WAAb,CAApB;AACA;;;AAGA,SAASG,QAAT,CAAkBX,IAAlB,EAAwBY,IAAxB,EAA8B;AAC1B,QAAIZ,KAAKC,KAAT,EACI,OAAO,KAAP;AACJW,WAAOxB,MAAMyB,WAAN,CAAkBb,KAAKH,KAAvB,EAA8Be,IAA9B,CAAP;AACA,QAAMD,WAAWH,YAAYR,IAAZ,IAAoBT,SAASuB,aAAT,CAAuBF,IAAvB,CAApB,GAAmDrB,SAASwB,aAAT,CAAuBH,IAAvB,CAApE;AACA,QAAID,aAAa,KAAjB,EACI,sBAAI,QAAJ,EAAcC,IAAd,EAAoB,aAApB,EAAmCJ,YAAYR,IAAZ,CAAnC,EAAsD,cAAtD,EAAsEA,KAAKE,SAA3E;AACJ,WAAOS,QAAP;AACH;AACD,IAAMK,eAAe,SAAfA,YAAe,CAAChB,IAAD;AAAA,WAAUQ,YAAYR,IAAZ,IAAoBA,KAAKK,KAAzB,GAAiCL,KAAKM,KAAhD;AAAA,CAArB;AACA,IAAMW,gBAAgB,SAAhBA,aAAgB,CAACjB,IAAD;AAAA,WAAUQ,YAAYR,IAAZ,IAAoBA,KAAKG,OAAL,CAAaE,KAAjC,GAAyCL,KAAKG,OAAL,CAAaG,KAAhE;AAAA,CAAtB;QACSd,U,GAAAA,U;QAAYwB,Y,GAAAA,Y;QAAcC,a,GAAAA,a;QAAeP,W,GAAAA,W;QAAaF,W,GAAAA,W;QAAaG,Q,GAAAA,Q;QAAUJ,0B,GAAAA,0B;AACtF","file":"Game.js","sourcesContent":["import log from 'ptz-log';\nimport { compose, not } from 'ramda';\nimport * as Board from './Board';\nimport * as GameColor from './GameColor';\nimport * as Players from './Players';\nimport * as Position from './Position';\nfunction createGame(args) {\n    const boardConf = args.boardConf || Board.defaultBoardConf;\n    const { board, blackPieces, whitePieces } = Board.getInitialBoard(boardConf);\n    const game = {\n        ended: false,\n        movements: args.movements || [],\n        players: Players.create(args.players),\n        boardConf,\n        white: GameColor.create(boardConf, false, whitePieces),\n        black: GameColor.create(boardConf, true, blackPieces),\n        board\n    };\n    return game;\n}\nfunction getCleanGameToSaveOnServer({ ended, movements }) {\n    return {\n        ended,\n        movements\n    };\n}\nconst isWhiteTurn = (game) => game.movements.length % 2 === 0;\nconst isBlackTurn = compose(not, isWhiteTurn);\n/**\n * Returns true if from piece can be played.\n */\nfunction isMyTurn(game, from) {\n    if (game.ended)\n        return false;\n    from = Board.getPosition(game.board, from);\n    const isMyTurn = isWhiteTurn(game) ? Position.hasWhitePiece(from) : Position.hasBlackPiece(from);\n    if (isMyTurn === false)\n        log('from: ', from, 'isWhiteTurn', isWhiteTurn(game), ' movements: ', game.movements);\n    return isMyTurn;\n}\nconst getColorTurn = (game) => isWhiteTurn(game) ? game.white : game.black;\nconst getPlayerTurn = (game) => isWhiteTurn(game) ? game.players.white : game.players.black;\nexport { createGame, getColorTurn, getPlayerTurn, isBlackTurn, isWhiteTurn, isMyTurn, getCleanGameToSaveOnServer };\n//# sourceMappingURL=Game.js.map"]}