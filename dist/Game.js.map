{"version":3,"sources":["../dist-esnext/Game.js"],"names":["Board","Player","Position","Score","createGame","args","boardSize","defaultBoardSize","game","moves","players","createPlayers","score","getInitialScore","board","getInitialBoard","isWhiteTurn","length","isBlackTurn","isMyTurn","from","ended","getPositionFromBoard","hasWhitePiece","hasBlackPiece","getPlayerTurn","white","black","getTurnPieces","isBlack","reduce","piecesRow","row","concat","pieces","position","x","y","getTurnPiecesWhereCanIGo","getPiecesWhereCanIGo"],"mappings":";;;;;;;AAAA;;AACA;;IAAYA,K;;AACZ;;IAAYC,M;;AACZ;;IAAYC,Q;;AACZ;;IAAYC,K;;;;AACZ,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtBA,WAAOA,QAAQ,EAAf;AACA,QAAMC,YAAYD,KAAKC,SAAL,IAAkBN,MAAMO,gBAA1C;AACA,QAAMC,OAAO;AACTC,eAAOJ,KAAKI,KAAL,IAAc,EADZ;AAETC,iBAAST,OAAOU,aAAP,CAAqBN,KAAKK,OAA1B,CAFA;AAGTE,eAAOT,MAAMU,eAAN,EAHE;AAITC,eAAOd,MAAMe,eAAN,CAAsBT,SAAtB;AAJE,KAAb;AAMA,WAAOE,IAAP;AACH;AACD,IAAMQ,cAAc,SAAdA,WAAc,CAACR,IAAD;AAAA,WAAUA,KAAKC,KAAL,CAAWQ,MAAX,GAAoB,CAApB,KAA0B,CAApC;AAAA,CAApB;AACA,IAAMC,cAAc,gCAAaF,WAAb,CAApB;AACA;;;AAGA,SAASG,QAAT,CAAkBX,IAAlB,EAAwBY,IAAxB,EAA8B;AAC1B,QAAIZ,KAAKI,KAAL,CAAWS,KAAf,EACI,OAAO,KAAP;AACJD,WAAOpB,MAAMsB,oBAAN,CAA2Bd,KAAKM,KAAhC,EAAuCM,IAAvC,CAAP;AACA,WAAOJ,YAAYR,IAAZ,IAAoBN,SAASqB,aAAT,CAAuBH,IAAvB,CAApB,GAAmDlB,SAASsB,aAAT,CAAuBJ,IAAvB,CAA1D;AACH;AACD,IAAMK,gBAAgB,SAAhBA,aAAgB,CAACjB,IAAD;AAAA,WAAUQ,YAAYR,IAAZ,IAAoBA,KAAKE,OAAL,CAAagB,KAAjC,GAAyClB,KAAKE,OAAL,CAAaiB,KAAhE;AAAA,CAAtB;AACA;;;AAGA,SAASC,aAAT,CAAuBpB,IAAvB,EAA6B;AACzB,QAAMqB,UAAUX,YAAYV,IAAZ,CAAhB;AACA,WAAOA,KAAKM,KAAL,CAAWgB,MAAX,CAAkB,UAACC,SAAD,EAAYC,GAAZ,EAAoB;AACzC,eAAOD,UAAUE,MAAV,CAAiBD,IAAIF,MAAJ,CAAW,UAACI,MAAD,EAASC,QAAT;AAAA,mBAAuBN,YAAYM,SAASN,OAAtB,GACnDK,MADmD,GAEnDA,OAAOD,MAAP,CAAc,EAAEG,GAAGD,SAASC,CAAd,EAAiBC,GAAGF,SAASE,CAA7B,EAAgCR,gBAAhC,EAAd,CAF6B;AAAA,SAAX,EAEwC,EAFxC,CAAjB,CAAP;AAGH,KAJM,EAIJ,EAJI,CAAP;AAKH;AACD;;;AAGA,IAAMS,2BAA2B,SAA3BA,wBAA2B,CAAC9B,IAAD;AAAA,WAAUR,MAAMuC,oBAAN,CAA2B/B,KAAKM,KAAhC,EAAuCc,cAAcpB,IAAd,CAAvC,CAAV;AAAA,CAAjC;QACSJ,U,GAAAA,U;QAAYqB,a,GAAAA,a;QAAeP,W,GAAAA,W;QAAaF,W,GAAAA,W;QAAaG,Q,GAAAA,Q;QAAUS,a,GAAAA,a;QAAeU,wB,GAAAA,wB;AACvF","file":"Game.js","sourcesContent":["import { compose, not } from 'ramda';\nimport * as Board from './Board';\nimport * as Player from './Player';\nimport * as Position from './Position';\nimport * as Score from './Score';\nfunction createGame(args) {\n    args = args || [];\n    const boardSize = args.boardSize || Board.defaultBoardSize;\n    const game = {\n        moves: args.moves || [],\n        players: Player.createPlayers(args.players),\n        score: Score.getInitialScore(),\n        board: Board.getInitialBoard(boardSize)\n    };\n    return game;\n}\nconst isWhiteTurn = (game) => game.moves.length % 2 === 0;\nconst isBlackTurn = compose(not, isWhiteTurn);\n/**\n * Returns true if from piece can be played.\n */\nfunction isMyTurn(game, from) {\n    if (game.score.ended)\n        return false;\n    from = Board.getPositionFromBoard(game.board, from);\n    return isWhiteTurn(game) ? Position.hasWhitePiece(from) : Position.hasBlackPiece(from);\n}\nconst getPlayerTurn = (game) => isWhiteTurn(game) ? game.players.white : game.players.black;\n/**\n * Gets all positions from current player turn.\n */\nfunction getTurnPieces(game) {\n    const isBlack = isBlackTurn(game);\n    return game.board.reduce((piecesRow, row) => {\n        return piecesRow.concat(row.reduce((pieces, position) => (isBlack !== position.isBlack)\n            ? pieces\n            : pieces.concat({ x: position.x, y: position.y, isBlack }), []));\n    }, []);\n}\n/**\n * Gets all pieces from current player turn with whereCanIGo positions.\n */\nconst getTurnPiecesWhereCanIGo = (game) => Board.getPiecesWhereCanIGo(game.board, getTurnPieces(game));\nexport { createGame, getPlayerTurn, isBlackTurn, isWhiteTurn, isMyTurn, getTurnPieces, getTurnPiecesWhereCanIGo };\n//# sourceMappingURL=Game.js.map"]}