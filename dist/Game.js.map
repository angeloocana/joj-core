{"version":3,"sources":["../dist-esnext/Game.js"],"names":["Board","Player","Position","Score","createGame","args","boardSize","defaultBoardSize","game","moves","players","createPlayers","score","getInitialScore","board","getInitialBoard","isWhiteTurn","length","isBlackTurn","isMyTurn","from","ended","getPosition","hasWhitePiece","hasBlackPiece","getPlayerTurn","white","black"],"mappings":";;;;;;;AAAA;;AACA;;IAAYA,K;;AACZ;;IAAYC,M;;AACZ;;IAAYC,Q;;AACZ;;IAAYC,K;;;;AACZ,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtBA,WAAOA,QAAQ,EAAf;AACA,QAAMC,YAAYD,KAAKC,SAAL,IAAkBN,MAAMO,gBAA1C;AACA,QAAMC,OAAO;AACTC,eAAOJ,KAAKI,KAAL,IAAc,EADZ;AAETC,iBAAST,OAAOU,aAAP,CAAqBN,KAAKK,OAA1B,CAFA;AAGTE,eAAOT,MAAMU,eAAN,EAHE;AAITC,eAAOd,MAAMe,eAAN,CAAsBT,SAAtB;AAJE,KAAb;AAMA,WAAOE,IAAP;AACH;AACD,IAAMQ,cAAc,SAAdA,WAAc,CAACR,IAAD;AAAA,WAAUA,KAAKC,KAAL,CAAWQ,MAAX,GAAoB,CAApB,KAA0B,CAApC;AAAA,CAApB;AACA,IAAMC,cAAc,gCAAaF,WAAb,CAApB;AACA;;;AAGA,SAASG,QAAT,CAAkBX,IAAlB,EAAwBY,IAAxB,EAA8B;AAC1B,QAAIZ,KAAKI,KAAL,CAAWS,KAAf,EACI,OAAO,KAAP;AACJD,WAAOpB,MAAMsB,WAAN,CAAkBd,KAAKM,KAAvB,EAA8BM,IAA9B,CAAP;AACA,WAAOJ,YAAYR,IAAZ,IAAoBN,SAASqB,aAAT,CAAuBH,IAAvB,CAApB,GAAmDlB,SAASsB,aAAT,CAAuBJ,IAAvB,CAA1D;AACH;AACD,IAAMK,gBAAgB,SAAhBA,aAAgB,CAACjB,IAAD;AAAA,WAAUQ,YAAYR,IAAZ,IAAoBA,KAAKE,OAAL,CAAagB,KAAjC,GAAyClB,KAAKE,OAAL,CAAaiB,KAAhE;AAAA,CAAtB;QACSvB,U,GAAAA,U;QAAYqB,a,GAAAA,a;QAAeP,W,GAAAA,W;QAAaF,W,GAAAA,W;QAAaG,Q,GAAAA,Q;AAC9D","file":"Game.js","sourcesContent":["import { compose, not } from 'ramda';\nimport * as Board from './Board';\nimport * as Player from './Player';\nimport * as Position from './Position';\nimport * as Score from './Score';\nfunction createGame(args) {\n    args = args || [];\n    const boardSize = args.boardSize || Board.defaultBoardSize;\n    const game = {\n        moves: args.moves || [],\n        players: Player.createPlayers(args.players),\n        score: Score.getInitialScore(),\n        board: Board.getInitialBoard(boardSize)\n    };\n    return game;\n}\nconst isWhiteTurn = (game) => game.moves.length % 2 === 0;\nconst isBlackTurn = compose(not, isWhiteTurn);\n/**\n * Returns true if from piece can be played.\n */\nfunction isMyTurn(game, from) {\n    if (game.score.ended)\n        return false;\n    from = Board.getPosition(game.board, from);\n    return isWhiteTurn(game) ? Position.hasWhitePiece(from) : Position.hasBlackPiece(from);\n}\nconst getPlayerTurn = (game) => isWhiteTurn(game) ? game.players.white : game.players.black;\nexport { createGame, getPlayerTurn, isBlackTurn, isWhiteTurn, isMyTurn };\n//# sourceMappingURL=Game.js.map"]}