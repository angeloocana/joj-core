{"version":3,"sources":["../dist-esnext/Game.js"],"names":["Board","GameColor","Players","Position","create","args","boardConf","defaultBoardConf","getInitialBoard","board","blackPieces","whitePieces","game","ended","movements","players","white","black","getCleanGameToSaveOnServer","cleanGame","blackWin","map","from","x","move","y","to","getWinner","score","getScore","hasWon","isMyTurn","isWhiteTurn","hasWhitePiece","hasBlackPiece","getGameWhereCanIGo","getCleanBoard","setWhereCanIGo","length","isBlackTurn","getColorTurn","getPlayerTurn","setPlayers","setMovements","needToValidateMovements"],"mappings":"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","file":"Game.js","sourcesContent":["import { compose, not } from 'ramda';\nimport * as Board from './Board';\nimport * as GameColor from './GameColor';\nimport * as Players from './Players';\nimport * as Position from './Position';\nfunction create(args) {\n    const boardConf = args.boardConf || Board.defaultBoardConf;\n    const { board, blackPieces, whitePieces } = Board.getInitialBoard(boardConf);\n    const game = {\n        ended: false,\n        movements: args.movements || [],\n        players: Players.create(args.players),\n        boardConf,\n        white: GameColor.create(boardConf, false, whitePieces),\n        black: GameColor.create(boardConf, true, blackPieces),\n        board\n    };\n    return game;\n}\nfunction getCleanGameToSaveOnServer(game) {\n    const cleanGame = {\n        ended: game.ended,\n        movements: [],\n        blackWin: game.blackWin\n    };\n    cleanGame.movements = game.movements.map(move => {\n        const from = { x: move.from.x, y: move.from.y };\n        const to = { x: move.to.x, y: move.to.y };\n        return { from, to };\n    });\n    return cleanGame;\n}\nfunction getWinner(game) {\n    game.white.score = GameColor.getScore(game.white);\n    game.black.score = GameColor.getScore(game.black);\n    if (GameColor.hasWon(game.white))\n        game.blackWin = false;\n    else if (GameColor.hasWon(game.black))\n        game.blackWin = true;\n    return game;\n}\nfunction isMyTurn(game, from) {\n    if (game.ended)\n        return false;\n    return isWhiteTurn(game) ? Position.hasWhitePiece(from) : Position.hasBlackPiece(from);\n}\nfunction getGameWhereCanIGo(game, from) {\n    game.board = Board.getCleanBoard(game.board);\n    if (!isMyTurn(game, from))\n        return game;\n    game.board = Board.setWhereCanIGo(game.board, from, Position.hasBlackPiece(from));\n}\nfunction isWhiteTurn(game) {\n    return game.movements.length % 2 === 0;\n}\nconst isBlackTurn = compose(not, isWhiteTurn);\nfunction getColorTurn(game) {\n    return isWhiteTurn(game) ? game.white : game.black;\n}\nfunction getPlayerTurn(game) {\n    return isWhiteTurn(game) ? game.players.white : game.players.black;\n}\nfunction setPlayers(players) {\n    // Validate Players\n    this.players = players;\n}\nfunction setMovements(movements = [], needToValidateMovements = true) {\n    // Validate Movements\n    // if(needToValidateMovements)\n    this.movements = movements;\n    // This must be called in another place\n    // this.board.fillAllPiecesOnBoard(this.white.pieces, this.black.pieces);\n}\nexport { create, getColorTurn, getPlayerTurn, getWinner, getGameWhereCanIGo, isBlackTurn, isWhiteTurn, isMyTurn, setPlayers, setMovements, getCleanGameToSaveOnServer };\n//# sourceMappingURL=Game.js.map"]}