{"version":3,"sources":["../dist-esnext/Game.js"],"names":["Game","args","ended","needToValidateMovements","board","boardArgs","white","boardOptions","black","setMovements","movements","setPlayers","players","fillAllPiecesOnBoard","pieces","length","cleanGame","blackWin","i","move","startPosition","x","y","nextPosition","push","cleanBoardWhereCanIGo","blackPiece","isBlackPiece","whiteTurn","isWhiteTurn","setWhereCanIGo","setColorWinners","win","positionsWhereCanIGo","getPositionsWhereCanIGo","positions","nextPositionFound","findIndex","position","backMove","isSamePositionAs","Error","canMove","verifyWinner","lastMove","pop","getPlayerTurn","isComputer"],"mappings":";;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;;;IACaA,I,WAAAA,I;AACT;;;AAGA,oBAAuB;AAAA,YAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AACnB,aAAKC,KAAL,GAAa,KAAb;AACA,YAAID,KAAKE,uBAAL,KAAiC,IAAjC,IAAyCF,KAAKE,uBAAL,KAAiC,KAA9E,EACIF,KAAKE,uBAAL,GAA+B,IAA/B;AACJ,aAAKC,KAAL,GAAa,yBAAcH,KAAKI,SAAnB,CAAb;AACA,aAAKC,KAAL,GAAa,yBAAc,KAAKF,KAAL,CAAWG,YAAzB,EAAuC,KAAvC,CAAb;AACA,aAAKC,KAAL,GAAa,yBAAc,KAAKJ,KAAL,CAAWG,YAAzB,EAAuC,IAAvC,CAAb;AACA,aAAKE,YAAL,CAAkBR,KAAKS,SAAvB,EAAkCT,KAAKE,uBAAvC;AACA,aAAKQ,UAAL,CAAgBV,KAAKW,OAArB;AACH;;;;mCACUA,O,EAAS;AAChB;AACA,iBAAKA,OAAL,GAAeA,OAAf;AACH;;;uCAC4D;AAAA,gBAAhDF,SAAgD,uEAApC,EAAoC;AAAA,gBAAhCP,uBAAgC,uEAAN,IAAM;;AACzD;AACA;AACA,iBAAKO,SAAL,GAAiBA,SAAjB;AACA,iBAAKN,KAAL,CAAWS,oBAAX,CAAgC,KAAKP,KAAL,CAAWQ,MAA3C,EAAmD,KAAKN,KAAL,CAAWM,MAA9D;AACH;;;sCACa;AACV,mBAAO,KAAKJ,SAAL,CAAeK,MAAf,GAAwB,CAAxB,KAA8B,CAArC;AACH;;;qDAC4B;AACzB,gBAAMC,YAAY;AACdd,uBAAO,KAAKA,KADE;AAEdQ,2BAAW,EAFG;AAGdO,0BAAU,KAAKA;AAHD,aAAlB;AAKA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKR,SAAL,CAAeK,MAAnC,EAA2CG,GAA3C,EAAgD;AAC5C,oBAAMC,OAAO,KAAKT,SAAL,CAAeQ,CAAf,CAAb;AACA,oBAAME,gBAAgB,iCAAkB,EAAEC,GAAGF,KAAKC,aAAL,CAAmBC,CAAxB,EAA2BC,GAAGH,KAAKC,aAAL,CAAmBE,CAAjD,EAAlB,CAAtB;AACA,oBAAMC,eAAe,iCAAkB,EAAEF,GAAGF,KAAKI,YAAL,CAAkBF,CAAvB,EAA0BC,GAAGH,KAAKI,YAAL,CAAkBD,CAA/C,EAAlB,CAArB;AACAN,0BAAUN,SAAV,CAAoBc,IAApB,CAAyB,EAAEJ,4BAAF,EAAiBG,0BAAjB,EAAzB;AACH;AACD,mBAAOP,SAAP;AACH;;;uCACcI,a,EAAe;AAC1B,iBAAKhB,KAAL,CAAWqB,qBAAX;AACA,gBAAMC,aAAaN,cAAcO,YAAd,EAAnB;AACA,gBAAMC,YAAY,KAAKC,WAAL,EAAlB;AACA,gBAAI,KAAK3B,KAAL,IAAcwB,eAAe,IAA7B,IACI,CAACA,UAAD,IAAe,CAACE,SADpB,IAEIF,cAAcE,SAFtB,EAGI;AACJ,iBAAKxB,KAAL,CAAW0B,cAAX,CAA0BV,aAA1B,EAAyCM,UAAzC;AACH;;;uCACc;AACX,iBAAKpB,KAAL,CAAWyB,eAAX;AACA,iBAAKvB,KAAL,CAAWuB,eAAX;AACA,gBAAI,KAAKzB,KAAL,CAAW0B,GAAX,EAAJ,EACI,KAAKf,QAAL,GAAgB,KAAhB,CADJ,KAEK,IAAI,KAAKT,KAAL,CAAWwB,GAAX,EAAJ,EACD,KAAKf,QAAL,GAAgB,IAAhB;AACP;;;gCACOG,a,EAAeG,Y,EAAc;AACjC,gBAAMU,uBAAuB,KAAK7B,KAAL,CAAW8B,uBAAX,CAAmCd,aAAnC,EAAkD,CAAC,KAAKS,WAAL,EAAnD,EAAuEM,SAApG;AACA,gBAAIC,oBAAoB,KAAxB;AACAA,gCAAoBH,qBAAqBI,SAArB,CAA+B;AAAA,uBAAYC,SAASjB,CAAT,KAAeE,aAAaF,CAA5B,IACxDiB,SAAShB,CAAT,KAAeC,aAAaD,CADgB;AAAA,aAA/B,KACqB,CADzC;AAEA,iBAAKlB,KAAL,CAAWqB,qBAAX;AACA,mBAAOW,iBAAP;AACH;;;6BACIhB,a,EAAeG,Y,EAAgC;AAAA,gBAAlBgB,QAAkB,uEAAP,KAAO;;AAChD,gBAAInB,cAAcoB,gBAAd,CAA+BjB,YAA/B,CAAJ,EACI,MAAM,IAAIkB,KAAJ,CAAU,kCAAV,CAAN;AACJ,gBAAI,CAACF,QAAL,EACI,IAAI,CAAC,KAAKG,OAAL,CAAatB,aAAb,EAA4BG,YAA5B,CAAL,EACI,MAAM,IAAIkB,KAAJ,CAAU,6BAAV,CAAN;AACR,iBAAKrC,KAAL,CAAWe,IAAX,CAAgBC,aAAhB,EAA+BG,YAA/B,EAA6CgB,QAA7C,EAAuD,KAAKV,WAAL,EAAvD;AACA,iBAAKrB,KAAL,CAAWW,IAAX,CAAgBC,aAAhB,EAA+BG,YAA/B;AACA,iBAAKjB,KAAL,CAAWa,IAAX,CAAgBC,aAAhB,EAA+BG,YAA/B;AACA,gBAAI,CAACgB,QAAL,EAAe;AACX,qBAAK7B,SAAL,CAAec,IAAf,CAAoB,EAAEJ,4BAAF,EAAiBG,0BAAjB,EAApB;AACA,qBAAKoB,YAAL;AACH;AACJ;;;mCACU;AACP,iBAAKvC,KAAL,CAAWqB,qBAAX;AACA,gBAAImB,WAAW,KAAKlC,SAAL,CAAemC,GAAf,EAAf;AACA,gBAAID,QAAJ,EACI,KAAKzB,IAAL,CAAUyB,SAASrB,YAAnB,EAAiCqB,SAASxB,aAA1C,EAAyD,IAAzD;AACJ,gBAAI,KAAK0B,aAAL,GAAqBC,UAArB,EAAJ,EAAuC;AACnCH,2BAAW,KAAKlC,SAAL,CAAemC,GAAf,EAAX;AACA,oBAAID,QAAJ,EAAc;AACV,yBAAKxC,KAAL,CAAWqB,qBAAX;AACA,yBAAKN,IAAL,CAAUyB,SAASrB,YAAnB,EAAiCqB,SAASxB,aAA1C,EAAyD,IAAzD;AACH;AACJ;AACJ;;;uCACc;AACX,mBAAO,KAAKS,WAAL,GAAmB,KAAKvB,KAAxB,GAAgC,KAAKE,KAA5C;AACH;;;wCACe;AACZ,mBAAO,KAAKqB,WAAL,GAAmB,KAAKjB,OAAL,CAAaN,KAAhC,GAAwC,KAAKM,OAAL,CAAaJ,KAA5D;AACH;;;qCACY;AACT,mBAAO,IAAIR,IAAJ,CAAS,IAAT,CAAP;AACH;;;kCACS;AACN,mBAAO,uBAAK,IAAL,CAAP;AACH;;;;;AAEL","file":"Game.js","sourcesContent":["import copy from 'ptz-copy';\nimport { BoardPosition } from './BoardPosition';\nimport { GameBoard } from './GameBoard';\nimport { GameColor } from './GameColor';\nexport class Game {\n    /**\n     * Create new Game\n     */\n    constructor(args = {}) {\n        this.ended = false;\n        if (args.needToValidateMovements !== true && args.needToValidateMovements !== false)\n            args.needToValidateMovements = true;\n        this.board = new GameBoard(args.boardArgs);\n        this.white = new GameColor(this.board.boardOptions, false);\n        this.black = new GameColor(this.board.boardOptions, true);\n        this.setMovements(args.movements, args.needToValidateMovements);\n        this.setPlayers(args.players);\n    }\n    setPlayers(players) {\n        // Validate Players\n        this.players = players;\n    }\n    setMovements(movements = [], needToValidateMovements = true) {\n        // Validate Movements\n        // if(needToValidateMovements)\n        this.movements = movements;\n        this.board.fillAllPiecesOnBoard(this.white.pieces, this.black.pieces);\n    }\n    isWhiteTurn() {\n        return this.movements.length % 2 === 0;\n    }\n    getCleanGameToSaveOnServer() {\n        const cleanGame = {\n            ended: this.ended,\n            movements: [],\n            blackWin: this.blackWin\n        };\n        for (let i = 0; i < this.movements.length; i++) {\n            const move = this.movements[i];\n            const startPosition = new BoardPosition({ x: move.startPosition.x, y: move.startPosition.y });\n            const nextPosition = new BoardPosition({ x: move.nextPosition.x, y: move.nextPosition.y });\n            cleanGame.movements.push({ startPosition, nextPosition });\n        }\n        return cleanGame;\n    }\n    setWhereCanIGo(startPosition) {\n        this.board.cleanBoardWhereCanIGo();\n        const blackPiece = startPosition.isBlackPiece();\n        const whiteTurn = this.isWhiteTurn();\n        if (this.ended || blackPiece === null\n            || (!blackPiece && !whiteTurn)\n            || (blackPiece && whiteTurn))\n            return;\n        this.board.setWhereCanIGo(startPosition, blackPiece);\n    }\n    verifyWinner() {\n        this.white.setColorWinners();\n        this.black.setColorWinners();\n        if (this.white.win())\n            this.blackWin = false;\n        else if (this.black.win())\n            this.blackWin = true;\n    }\n    canMove(startPosition, nextPosition) {\n        const positionsWhereCanIGo = this.board.getPositionsWhereCanIGo(startPosition, !this.isWhiteTurn()).positions;\n        var nextPositionFound = false;\n        nextPositionFound = positionsWhereCanIGo.findIndex(position => position.x === nextPosition.x\n            && position.y === nextPosition.y) >= 0;\n        this.board.cleanBoardWhereCanIGo();\n        return nextPositionFound;\n    }\n    move(startPosition, nextPosition, backMove = false) {\n        if (startPosition.isSamePositionAs(nextPosition))\n            throw new Error('ERROR_CANT_MOVE_TO_SAME_POSITION');\n        if (!backMove)\n            if (!this.canMove(startPosition, nextPosition))\n                throw new Error('ERROR_CANT_MOVE_TO_POSITION');\n        this.board.move(startPosition, nextPosition, backMove, this.isWhiteTurn());\n        this.black.move(startPosition, nextPosition);\n        this.white.move(startPosition, nextPosition);\n        if (!backMove) {\n            this.movements.push({ startPosition, nextPosition });\n            this.verifyWinner();\n        }\n    }\n    backMove() {\n        this.board.cleanBoardWhereCanIGo();\n        let lastMove = this.movements.pop();\n        if (lastMove)\n            this.move(lastMove.nextPosition, lastMove.startPosition, true);\n        if (this.getPlayerTurn().isComputer()) {\n            lastMove = this.movements.pop();\n            if (lastMove) {\n                this.board.cleanBoardWhereCanIGo();\n                this.move(lastMove.nextPosition, lastMove.startPosition, true);\n            }\n        }\n    }\n    getColorTurn() {\n        return this.isWhiteTurn ? this.white : this.black;\n    }\n    getPlayerTurn() {\n        return this.isWhiteTurn ? this.players.white : this.players.black;\n    }\n    getNewCopy() {\n        return new Game(this);\n    }\n    getCopy() {\n        return copy(this);\n    }\n}\n//# sourceMappingURL=Game.js.map"]}